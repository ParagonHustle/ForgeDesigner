Combined Code Files - Sun 13 Apr 2025 03:32:10 PM UTC


=== client/src/components/ui/accordion.tsx ===
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


=== client/src/components/ui/alert-dialog.tsx ===
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


=== client/src/components/ui/alert.tsx ===
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


=== client/src/components/ui/aspect-ratio.tsx ===
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


=== client/src/components/ui/avatar.tsx ===
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


=== client/src/components/ui/badge.tsx ===
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


=== client/src/components/ui/breadcrumb.tsx ===
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


=== client/src/components/ui/button.tsx ===
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


=== client/src/components/ui/calendar.tsx ===
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


=== client/src/components/ui/card.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


=== client/src/components/ui/carousel.tsx ===
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


=== client/src/components/ui/chart.tsx ===
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


=== client/src/components/ui/checkbox.tsx ===
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


=== client/src/components/ui/collapsible.tsx ===
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


=== client/src/components/ui/command.tsx ===
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


=== client/src/components/ui/context-menu.tsx ===
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


=== client/src/components/ui/dialog.tsx ===
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


=== client/src/components/ui/drawer.tsx ===
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


=== client/src/components/ui/dropdown-menu.tsx ===
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


=== client/src/components/ui/form.tsx ===
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


=== client/src/components/ui/hover-card.tsx ===
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


=== client/src/components/ui/input-otp.tsx ===
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


=== client/src/components/ui/input.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


=== client/src/components/ui/label.tsx ===
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


=== client/src/components/ui/menubar.tsx ===
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


=== client/src/components/ui/navigation-menu.tsx ===
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


=== client/src/components/ui/pagination.tsx ===
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


=== client/src/components/ui/popover.tsx ===
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


=== client/src/components/ui/progress.tsx ===
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


=== client/src/components/ui/radio-group.tsx ===
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


=== client/src/components/ui/resizable.tsx ===
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


=== client/src/components/ui/scroll-area.tsx ===
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


=== client/src/components/ui/select.tsx ===
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


=== client/src/components/ui/separator.tsx ===
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


=== client/src/components/ui/sheet.tsx ===
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


=== client/src/components/ui/sidebar.tsx ===
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        if (setOpenProp) {
          return setOpenProp?.(
            typeof value === "function" ? value(open) : value
          )
        }

        _setOpen(value)

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


=== client/src/components/ui/skeleton.tsx ===
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


=== client/src/components/ui/slider.tsx ===
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


=== client/src/components/ui/switch.tsx ===
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


=== client/src/components/ui/table.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


=== client/src/components/ui/tabs.tsx ===
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


=== client/src/components/ui/textarea.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


=== client/src/components/ui/toast.tsx ===
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


=== client/src/components/ui/toaster.tsx ===
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


=== client/src/components/ui/toggle-group.tsx ===
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


=== client/src/components/ui/toggle.tsx ===
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


=== client/src/components/ui/tooltip.tsx ===
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


=== client/src/components/ui/AICompanion.tsx ===
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { MessageCircle } from 'lucide-react';

const AICompanion = () => {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState<{role: 'user' | 'assistant', content: string}[]>([
    { role: 'assistant', content: "I'm your Aura Guide! How can I assist you with your journey through The Forge today?" }
  ]);
  const [input, setInput] = useState('');

  const handleSendMessage = () => {
    if (!input.trim()) return;
    
    const userMessage = { role: 'user' as const, content: input };
    setMessages([...messages, userMessage]);
    setInput('');
    
    // Simulate AI response
    setTimeout(() => {
      const responses = [
        "To maximize your Aura fusion success, try matching elements when possible.",
        "Don't forget to collect your farming resources regularly!",
        "Characters gain passive bonuses from equipped Auras even when inactive.",
        "The Forge level determines the maximum level your characters can reach.",
        "Upgrade your Townhall to unlock more simultaneous tasks.",
        "Rare auras have a higher chance of transferring skills during fusion.",
        "Visit the Black Market often - the inventory refreshes every 24 hours.",
        "Complete Bounty Board quests for valuable Soul Shards.",
        "Characters with high Vitality perform better in longer dungeon runs."
      ];
      
      const aiResponse = { 
        role: 'assistant' as const, 
        content: responses[Math.floor(Math.random() * responses.length)] 
      };
      setMessages(prevMessages => [...prevMessages, aiResponse]);
    }, 1000);
  };

  return (
    <>
      {/* Mobile version - just the icon */}
      <Dialog open={open} onOpenChange={setOpen}>
        <DialogTrigger asChild>
          <button className="w-10 h-10 md:w-auto md:h-auto flex items-center justify-center mt-2">
            <img 
              src="https://cdn.pixabay.com/photo/2020/06/01/22/23/eye-5248678_960_720.jpg" 
              alt="AI Assistant" 
              className="w-10 h-10 rounded-full border-2 border-[#00B9AE]"
            />
            <span className="ml-2 text-sm hidden md:block">Aura Guide</span>
          </button>
        </DialogTrigger>
        
        <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB] max-w-md">
          <DialogHeader>
            <DialogTitle className="text-[#00B9AE] font-cinzel text-xl">Aura Guide</DialogTitle>
          </DialogHeader>
          
          <div className="mt-4 h-80 overflow-y-auto p-2 bg-[#1F1D36]/50 rounded-md">
            {messages.map((msg, index) => (
              <div 
                key={index} 
                className={`mb-3 ${
                  msg.role === 'assistant' 
                    ? 'bg-[#432874]/20 border-l-2 border-[#00B9AE]' 
                    : 'bg-[#432874]/10 border-r-2 border-[#FF9D00]'
                } p-2 rounded-md`}
              >
                <p className="text-sm">{msg.content}</p>
              </div>
            ))}
          </div>
          
          <div className="flex mt-4">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="Ask your AI companion..."
              className="flex-1 bg-[#1F1D36]/80 border border-[#432874]/30 rounded-l-lg px-3 py-2 text-sm focus:outline-none focus:border-[#00B9AE]"
            />
            <Button 
              onClick={handleSendMessage}
              className="bg-[#00B9AE] hover:bg-[#00B9AE]/80 rounded-r-lg rounded-l-none"
            >
              <MessageCircle className="h-5 w-5" />
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default AICompanion;


=== client/src/components/ui/OfferBanner.tsx ===
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useAuthStore } from '@/lib/zustandStore';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';

const OfferBanner = () => {
  const [showBanner, setShowBanner] = useState(true);
  const [isPurchasing, setIsPurchasing] = useState(false);
  const [dialogOpen, setDialogOpen] = useState(false);
  const { user, fetchUser } = useAuthStore();
  const { toast } = useToast();

  const handlePurchase = async () => {
    if (!user) return;
    
    setIsPurchasing(true);
    try {
      // Simulate purchase API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      toast({
        title: "Purchase Successful!",
        description: "6,200 Forge Tokens have been added to your account.",
        variant: "default",
      });
      
      // Refresh user data
      fetchUser();
      setDialogOpen(false);
    } catch (error) {
      console.error('Purchase error:', error);
      toast({
        title: "Purchase Failed",
        description: "There was an error processing your purchase.",
        variant: "destructive",
      });
    } finally {
      setIsPurchasing(false);
    }
  };

  if (!showBanner) return null;

  return (
    <div className="bg-gradient-to-r from-[#432874]/80 to-[#00B9AE]/50 rounded-lg mb-6 relative overflow-hidden">
      <button 
        onClick={() => setShowBanner(false)}
        className="absolute top-2 right-2 text-[#C8B8DB]/70 hover:text-[#C8B8DB] text-sm"
      >
        ✕
      </button>
      
      <div className="p-4 flex items-center justify-between">
        <div>
          <h3 className="text-[#FF9D00] font-cinzel text-xl font-bold">Limited Time Offer!</h3>
          <p className="text-[#C8B8DB] text-sm">Get 6,200 Forge Tokens and unlock exclusive Legendary Auras!</p>
        </div>
        
        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
          <DialogTrigger asChild>
            <Button className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E] font-semibold">
              Buy Now
            </Button>
          </DialogTrigger>
          
          <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB]">
            <DialogHeader>
              <DialogTitle className="text-[#FF9D00] font-cinzel text-xl">Premium Token Package</DialogTitle>
            </DialogHeader>
            
            <div className="mt-4">
              <div className="bg-[#432874]/20 rounded-lg p-4 mb-4">
                <div className="flex items-center justify-center mb-3">
                  <img 
                    src="https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=250&h=250&fit=crop"
                    alt="Forge Tokens" 
                    className="w-16 h-16 rounded-full border-2 border-[#FF9D00]"
                  />
                </div>
                
                <h3 className="text-center text-[#FF9D00] font-cinzel text-2xl">6,200 Forge Tokens</h3>
                <p className="text-center text-sm mt-2">
                  Forge Tokens can be used for premium purchases in the Black Market, 
                  speed up building upgrades, and unlock Legendary Auras.
                </p>
              </div>
              
              <div className="flex justify-between items-center mb-4">
                <span className="text-[#C8B8DB]">Price:</span>
                <span className="text-[#FF9D00] font-bold">$19.99</span>
              </div>
              
              <Button 
                onClick={handlePurchase} 
                disabled={isPurchasing}
                className="w-full bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E] font-semibold"
              >
                {isPurchasing ? "Processing..." : "Complete Purchase"}
              </Button>
              
              <p className="text-center text-xs mt-4 text-[#C8B8DB]/60">
                For demonstration purposes only. No actual purchase will be made.
              </p>
            </div>
          </DialogContent>
        </Dialog>
      </div>
      
      {/* Decorative Elements */}
      <div className="absolute top-0 right-0 w-32 h-32 bg-[#FFD700]/10 rounded-full -mr-10 -mt-10 blur-md"></div>
      <div className="absolute bottom-0 left-0 w-24 h-24 bg-[#00B9AE]/20 rounded-full -ml-10 -mb-10 blur-md"></div>
    </div>
  );
};

export default OfferBanner;


=== client/src/components/layout/Sidebar.tsx ===
import { useState } from 'react';
import { Link, useLocation } from 'wouter';
import AICompanion from '../ui/AICompanion';
import { 
  Home, 
  Package, 
  Grid, 
  Gem, 
  ShoppingBag, 
  Building2, 
  List, 
  Hammer,
  Award
} from 'lucide-react';

const navItems = [
  { path: "/", label: "Dashboard", icon: <Home className="h-6 w-6" /> },
  { path: "/inventory", label: "Inventory", icon: <Package className="h-6 w-6" /> },
  { path: "/dungeons", label: "Dungeon", icon: <Grid className="h-6 w-6" /> },
  { path: "/farming", label: "Farming", icon: <Gem className="h-6 w-6" /> },
  { path: "/forge", label: "Forge", icon: <Hammer className="h-6 w-6" /> },
  { path: "/blackmarket", label: "Black Market", icon: <ShoppingBag className="h-6 w-6" /> },
  { path: "/buildings", label: "Buildings", icon: <Building2 className="h-6 w-6" /> },
  { path: "/bounty", label: "Bounty Board", icon: <List className="h-6 w-6" /> },
  { path: "/collections", label: "Collections", icon: <Award className="h-6 w-6" /> },
];

const Sidebar = () => {
  const [location] = useLocation();
  
  return (
    <aside className="w-16 md:w-56 bg-[#1A1A2E] border-r border-[#432874]/50 flex flex-col transition-all duration-300">
      <div className="py-4 flex flex-col items-center md:items-start space-y-1">
        {navItems.map((item) => {
          const isActive = location === item.path;
          
          return (
            <Link key={item.path} href={item.path}>
              <a 
                className={`flex items-center w-full px-3 py-2.5 rounded-lg ${
                  isActive 
                    ? "bg-[#432874]/20 text-[#FF9D00] border-l-2 border-[#FF9D00]" 
                    : "hover:bg-[#432874]/10 text-[#C8B8DB]"
                }`}
              >
                {item.icon}
                <span className="ml-3 hidden md:block">{item.label}</span>
              </a>
            </Link>
          );
        })}
      </div>
      
      <div className="mt-auto p-4 hidden md:block">
        <div className="bg-[#432874]/20 rounded-lg p-2 text-center">
          <div className="text-xs text-[#C8B8DB]/70">AI Companion</div>
          <AICompanion />
        </div>
      </div>
    </aside>
  );
};

export default Sidebar;


=== client/src/components/layout/MainLayout.tsx ===
import { ReactNode, useEffect } from 'react';
import Navbar from './Navbar';
import Sidebar from './Sidebar';
import AICompanion from '../ui/AICompanion';
import { useDiscordAuth } from '@/lib/discordAuth';
import { useGameStore } from '@/lib/zustandStore';

interface MainLayoutProps {
  children: ReactNode;
}

const MainLayout = ({ children }: MainLayoutProps) => {
  const { isAuthenticated, isLoading, user, login, fetchUser } = useDiscordAuth();
  const { 
    fetchResources, 
    fetchCharacters, 
    fetchAuras, 
    fetchFarmingTasks, 
    fetchDungeonRuns,
    fetchForgingTasks,
    fetchBlackMarketListings,
    fetchBountyQuests
  } = useGameStore();

  // Load user data on mount
  useEffect(() => {
    fetchUser();
  }, [fetchUser]);

  // Fetch game data when authenticated
  useEffect(() => {
    if (isAuthenticated && !isLoading) {
      fetchResources();
      fetchCharacters();
      fetchAuras();
      fetchFarmingTasks();
      fetchDungeonRuns();
      fetchForgingTasks();
      fetchBlackMarketListings();
      fetchBountyQuests();
    }
  }, [
    isAuthenticated, 
    isLoading, 
    fetchResources, 
    fetchCharacters, 
    fetchAuras, 
    fetchFarmingTasks, 
    fetchDungeonRuns,
    fetchForgingTasks,
    fetchBlackMarketListings,
    fetchBountyQuests
  ]);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-primary-900 flex items-center justify-center">
        <div className="text-secondary animate-pulse text-2xl font-cinzel">
          Loading The Forge...
        </div>
      </div>
    );
  }

  // If not authenticated, show login screen
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-[#1A1A2E] flex flex-col items-center justify-center p-4">
        <div className="bg-[#432874]/20 border border-[#432874]/50 rounded-xl p-8 max-w-md w-full">
          <h1 className="text-4xl font-cinzel font-bold text-[#FF9D00] text-center mb-6">The Forge</h1>
          <p className="text-[#C8B8DB] text-center mb-8">
            Welcome to The Forge - the management platform for Aura Forge. Log in with Discord to begin your journey.
          </p>
          
          {/* Universal login button that uses the dev/prod logic in the store */}
          <button 
            onClick={() => login()}
            className="w-full bg-[#7855FF] hover:bg-[#6248BF] transition-colors text-white font-bold py-3 px-4 rounded-lg flex items-center justify-center relative overflow-hidden"
          >
            {/* DEV mode indicator that shows up conditionally with client-side JS */}
            <div id="dev-indicator" className="absolute top-0 left-0 bg-green-500 text-white text-xs px-2 py-0.5 hidden">DEV</div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 127.14 96.36" className="w-6 h-6 mr-2 fill-current">
              <path d="M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z" />
            </svg>
            <span id="login-button-text">Login with Discord</span>
          </button>
          
          {/* Client-side script to update login button text based on dev/prod environment */}
          <script dangerouslySetInnerHTML={{ __html: `
            (function() {
              const isDevEnvironment = window.location.hostname === 'localhost' || window.location.hostname.includes('replit');
              if (isDevEnvironment) {
                const indicator = document.getElementById('dev-indicator');
                const buttonText = document.getElementById('login-button-text');
                if (indicator) indicator.classList.remove('hidden');
                if (buttonText) buttonText.textContent = 'Dev Login (No Discord Required)';
              }
            })();
          `}} />
          
          <div className="mt-6 text-center text-[#C8B8DB]/60 text-sm">
            Alpha v0.1 - Connect your Discord account to start your adventure
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen bg-[#1F1D36] text-[#C8B8DB] font-nunito">
      <Navbar />
      
      <div className="flex flex-1 overflow-hidden">
        <Sidebar />
        
        <main className="flex-1 overflow-y-auto bg-[#1F1D36] p-4">
          {children}
          
          <div className="fixed bottom-4 right-4 md:hidden">
            <AICompanion />
          </div>
        </main>
      </div>
    </div>
  );
};

export default MainLayout;


=== client/src/components/layout/Navbar.tsx ===
import { useDiscordAuth } from '@/lib/discordAuth';
import { useGameStore } from '@/lib/zustandStore';
import { Zap } from 'lucide-react';
import { useLocation, Link } from 'wouter';
import CountdownTimer from '@/components/common/CountdownTimer';

const Navbar = () => {
  const { user, logout } = useDiscordAuth();
  const { forgeTokens, rogueCredits, speedBoostActive, speedBoostMultiplier, farmingTasks, dungeonRuns, forgingTasks } = useGameStore();
  const location = useLocation();

  // Get activity timers and counts
  const getActivityTimers = () => {
    const now = new Date().getTime();
    const activities = {
      dungeon: { time: Infinity, path: '/dungeons', count: 0 },
      forge: { time: Infinity, path: '/forge', count: 0 },
      farming: { time: Infinity, path: '/farming', count: 0 }
    };

    dungeonRuns?.forEach(run => {
      if (!run.completed) {
        activities.dungeon.count++;
        const endTime = new Date(run.endTime).getTime();
        if (endTime - now < activities.dungeon.time) {
          activities.dungeon.time = endTime - now;
        }
      }
    });

    forgingTasks?.forEach(task => {
      if (!task.completed) {
        activities.forge.count++;
        const endTime = new Date(task.endTime).getTime();
        if (endTime - now < activities.forge.time) {
          activities.forge.time = endTime - now;
        }
      }
    });

    farmingTasks?.forEach(task => {
      if (!task.completed) {
        activities.farming.count++;
        const endTime = new Date(task.endTime).getTime();
        if (endTime - now < activities.farming.time) {
          activities.farming.time = endTime - now;
        }
      }
    });

    return activities;
  };

  const activityTimers = getActivityTimers();

  return (
    <nav className="bg-[#1A1A2E] border-b border-[#432874]/50 px-4 py-2 flex justify-between items-center sticky top-0 z-50">
      <div className="flex items-center">
        <div className="text-2xl font-cinzel font-bold text-[#FF9D00] mr-2">The Forge</div>
        <span className="bg-[#00B9AE]/20 text-[#00B9AE] text-xs px-2 py-0.5 rounded">Alpha v0.1</span>

        {/* Activity Timer Tags */}
        <div className="ml-4 flex gap-2">
          {Object.entries(activityTimers).map(([type, data]) => {
            if (data.count === 0) return null;
            const isComplete = data.time <= 0;
            return (
              <Link 
                key={type} 
                href={data.path}
                className={`
                  px-2 py-1 rounded text-xs flex items-center gap-1 cursor-pointer
                  ${isComplete 
                    ? 'bg-green-500/20 text-green-400 border border-green-500/30' 
                    : 'bg-[#432874]/20 text-[#C8B8DB] border border-[#432874]/30'}
                `}
              >
                {type.charAt(0).toUpperCase() + type.slice(1)}
                {data.count > 1 && (
                  <span className="text-[#FF9D00] font-semibold ml-1">
                    x{data.count}
                  </span>
                )}
                {!isComplete && (
                  <CountdownTimer 
                    endTime={new Date(Date.now() + data.time).toISOString()} 
                    className="ml-1"
                  />
                )}
                {isComplete && (
                  <span className="text-green-400">✓</span>
                )}
              </Link>
            );
          })}
        </div>

        {speedBoostActive && (
          <div className="ml-2 flex items-center bg-[#FF9D00]/20 text-[#FF9D00] text-xs px-2 py-0.5 rounded animate-pulse">
            <Zap className="h-3 w-3 mr-1" />
            <span>{speedBoostMultiplier}x Speed Boost</span>
          </div>
        )}
      </div>

      <div className="flex items-center space-x-4">
        {/* Resources Display */}
        <div className="hidden md:flex items-center space-x-3">
          <div className="flex items-center">
            <img 
              src="https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=250&h=250&fit=crop" 
              alt="Forge Tokens" 
              className="w-5 h-5 rounded-full mr-1"
            />
            <span className="text-[#FFD700]">{forgeTokens}</span>
          </div>
          <div className="flex items-center">
            <img 
              src="https://images.unsplash.com/photo-1543486958-d783bfbf7f8e?w=250&h=250&fit=crop" 
              alt="Rogue Credits" 
              className="w-5 h-5 rounded-full mr-1"
            />
            <span>{rogueCredits}</span>
          </div>
        </div>

        {/* User Profile */}
        <div className="relative group">
          <div className="flex items-center bg-[#432874]/30 rounded-full px-3 py-1.5 cursor-pointer">
            <img 
              src={user?.avatarUrl || "https://cdn.pixabay.com/photo/2021/03/02/12/03/avatar-6062252_1280.png"} 
              alt="User Avatar" 
              className="w-7 h-7 rounded-full border border-[#FF9D00]"
            />
            <span className="ml-2 text-sm hidden md:block">{user?.username || "ForgeHero"}</span>
          </div>

          {/* Dropdown menu */}
          <div className="absolute right-0 mt-2 w-48 bg-[#1A1A2E] border border-[#432874]/50 rounded-lg shadow-lg overflow-hidden transform scale-0 group-hover:scale-100 transition-transform origin-top-right">
            <div className="p-2">
              <button 
                onClick={() => logout()}
                className="w-full text-left p-2 hover:bg-[#432874]/20 rounded-md text-sm"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

=== client/src/components/common/CountdownTimer.tsx ===
import { useState, useEffect } from 'react';

interface CountdownTimerProps {
  endTime: Date | string;
  onComplete?: () => void;
  className?: string;
}

const CountdownTimer = ({ endTime, onComplete, className = '' }: CountdownTimerProps) => {
  const [timeLeft, setTimeLeft] = useState<string>('');
  const [isComplete, setIsComplete] = useState<boolean>(false);
  
  useEffect(() => {
    // Convert string to Date if necessary
    const targetDate = typeof endTime === 'string' ? new Date(endTime) : endTime;
    
    const calculateTimeLeft = () => {
      const difference = targetDate.getTime() - new Date().getTime();
      
      if (difference <= 0) {
        setTimeLeft('Complete');
        setIsComplete(true);
        // The following line has been commented out to prevent automatic task completion
        // if (onComplete) onComplete();
        return;
      }
      
      // Calculate hours, minutes, seconds
      const hours = Math.floor(difference / (1000 * 60 * 60));
      const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((difference % (1000 * 60)) / 1000);
      
      // Format the time left
      let formattedTime = '';
      
      if (hours > 0) {
        formattedTime += `${hours}:`;
      }
      
      formattedTime += `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      
      setTimeLeft(formattedTime);
    };
    
    // Calculate on mount and then every second
    calculateTimeLeft();
    const timer = setInterval(calculateTimeLeft, 1000);
    
    // Clean up the interval on unmount
    return () => clearInterval(timer);
  }, [endTime, onComplete]);
  
  return (
    <span className={`${className} ${isComplete ? 'text-[#00B9AE]' : 'text-[#C8B8DB]/70'}`}>
      {timeLeft}
    </span>
  );
};

export default CountdownTimer;


=== client/src/components/dashboard/WelcomeSection.tsx ===
import { motion } from 'framer-motion';

interface WelcomeSectionProps {
  username: string;
  charactersCount: number;
  aurasCount: number;
  activeDungeons: number;
  farmingSlotsCount: number;
}

const WelcomeSection = ({
  username,
  charactersCount,
  aurasCount,
  activeDungeons,
  farmingSlotsCount
}: WelcomeSectionProps) => {
  return (
    <motion.div 
      className="bg-[#1A1A2E] rounded-xl p-6 relative overflow-hidden"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="absolute top-0 right-0 w-64 h-64 bg-[#432874]/20 rounded-full -mr-32 -mt-32 blur-md"></div>
      
      <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] relative z-10">Welcome back, {username}</h1>
      <p className="mt-2 text-[#C8B8DB]/80 relative z-10">Your journey continues with new challenges and rewards.</p>
      
      {/* Account Stats */}
      <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mt-6 relative z-10">
        <div className="bg-[#2D1B4E]/50 p-3 rounded-lg border border-[#432874]/30">
          <div className="text-xs text-[#C8B8DB]/70">Characters</div>
          <div className="text-xl font-semibold">{charactersCount}/20</div>
        </div>
        <div className="bg-[#2D1B4E]/50 p-3 rounded-lg border border-[#432874]/30">
          <div className="text-xs text-[#C8B8DB]/70">Auras</div>
          <div className="text-xl font-semibold">{aurasCount}</div>
        </div>
        <div className="bg-[#2D1B4E]/50 p-3 rounded-lg border border-[#432874]/30">
          <div className="text-xs text-[#C8B8DB]/70">Dungeons</div>
          <div className="text-xl font-semibold">{activeDungeons} Active</div>
        </div>
        <div className="bg-[#2D1B4E]/50 p-3 rounded-lg border border-[#432874]/30">
          <div className="text-xs text-[#C8B8DB]/70">Farming</div>
          <div className="text-xl font-semibold">{farmingSlotsCount} Slots</div>
        </div>
      </div>
    </motion.div>
  );
};

export default WelcomeSection;


=== client/src/components/dashboard/RecentActivity.tsx ===
import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { useQuery } from '@tanstack/react-query';
import type { ActivityLog } from '@shared/schema';

const RecentActivity = () => {
  // Fetch recent activity logs
  const { data: activityLogs, isLoading } = useQuery<ActivityLog[]>({ 
    queryKey: ['/api/activity?limit=5'],
    refetchInterval: 30000 // Refresh every 30 seconds
  });

  const formatTimeAgo = (date: Date | string) => {
    const now = new Date();
    const activityDate = new Date(date);
    const diffInMilliseconds = now.getTime() - activityDate.getTime();
    
    // Convert to seconds
    const diffInSeconds = Math.floor(diffInMilliseconds / 1000);
    
    if (diffInSeconds < 60) {
      return 'just now';
    }
    
    // Convert to minutes
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    
    if (diffInMinutes < 60) {
      return `${diffInMinutes} minute${diffInMinutes !== 1 ? 's' : ''} ago`;
    }
    
    // Convert to hours
    const diffInHours = Math.floor(diffInMinutes / 60);
    
    if (diffInHours < 24) {
      return `${diffInHours} hour${diffInHours !== 1 ? 's' : ''} ago`;
    }
    
    // Convert to days
    const diffInDays = Math.floor(diffInHours / 24);
    
    return `${diffInDays} day${diffInDays !== 1 ? 's' : ''} ago`;
  };

  const getActivityColor = (activityType: string) => {
    const typeColors: Record<string, string> = {
      dungeon_completed: '[#FF9D00]',
      dungeon_started: '[#DC143C]',
      aura_crafted: '[#FF9D00]',
      aura_fusion_completed: '[#FF9D00]',
      farming_completed: '[#228B22]',
      farming_started: '[#228B22]',
      item_purchased: '[#C8B8DB]',
      character_created: '[#00B9AE]',
      aura_created: '[#00B9AE]',
    };

    return typeColors[activityType] || '[#C8B8DB]/50';
  };

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, x: -10 },
    show: { opacity: 1, x: 0 }
  };

  if (isLoading) {
    return (
      <motion.div 
        className="bg-[#1A1A2E] rounded-xl p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <h2 className="text-xl font-cinzel font-bold mb-4">Recent Activity</h2>
        <div className="space-y-3 animate-pulse">
          {[1, 2, 3, 4].map((i) => (
            <div key={i} className="border-l-2 border-[#432874]/30 pl-3 py-1">
              <div className="h-4 bg-[#432874]/20 rounded w-3/4 mb-1"></div>
              <div className="h-3 bg-[#432874]/10 rounded w-1/4"></div>
            </div>
          ))}
        </div>
      </motion.div>
    );
  }

  return (
    <motion.div 
      className="bg-[#1A1A2E] rounded-xl p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.3 }}
    >
      <h2 className="text-xl font-cinzel font-bold mb-4">Recent Activity</h2>
      
      <motion.div 
        className="space-y-3"
        variants={container}
        initial="hidden"
        animate="show"
      >
        {activityLogs && activityLogs.length > 0 ? (
          activityLogs.map((log) => (
            <motion.div 
              key={log.id} 
              className={`border-l-2 border-${getActivityColor(log.activityType)} pl-3 py-1`}
              variants={item}
            >
              <div className="text-sm font-medium">{log.description}</div>
              <div className="text-xs text-[#C8B8DB]/70">{formatTimeAgo(log.timestamp)}</div>
            </motion.div>
          ))
        ) : (
          <div className="text-center text-[#C8B8DB]/50 py-4">
            No recent activity to display
          </div>
        )}
      </motion.div>
      
      <motion.button 
        className="w-full mt-4 bg-[#432874]/40 hover:bg-[#432874]/60 transition-colors py-2 rounded-lg text-sm"
        variants={item}
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        View Activity Log
      </motion.button>
    </motion.div>
  );
};

export default RecentActivity;


=== client/src/components/dashboard/ResourcesOverview.tsx ===
import { useDiscordAuth } from '@/lib/discordAuth';
import { useGameStore } from '@/lib/zustandStore';
import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { Link } from 'wouter';

const ResourcesOverview = () => {
  const { user } = useDiscordAuth();
  const { resources, fetchResources } = useGameStore();

  // Ensure we have the latest resources data
  useEffect(() => {
    fetchResources();
  }, [fetchResources]);

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 10 },
    show: { opacity: 1, y: 0 }
  };

  return (
    <motion.div 
      className="bg-[#1A1A2E] rounded-xl p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
    >
      <h2 className="text-xl font-cinzel font-bold mb-4">Resources</h2>
      
      <motion.div 
        className="space-y-3"
        variants={container}
        initial="hidden"
        animate="show"
      >
        <motion.div 
          className="flex justify-between items-center"
          variants={item}
        >
          <div className="flex items-center">
            <img 
              src="https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop" 
              alt="Forge Tokens" 
              className="w-8 h-8 rounded-full mr-2"
            />
            <div>
              <div className="text-sm font-semibold">Forge Tokens</div>
              <div className="text-xs text-[#C8B8DB]/70">Premium Currency</div>
            </div>
          </div>
          <div className="text-[#FFD700] font-bold">{user?.forgeTokens || 0}</div>
        </motion.div>
        
        <motion.div 
          className="flex justify-between items-center"
          variants={item}
        >
          <div className="flex items-center">
            <img 
              src="https://images.unsplash.com/photo-1543486958-d783bfbf7f8e?w=150&h=150&fit=crop" 
              alt="Rogue Credits" 
              className="w-8 h-8 rounded-full mr-2"
            />
            <div>
              <div className="text-sm font-semibold">Rogue Credits</div>
              <div className="text-xs text-[#C8B8DB]/70">Standard Currency</div>
            </div>
          </div>
          <div className="text-[#C8B8DB] font-bold">{user?.rogueCredits || 0}</div>
        </motion.div>
        
        <motion.div 
          className="flex justify-between items-center"
          variants={item}
        >
          <div className="flex items-center">
            <img 
              src="https://images.unsplash.com/photo-1618325500063-14cd8117369c?w=150&h=150&fit=crop" 
              alt="Soul Shards" 
              className="w-8 h-8 rounded-full mr-2"
            />
            <div>
              <div className="text-sm font-semibold">Soul Shards</div>
              <div className="text-xs text-[#C8B8DB]/70">Character Upgrades</div>
            </div>
          </div>
          <div className="text-[#00B9AE] font-bold">{user?.soulShards || 0}</div>
        </motion.div>
        
        {resources.slice(0, 2).map((resource) => (
          <motion.div 
            key={resource.id}
            className="flex justify-between items-center"
            variants={item}
          >
            <div className="flex items-center">
              <img 
                src={resource.iconUrl || "https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop"} 
                alt={resource.name} 
                className="w-8 h-8 rounded-full mr-2"
              />
              <div>
                <div className="text-sm font-semibold">{resource.name}</div>
                <div className="text-xs text-[#C8B8DB]/70">{resource.type.charAt(0).toUpperCase() + resource.type.slice(1)}</div>
              </div>
            </div>
            <div className="text-[#C8B8DB] font-bold">{resource.quantity}</div>
          </motion.div>
        ))}
      </motion.div>
      
      <div className="flex flex-col space-y-2 mt-4">
        <Link href="/characters">
          <motion.button 
            className="w-full bg-[#432874]/40 hover:bg-[#432874]/60 transition-colors py-2 rounded-lg text-sm"
            variants={item}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            View All Resources
          </motion.button>
        </Link>
        
        {/* Admin Button to Add 15,000 Essence */}
        <motion.button 
          className="w-full bg-[#00B9AE]/30 hover:bg-[#00B9AE]/50 transition-colors py-2 rounded-lg text-sm text-[#00B9AE]"
          variants={item}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={async () => {
            try {
              const response = await fetch('/api/admin/add-essence', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
              });
              
              if (response.ok) {
                // Refresh resources after adding Essence
                fetchResources();
                alert('Added 15,000 Essence!');
              } else {
                console.error('Failed to add Essence:', await response.text());
              }
            } catch (error) {
              console.error('Error adding Essence:', error);
            }
          }}
        >
          Add 15,000 Essence (Admin)
        </motion.button>
        
        {/* Admin Button to Add Currency */}
        <motion.button 
          className="w-full bg-[#FFD700]/30 hover:bg-[#FFD700]/50 transition-colors py-2 rounded-lg text-sm text-[#FFD700]"
          variants={item}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={async () => {
            try {
              const response = await fetch('/api/admin/add-currency', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
              });
              
              if (response.ok) {
                // Refresh the user data to update the currencies
                window.location.reload(); // Force a full reload to update currency display in header
                alert('Added 5,000 Rogue Credits and 5,000 Forge Tokens!');
              } else {
                console.error('Failed to add Currency:', await response.text());
              }
            } catch (error) {
              console.error('Error adding Currency:', error);
            }
          }}
        >
          Add 5,000 Credits & Tokens (Admin)
        </motion.button>
      </div>
    </motion.div>
  );
};

export default ResourcesOverview;


=== client/src/components/dashboard/DashboardView.tsx ===
import WelcomeSection from './WelcomeSection';
import ActiveTasks from './ActiveTasks';
import ResourcesOverview from './ResourcesOverview';
import DiscordChat from './DiscordChat';
import OfferBanner from '../ui/OfferBanner';
import { useDiscordAuth } from '@/lib/discordAuth';
import { useGameStore } from '@/lib/zustandStore';
import { useEffect } from 'react';

const DashboardView = () => {
  const { user } = useDiscordAuth();
  const { 
    fetchFarmingTasks, 
    fetchDungeonRuns, 
    fetchForgingTasks,
    characters,
    farmingTasks,
    dungeonRuns,
    forgingTasks
  } = useGameStore();
  
  // Refresh active tasks periodically
  useEffect(() => {
    const fetchActiveTasks = () => {
      fetchFarmingTasks();
      fetchDungeonRuns();
      fetchForgingTasks();
    };
    
    // Fetch initial data
    fetchActiveTasks();
    
    // Set up periodic refresh (every 10 seconds)
    const intervalId = setInterval(fetchActiveTasks, 10000);
    
    return () => clearInterval(intervalId);
  }, [fetchFarmingTasks, fetchDungeonRuns, fetchForgingTasks]);
  
  return (
    <>
      <OfferBanner />
      
      <div className="grid grid-cols-1 md:grid-cols-12 gap-6">
        {/* Left Column - Account Overview */}
        <div className="md:col-span-8 space-y-6">
          <WelcomeSection 
            username={user?.username || 'Adventurer'} 
            charactersCount={characters.length}
            aurasCount={0} // Need to implement
            activeDungeons={dungeonRuns.filter(run => !run.completed).length}
            farmingSlotsCount={farmingTasks.filter(task => !task.completed).length}
          />
          
          <ActiveTasks 
            farmingTasks={farmingTasks}
            dungeonRuns={dungeonRuns}
            forgingTasks={forgingTasks}
          />
        </div>
        
        {/* Right Column - Resources */}
        <div className="md:col-span-4 space-y-6">
          <ResourcesOverview />
        </div>
        
        {/* Discord Chat - Can be expanded to full width */}
        <div className="md:col-span-12">
          <DiscordChat />
        </div>
      </div>
    </>
  );
};

export default DashboardView;


=== client/src/components/dashboard/DiscordChat.tsx ===
import { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import { useGameStore } from '@/lib/zustandStore';
import { Send, Maximize2, Minimize2 } from 'lucide-react';
import { useDiscordAuth } from '@/lib/discordAuth';

const DiscordChat = () => {
  const { discordMessages, addDiscordMessage } = useGameStore();
  const { user } = useDiscordAuth();
  const [message, setMessage] = useState('');
  const [expanded, setExpanded] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [discordMessages]);

  const handleSendMessage = () => {
    if (!message.trim() || !user) return;
    
    // Add message to local state
    addDiscordMessage(user.username, message);
    
    // Clear input
    setMessage('');
    
    // In a real implementation, this would send to Discord via WebSocket
  };

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.05
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 10 },
    show: { opacity: 1, y: 0 }
  };

  return (
    <motion.div 
      className={`bg-[#1A1A2E] rounded-xl p-6 ${expanded ? 'col-span-12' : ''}`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.4 }}
      layout
    >
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-cinzel font-bold">Discord</h2>
        <div className="flex items-center space-x-3">
          <div className="bg-[#FF9D00]/20 rounded-full px-2 py-0.5 text-xs text-[#FF9D00]">
            {Math.floor(Math.random() * 10) + 5} Online
          </div>
          <button 
            onClick={() => setExpanded(!expanded)} 
            className="p-1 rounded-full hover:bg-[#432874]/20 transition-colors"
            title={expanded ? "Minimize" : "Expand"}
          >
            {expanded ? 
              <Minimize2 className="h-4 w-4 text-[#C8B8DB]/70" /> : 
              <Maximize2 className="h-4 w-4 text-[#C8B8DB]/70" />
            }
          </button>
        </div>
      </div>
      
      <motion.div 
        className={`${expanded ? 'h-64' : 'h-16'} overflow-y-auto bg-[#1F1D36]/50 rounded-lg p-3 mb-3 text-xs transition-all duration-300`}
        variants={container}
        initial="hidden"
        animate="show"
        layout
      >
        {discordMessages.map((msg, index) => (
          <motion.div key={msg.id} className="mb-2" variants={item}>
            <span className={`font-semibold ${
              msg.username === 'GuildMaster' ? 'text-[#FF9D00]' : 
              msg.username === 'AuraCollector' ? 'text-[#00B9AE]' : 
              'text-[#C8B8DB]'
            }`}>
              {msg.username}:
            </span>
            <span className="text-[#C8B8DB]/90"> {msg.content}</span>
          </motion.div>
        ))}
        <div ref={messagesEndRef} />
      </motion.div>
      
      <div className="flex">
        <input 
          type="text"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
          placeholder="Type a message..."
          className="flex-1 bg-[#1F1D36]/80 border border-[#432874]/30 rounded-l-lg px-3 py-2 text-sm focus:outline-none focus:border-[#FF9D00]"
        />
        <button 
          onClick={handleSendMessage}
          className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 transition-colors px-4 rounded-r-lg flex items-center justify-center"
        >
          <Send className="h-4 w-4 text-[#1A1A2E]" />
        </button>
      </div>
    </motion.div>
  );
};

export default DiscordChat;


=== client/src/components/dashboard/ActiveTasks.tsx ===
import { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import CountdownTimer from '../common/CountdownTimer';
import { Link } from 'wouter';
import { Grid, Gem, Hammer, User } from 'lucide-react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { useGameStore } from '@/lib/zustandStore';
import { apiRequest } from '@/lib/queryClient';
import type { FarmingTask, DungeonRun, ForgingTask, Character, Aura } from '@shared/schema';

interface ActiveTasksProps {
  farmingTasks: FarmingTask[];
  dungeonRuns: DungeonRun[];
  forgingTasks: ForgingTask[];
}

const ActiveTasks = ({ farmingTasks, dungeonRuns, forgingTasks }: ActiveTasksProps) => {
  const { toast } = useToast();
  const { characters, fetchFarmingTasks, fetchDungeonRuns, fetchForgingTasks } = useGameStore();
  const [completingTask, setCompletingTask] = useState<number | null>(null);
  const [showResultDialog, setShowResultDialog] = useState(false);
  const [completedAura, setCompletedAura] = useState<Aura | null>(null);

  // Filter only active tasks
  const activeFarmingTasks = farmingTasks.filter(task => !task.completed);
  const activeDungeonRuns = dungeonRuns.filter(run => !run.completed);
  const activeForgingTasks = forgingTasks.filter(task => !task.completed);

  // Group characters by ID for easier lookup
  const charactersById = characters.reduce<Record<number, Character>>((acc, char) => {
    acc[char.id] = char;
    return acc;
  }, {});

  const handleCompleteFarmingTask = async (taskId: number) => {
    if (completingTask) return;
    setCompletingTask(taskId);

    try {
      const res = await apiRequest('POST', `/api/farming/complete/${taskId}`, undefined);
      const data = await res.json();

      toast({
        title: "Farming Complete",
        description: `Gained ${data.amount} ${data.resource}`,
      });

      // Refresh farming tasks
      fetchFarmingTasks();
    } catch (error) {
      console.error('Error completing farming task:', error);
      toast({
        title: "Error",
        description: "Failed to complete farming task",
        variant: "destructive",
      });
    } finally {
      setCompletingTask(null);
    }
  };

  const handleCompleteDungeonRun = async (runId: number) => {
    if (completingTask) return;
    setCompletingTask(runId);

    try {
      const res = await apiRequest('POST', `/api/dungeons/complete/${runId}`, undefined);
      const data = await res.json();

      toast({
        title: data.success ? "Dungeon Cleared!" : "Dungeon Failed",
        description: data.success 
          ? `You gained rewards from the dungeon` 
          : "Your party had to retreat from the dungeon",
        variant: data.success ? "default" : "destructive",
      });

      // Refresh dungeon runs
      fetchDungeonRuns();
    } catch (error) {
      console.error('Error completing dungeon run:', error);
      toast({
        title: "Error",
        description: "Failed to complete dungeon run",
        variant: "destructive",
      });
    } finally {
      setCompletingTask(null);
    }
  };

  const handleCompleteForging = async (taskId: number) => {
    if (completingTask) return;
    setCompletingTask(taskId);

    try {
      const res = await apiRequest('POST', `/api/forge/complete/${taskId}`, undefined);
      const data = await res.json();

      // Store the completed aura and show dialog
      setCompletedAura(data.aura);
      setShowResultDialog(true);

      // Refresh forging tasks
      fetchForgingTasks();
    } catch (error) {
      console.error('Error completing forging task:', error);
      toast({
        title: "Error",
        description: "Failed to complete forging task",
        variant: "destructive",
      });
    } finally {
      setCompletingTask(null);
    }
  };

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  if (activeFarmingTasks.length === 0 && activeDungeonRuns.length === 0 && activeForgingTasks.length === 0) {
    return (
      <motion.div 
        className="bg-[#1A1A2E] rounded-xl p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-cinzel font-bold">Active Tasks</h2>
        </div>

        <div className="bg-[#2D1B4E]/20 rounded-lg p-8 text-center">
          <p className="text-[#C8B8DB]/80 mb-4">You have no active tasks at the moment.</p>
          <div className="flex flex-wrap gap-2 justify-center">
            <Link href="/dungeons">
              <Button className="bg-[#432874] hover:bg-[#432874]/80">
                <Grid className="mr-2 h-4 w-4" />
                Start Dungeon
              </Button>
            </Link>
            <Link href="/farming">
              <Button className="bg-[#432874] hover:bg-[#432874]/80">
                <Gem className="mr-2 h-4 w-4" />
                Start Farming
              </Button>
            </Link>
            <Link href="/forge">
              <Button className="bg-[#432874] hover:bg-[#432874]/80">
                <Hammer className="mr-2 h-4 w-4" />
                Start Forging
              </Button>
            </Link>
          </div>
        </div>
      </motion.div>
    );
  }

  return (
    <>
      <motion.div 
        className="bg-[#1A1A2E] rounded-xl p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-cinzel font-bold">Active Tasks</h2>
          <Link href="/dungeons">
            <button className="text-[#FF9D00] text-sm hover:underline">View All</button>
          </Link>
        </div>

        <motion.div 
          className="space-y-4"
          variants={container}
          initial="hidden"
          animate="show"
        >
        {/* Dungeon Tasks */}
        {activeDungeonRuns.map((run) => (
          <motion.div 
            key={`dungeon-${run.id}`}
            className="bg-[#1F1D36]/50 p-4 rounded-lg border border-[#432874]/30"
            variants={item}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <Grid className="h-5 w-5 text-[#DC143C]" />
                <span className="ml-2 font-semibold">{run.dungeonName} (Level {run.dungeonLevel})</span>
              </div>
              <div className="flex items-center text-sm">
                <div className="bg-[#DC143C]/20 text-[#DC143C] px-2 py-0.5 rounded">In Progress</div>
                <CountdownTimer 
                  endTime={run.endTime} 
                  className="ml-2" 
                  onComplete={() => handleCompleteDungeonRun(run.id)}
                />
              </div>
            </div>
            <div className="mt-3 grid grid-cols-4 gap-2">
              {run.characterIds.map((charId) => (
                <img 
                  key={charId}
                  src={charactersById[charId]?.avatarUrl || "https://via.placeholder.com/150"} 
                  alt={charactersById[charId]?.name || "Character"} 
                  className="w-10 h-10 rounded-full border border-[#DC143C]/50"
                />
              ))}
            </div>
            {new Date(run.endTime) <= new Date() && (
              <Button 
                className="w-full mt-2 bg-[#DC143C] hover:bg-[#DC143C]/80 text-white"
                onClick={() => handleCompleteDungeonRun(run.id)}
                disabled={completingTask === run.id}
              >
                {completingTask === run.id ? "Completing..." : "Complete Dungeon"}
              </Button>
            )}
          </motion.div>
        ))}

        {/* Farming Tasks */}
        {activeFarmingTasks.map((task) => {
          // Get the character name if there's a character assigned
          const character = task.characterId ? charactersById[task.characterId] : null;
          const characterName = character ? character.name : 'Unknown';

          return (
            <motion.div 
              key={`farming-${task.id}`}
              className="bg-[#1F1D36]/50 p-4 rounded-lg border border-[#432874]/30"
              variants={item}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <Gem className="h-5 w-5 text-[#228B22]" />
                  <span className="ml-2 font-semibold">{task.resourceName} Farming</span>
                </div>
                <div className="flex items-center text-sm">
                  <div className="bg-[#228B22]/20 text-[#228B22] px-2 py-0.5 rounded">Active</div>
                  <CountdownTimer 
                    endTime={task.endTime} 
                    className="ml-2" 
                    onComplete={() => handleCompleteFarmingTask(task.id)}
                  />
                </div>
              </div>

              {/* Display assigned character */}
              <div className="mt-2 text-sm text-[#C8B8DB]/70 flex items-center">
                <User className="h-3 w-3 mr-1" />
                <span>Assigned: {characterName}</span>
              </div>

              <div className="mt-2">
                <div className="flex items-center">
                  <img 
                    src={charactersById[task.characterId]?.avatarUrl || "https://via.placeholder.com/150"} 
                    alt={charactersById[task.characterId]?.name || "Farming Character"} 
                    className="w-10 h-10 rounded-full border border-[#228B22]/50"
                  />
                  <div className="ml-2">
                    <div className="text-sm font-semibold">
                      {charactersById[task.characterId]?.name || "Character"}, Lvl {charactersById[task.characterId]?.level || "?"}
                    </div>
                    <div className="text-xs text-[#C8B8DB]/70">+15% Farming Efficiency</div>
                  </div>
                </div>
              </div>

              {new Date(task.endTime) <= new Date() && (
                <Button 
                  className="w-full mt-2 bg-[#228B22] hover:bg-[#228B22]/80 text-white"
                  onClick={() => handleCompleteFarmingTask(task.id)}
                  disabled={completingTask === task.id}
                >
                  {completingTask === task.id ? "Collecting..." : "Collect Resources"}
                </Button>
              )}
            </motion.div>
          );
        })}

        {/* Forge Tasks */}
        {activeForgingTasks.map((task) => {
          const startTime = task.startTime ? new Date(task.startTime) : new Date();
          const endTime = task.endTime ? new Date(task.endTime) : new Date();

          const taskProgress = Math.min(
            100,
            Math.max(
              0,
              ((new Date().getTime() - startTime.getTime()) /
                (endTime.getTime() - startTime.getTime())) *
                100
            )
          );

          // Get the character name if there's a character assigned
          const character = task.characterId ? charactersById[task.characterId] : null;
          const characterName = character ? character.name : 'Unknown';

          return (
            <motion.div 
              key={`forge-${task.id}`}
              className="bg-[#1F1D36]/50 p-4 rounded-lg border border-[#432874]/30"
              variants={item}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <Hammer className="h-5 w-5 text-[#FF9D00]" />
                  <span className="ml-2 font-semibold">
                    {task.taskType === 'craft' 
                      ? `Crafting ${task.targetElement} Aura` 
                      : 'Aura Fusion'}
                  </span>
                </div>
                <div className="flex items-center text-sm">
                  <div className="bg-[#FF9D00]/20 text-[#FF9D00] px-2 py-0.5 rounded">Crafting</div>
                  <CountdownTimer 
                    endTime={task.endTime} 
                    className="ml-2" 
                    onComplete={() => handleCompleteForging(task.id)}
                  />
                </div>
              </div>

              {/* Display assigned character */}
              <div className="mt-2 text-sm text-[#C8B8DB]/70 flex items-center">
                <User className="h-3 w-3 mr-1" />
                <span>Assigned: {characterName}</span>
              </div>

              <div className="mt-2">
                <Progress value={taskProgress} className="h-2 bg-[#1F1D36] border-[#432874]/20" />
              </div>
              {new Date(task.endTime) <= new Date() && (
                <Button 
                  className="w-full mt-2 bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                  onClick={() => handleCompleteForging(task.id)}
                  disabled={completingTask === task.id}
                >
                  {completingTask === task.id ? "Completing..." : "Complete Forging"}
                </Button>
              )}
            </motion.div>
          );
        })}
      </motion.div>
      
      {/* Forge Result Dialog */}
      <Dialog open={showResultDialog} onOpenChange={setShowResultDialog}>
        <DialogContent className="bg-[#1A1A2E] border-[#432874] max-w-2xl">
          <DialogHeader>
            <DialogTitle className="text-2xl font-cinzel text-[#FF9D00]">
              Forging Complete!
            </DialogTitle>
          </DialogHeader>

          {completedAura && (
            <div className="space-y-4">
              <div className="flex items-center gap-4">
                <div className={`w-16 h-16 rounded-full flex items-center justify-center ${
                  completedAura.element === 'fire' ? 'bg-red-500/30 text-red-300' 
                  : completedAura.element === 'water' ? 'bg-blue-500/30 text-blue-300'
                  : completedAura.element === 'earth' ? 'bg-green-500/30 text-green-300' 
                  : completedAura.element === 'wind' ? 'bg-cyan-500/30 text-cyan-300'
                  : completedAura.element === 'light' ? 'bg-yellow-500/30 text-yellow-300'
                  : 'bg-purple-500/30 text-purple-300'
                }`}>
                  <span className="text-2xl">{completedAura.element?.charAt(0).toUpperCase()}</span>
                </div>
                <div>
                  <h3 className="text-xl font-semibold capitalize">
                    {completedAura.name || `${completedAura.element} Aura`}
                  </h3>
                  <div className="flex gap-2">
                    <Badge className="bg-purple-700/30 text-purple-300 border-purple-600/30">
                      Level {completedAura.level}
                    </Badge>
                    <Badge className="bg-[#432874]/30 text-[#C8B8DB]">
                      {completedAura.tier ? `Tier ${completedAura.tier}` : 'Basic Tier'}
                    </Badge>
                  </div>
                </div>
              </div>

              <div className="bg-[#432874]/20 rounded-lg p-4">
                <h4 className="font-semibold mb-2">Stat Multipliers</h4>
                <div className="grid grid-cols-2 gap-x-4 gap-y-2 text-[#C8B8DB]">
                  {completedAura.attack && (
                    <div>Attack: <span className="text-[#FF9D00]">+{completedAura.attack}%</span></div>
                  )}
                  {completedAura.defense && (
                    <div>Defense: <span className="text-[#FF9D00]">+{completedAura.defense}%</span></div>
                  )}
                  {completedAura.vitality && (
                    <div>Vitality: <span className="text-[#FF9D00]">+{completedAura.vitality}%</span></div>
                  )}
                  {completedAura.speed && (
                    <div>Speed: <span className="text-[#FF9D00]">+{completedAura.speed}%</span></div>
                  )}
                  {completedAura.accuracy && (
                    <div>Accuracy: <span className="text-[#FF9D00]">+{completedAura.accuracy}%</span></div>
                  )}
                  {completedAura.focus && (
                    <div>Focus: <span className="text-[#FF9D00]">+{completedAura.focus}%</span></div>
                  )}
                  {completedAura.resilience && (
                    <div>Resilience: <span className="text-[#FF9D00]">+{completedAura.resilience}%</span></div>
                  )}
                </div>
              </div>

              {completedAura.description && (
                <div className="bg-[#432874]/20 rounded-lg p-4">
                  <h4 className="font-semibold mb-2">Description</h4>
                  <p className="text-[#C8B8DB]">{completedAura.description}</p>
                </div>
              )}

              {completedAura.skills && (
                <div className="bg-[#432874]/20 rounded-lg p-4">
                  <h4 className="font-semibold mb-2">Skills</h4>
                  <div className="space-y-2">
                    {(typeof completedAura.skills === 'string' 
                      ? JSON.parse(completedAura.skills) 
                      : completedAura.skills
                    ).map((skill: any, index: number) => (
                      <div key={index} className="border border-[#432874]/40 rounded p-2">
                        <div className="font-medium text-[#FF9D00]">{skill.name}</div>
                        <div className="text-sm text-[#C8B8DB]/80">{skill.description}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          <DialogFooter>
            <Button 
              onClick={() => setShowResultDialog(false)}
              className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      </motion.div>
    </>
  );
};

export default ActiveTasks;

=== client/src/components/characters/CharactersView.tsx ===
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import CharacterCard from './CharacterCard';
import type { Character } from '@shared/schema';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Plus, Filter, Search } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';

const CharactersView = () => {
  const { data: characters = [], isLoading } = useQuery<Character[]>({ 
    queryKey: ['/api/characters']
  });
  const [filter, setFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showDialog, setShowDialog] = useState(false);
  const { toast } = useToast();

  const filteredCharacters = characters.filter(character => {
    // Apply search filter
    const matchesSearch = character.name.toLowerCase().includes(searchTerm.toLowerCase());
    
    // Apply category filter
    const matchesFilter = 
      filter === 'all' ||
      (filter === 'active' && character.isActive) ||
      (filter === 'idle' && !character.isActive) ||
      (filter === filter && character.class.toLowerCase() === filter);
    
    return matchesSearch && matchesFilter;
  });

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  const handleRecruitCharacter = async () => {
    try {
      // Generate a random character for demonstration
      const randomNames = ["Eldrin", "Lyra", "Thorne", "Seraphina", "Gideon", "Isolde"];
      const randomClasses = ["Warrior", "Mage", "Rogue", "Cleric"];
      const randomAvatars = [
        "https://images.unsplash.com/photo-1577095972620-2f389ca3abcd?w=150&h=150&fit=crop",
        "https://images.unsplash.com/photo-1613477564751-fc2a7c5bbb7a?w=150&h=150&fit=crop",
        "https://images.unsplash.com/photo-1578336134673-1eef9c8c5e36?w=150&h=150&fit=crop"
      ];
      
      const newCharacter = {
        name: randomNames[Math.floor(Math.random() * randomNames.length)],
        class: randomClasses[Math.floor(Math.random() * randomClasses.length)],
        level: 1,
        avatarUrl: randomAvatars[Math.floor(Math.random() * randomAvatars.length)],
        attack: 10 + Math.floor(Math.random() * 5),
        defense: 10 + Math.floor(Math.random() * 5),
        vitality: 100 + Math.floor(Math.random() * 20),
        speed: 10 + Math.floor(Math.random() * 5),
        focus: 10 + Math.floor(Math.random() * 5),
        resilience: 10 + Math.floor(Math.random() * 5),
        accuracy: 10 + Math.floor(Math.random() * 5)
      };
      
      const response = await apiRequest('POST', '/api/characters', newCharacter);
      const data = await response.json();
      
      toast({
        title: "Character Recruited!",
        description: `${data.name} has joined your roster.`
      });
      
      setShowDialog(false);
    } catch (error) {
      console.error('Error recruiting character:', error);
      toast({
        title: "Recruitment Failed",
        description: "Unable to recruit a new character at this time.",
        variant: "destructive"
      });
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-[#FF9D00] text-xl">Loading characters...</div>
      </div>
    );
  }

  return (
    <>
      <div className="mb-6">
        <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] mb-2">Characters</h1>
        <p className="text-[#C8B8DB]/80">
          Manage your heroes, equip Auras, and assign them to tasks.
        </p>
      </div>
      
      <div className="flex flex-wrap gap-4 mb-6">
        <div className="relative flex-grow max-w-md">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-[#C8B8DB]/50 h-4 w-4" />
          <input
            type="text"
            placeholder="Search characters..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10 w-full bg-[#1F1D36]/80 border border-[#432874]/30 rounded-lg px-3 py-2 text-sm focus:outline-none focus:border-[#FF9D00]"
          />
        </div>
        
        <div className="flex items-center gap-2">
          <Filter className="text-[#C8B8DB]/70 h-4 w-4" />
          <Select value={filter} onValueChange={setFilter}>
            <SelectTrigger className="bg-[#1F1D36]/80 border-[#432874]/30 focus:border-[#FF9D00] focus:ring-0 w-32">
              <SelectValue placeholder="Filter" />
            </SelectTrigger>
            <SelectContent className="bg-[#1A1A2E] border-[#432874]/30">
              <SelectItem value="all">All</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="idle">Idle</SelectItem>
              <SelectItem value="warrior">Warrior</SelectItem>
              <SelectItem value="mage">Mage</SelectItem>
              <SelectItem value="rogue">Rogue</SelectItem>
              <SelectItem value="cleric">Cleric</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        <Dialog open={showDialog} onOpenChange={setShowDialog}>
          <DialogTrigger asChild>
            <Button className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]">
              <Plus className="h-4 w-4 mr-2" /> Recruit
            </Button>
          </DialogTrigger>
          <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB]">
            <DialogHeader>
              <DialogTitle className="text-[#FF9D00] font-cinzel text-xl">Recruit a New Character</DialogTitle>
            </DialogHeader>
            
            <div className="py-4">
              <div className="bg-[#432874]/20 rounded-lg p-4 text-center mb-4">
                <img
                  src="https://images.unsplash.com/photo-1578336134673-1eef9c8c5e36?w=250&h=250&fit=crop"
                  alt="New Character"
                  className="w-20 h-20 rounded-full border-2 border-[#FF9D00] mx-auto mb-2"
                />
                <p className="text-[#C8B8DB]">
                  Recruiting a new character costs <span className="text-[#FFD700] font-bold">500</span> Rogue Credits.
                </p>
              </div>
              
              <Button 
                className="w-full bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                onClick={handleRecruitCharacter}
              >
                Recruit Random Character
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>
      
      {filteredCharacters.length === 0 ? (
        <div className="bg-[#1A1A2E] rounded-xl p-8 text-center">
          <p className="text-[#C8B8DB]/80 mb-4">
            {searchTerm 
              ? `No characters found matching "${searchTerm}"` 
              : "You don't have any characters yet."}
          </p>
          <Button 
            className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
            onClick={() => setShowDialog(true)}
          >
            <Plus className="h-4 w-4 mr-2" /> Recruit Your First Character
          </Button>
        </div>
      ) : (
        <motion.div 
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"
          variants={container}
          initial="hidden"
          animate="show"
        >
          {filteredCharacters.map((character) => (
            <CharacterCard key={character.id} character={character} />
          ))}
        </motion.div>
      )}
    </>
  );
};

export default CharactersView;


=== client/src/components/characters/CharacterCard.tsx ===
import { motion } from 'framer-motion';
import { useState } from 'react';
import type { Character, Aura } from '@shared/schema';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { 
  Lock,
  Shield, 
  Swords, 
  Heart, 
  Zap, 
  Brain, 
  Flower2, 
  Clock, 
  Info,
  Flame,
  Droplet,
  Leaf,
  Wind,
  Check,
  Target,
  CircleOff
} from 'lucide-react';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger,
  DialogDescription,
  DialogFooter
} from '@/components/ui/dialog';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from "@/components/ui/select";
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import CountdownTimer from '../common/CountdownTimer';

interface CharacterCardProps {
  character: Character;
}

const CharacterCard = ({ character }: CharacterCardProps) => {
  const [showDetails, setShowDetails] = useState(false);
  const [equipAuraDialogOpen, setEquipAuraDialogOpen] = useState(false);
  const [selectedAuraId, setSelectedAuraId] = useState<number | null>(null);
  const [isEquipping, setIsEquipping] = useState(false);

  const queryClient = useQueryClient();
  const { toast } = useToast();

  // Fetch aura details if character has an equipped aura
  const { data: aura } = useQuery<Aura>({ 
    queryKey: character.equippedAuraId ? ['/api/auras', character.equippedAuraId] : [],
    enabled: !!character.equippedAuraId
  });

  // Fetch all available auras for equipping
  const { data: availableAuras = [] } = useQuery<Aura[]>({
    queryKey: ['/api/auras'],
    enabled: equipAuraDialogOpen
  });

  // Get auras that are not equipped by any character, sorted by level (highest first)
  const unequippedAuras = availableAuras
    .filter(a => !a.equippedByCharacterId && !a.isFusing)
    .sort((a, b) => (b.level || 0) - (a.level || 0));

  // Function to equip an aura to the character
  const equipAura = async () => {
    if (!selectedAuraId) return;

    setIsEquipping(true);
    try {
      await apiRequest('POST', `/api/characters/${character.id}/equip-aura/${selectedAuraId}`);

      // Invalidate character and aura queries to refresh data
      queryClient.invalidateQueries({ queryKey: ['/api/characters'] });
      queryClient.invalidateQueries({ queryKey: ['/api/auras'] });

      toast({
        title: "Aura equipped",
        description: "The aura has been successfully equipped to your character.",
      });

      setEquipAuraDialogOpen(false);
    } catch (error) {
      console.error('Failed to equip aura:', error);
      toast({
        title: "Failed to equip aura",
        description: "There was an error equipping the aura. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsEquipping(false);
    }
  };

  // Function to get element icon
  const getElementIcon = (element?: string) => {
    if (!element) return null;
    switch (element.toLowerCase()) {
      case 'fire': return <Flame className="h-4 w-4 text-red-500" />;
      case 'water': return <Droplet className="h-4 w-4 text-blue-500" />;
      case 'earth': return <Leaf className="h-4 w-4 text-green-500" />;
      case 'wind': return <Wind className="h-4 w-4 text-cyan-400" />;
      default: return <Flame className="h-4 w-4 text-red-500" />;
    }
  };

  const getClassColor = (characterClass: string) => {
    const classColors: Record<string, string> = {
      'warrior': 'bg-red-700/30 text-red-400',
      'mage': 'bg-blue-700/30 text-blue-400',
      'rogue': 'bg-green-700/30 text-green-400',
      'cleric': 'bg-yellow-700/30 text-yellow-400',
    };

    return classColors[characterClass.toLowerCase()] || 'bg-gray-700/30 text-gray-400';
  };

  // Removed rarity-related function as per new requirements

  const getActivityText = () => {
    if (!character.isActive) return null;

    return (
      <div className="absolute top-2 right-2 flex items-center space-x-1">
        <Badge variant="outline" className="bg-[#DC143C]/20 text-[#DC143C] border-[#DC143C]/30 flex items-center">
          <Lock className="h-3 w-3 mr-1" />
          {character.activityType === 'farming' ? 'Farming' : 'Dungeon'}
          {character.activityEndTime && (
            <>
              <span className="mx-1">•</span>
              <CountdownTimer endTime={character.activityEndTime} />
            </>
          )}
        </Badge>
      </div>
    );
  };

  const getAuraElementClass = (element?: string) => {
    if (!element) return 'bg-gradient-to-r from-gray-500 to-gray-700';
    switch (element.toLowerCase()) {
      case 'fire': return 'bg-gradient-to-r from-red-500 to-orange-500';
      case 'water': return 'bg-gradient-to-r from-blue-500 to-cyan-500';
      case 'earth': return 'bg-gradient-to-r from-green-500 to-lime-500';
      case 'wind': return 'bg-gradient-to-r from-sky-500 to-cyan-500';
      default: return 'bg-gradient-to-r from-purple-500 to-pink-500';
    }
  };

  return (
    <>
      {/* Equip Aura Dialog */}
      <Dialog open={equipAuraDialogOpen} onOpenChange={setEquipAuraDialogOpen}>
        <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB]">
          <DialogHeader>
            <DialogTitle className="text-[#FF9D00] font-cinzel">
              Equip Aura to {character.name}
            </DialogTitle>
            <DialogDescription className="text-[#C8B8DB]/80">
              Select an aura to equip to your character. Only unequipped auras are shown.
            </DialogDescription>
          </DialogHeader>

          <div className="my-4">
            {unequippedAuras.length === 0 ? (
              <div className="py-8 text-center text-[#C8B8DB]/60">
                No available auras to equip. Craft new auras in the Forge.
              </div>
            ) : (
              <Select onValueChange={(value) => setSelectedAuraId(Number(value))}>
                <SelectTrigger className="w-full bg-[#1A1A2E] border-[#432874]">
                  <SelectValue placeholder="Select an aura to equip" />
                </SelectTrigger>
                <SelectContent className="bg-[#1A1A2E] border-[#432874]">
                  {unequippedAuras.map((aura) => (
                    <SelectItem key={aura.id} value={aura.id.toString()}>
                      <div className="flex items-center">
                        {getElementIcon(aura.element)} 
                        <span className="ml-2">{aura.name} (Lv.{aura.level})</span>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            )}

            {selectedAuraId && (
              <div className="mt-4 p-3 bg-[#432874]/20 rounded-lg">
                <h4 className="font-semibold mb-2 text-sm">Selected Aura Details</h4>
                {(() => {
                  const selectedAura = unequippedAuras.find(a => a.id === selectedAuraId);
                  if (!selectedAura) return <div>No aura selected</div>;

                  // Parse skills if they exist
                  const skills = selectedAura.skills ? 
                    typeof selectedAura.skills === 'string' ? 
                      JSON.parse(selectedAura.skills as string) : 
                      selectedAura.skills : 
                    [];

                  return (
                    <div className="text-sm">
                      <div className="flex items-center mb-1">
                        {getElementIcon(selectedAura.element)} 
                        <span className="ml-2 text-[#00B9AE]">{selectedAura.name}</span>
                      </div>
                      <div className="grid grid-cols-2 gap-x-4 gap-y-1 mb-2">
                        <div>Element: {selectedAura.element}</div>
                        <div>Level: {selectedAura.level}</div>
                        <div>Tier: {selectedAura.tier}</div>
                      </div>

                      {skills && skills.length > 0 && (
                        <div className="mt-2">
                          <h5 className="font-semibold text-xs mb-1">Skills:</h5>
                          <ul className="list-disc pl-4 text-xs space-y-1">
                            {skills.map((skill: any, index: number) => (
                              <li key={index}>{skill.name} - {skill.description}</li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {(selectedAura.attack !== 0 || selectedAura.accuracy !== 0 || selectedAura.defense !== 0 || 
                        selectedAura.vitality !== 0 || selectedAura.speed !== 0 || selectedAura.focus !== 0 || 
                        selectedAura.resilience !== 0) && (
                        <div className="mt-2">
                          <h5 className="font-semibold text-xs mb-1">Stat Bonuses:</h5>
                          <div className="grid grid-cols-2 gap-x-2 gap-y-1 text-xs">
                            {selectedAura.attack !== 0 && (
                              <div className="flex justify-between">
                                <span>Attack:</span>
                                <span className={selectedAura.attack > 0 ? "text-green-400" : "text-red-400"}>
                                  {selectedAura.attack}%
                                </span>
                              </div>
                            )}
                            {selectedAura.accuracy !== 0 && (
                              <div className="flex justify-between">
                                <span>Accuracy:</span>
                                <span className={selectedAura.accuracy > 0 ? "text-green-400" : "text-red-400"}>
                                  {selectedAura.accuracy}%
                                </span>
                              </div>
                            )}
                            {selectedAura.defense !== 0 && (
                              <div className="flex justify-between">
                                <span>Defense:</span>
                                <span className={selectedAura.defense > 0 ? "text-green-400" : "text-red-400"}>
                                  {selectedAura.defense}%
                                </span>
                              </div>
                            )}
                            {selectedAura.vitality !== 0 && (
                              <div className="flex justify-between">
                                <span>Vitality:</span>
                                <span className={selectedAura.vitality > 0 ? "text-green-400" : "text-red-400"}>
                                  {selectedAura.vitality}%
                                </span>
                              </div>
                            )}
                            {selectedAura.speed !== 0 && (
                              <div className="flex justify-between">
                                <span>Speed:</span>
                                <span className={selectedAura.speed > 0 ? "text-green-400" : "text-red-400"}>
                                  {selectedAura.speed}%
                                </span>
                              </div>
                            )}
                            {selectedAura.focus !== 0 && (
                              <div className="flex justify-between">
                                <span>Focus:</span>
                                <span className={selectedAura.focus > 0 ? "text-green-400" : "text-red-400"}>
                                  {selectedAura.focus}%
                                </span>
                              </div>
                            )}
                            {selectedAura.resilience !== 0 && (
                              <div className="flex justify-between">
                                <span>Resilience:</span>
                                <span className={selectedAura.resilience > 0 ? "text-green-400" : "text-red-400"}>
                                  {selectedAura.resilience}%
                                </span>
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })()}
              </div>
            )}
          </div>

          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setEquipAuraDialogOpen(false)}
              className="bg-transparent border-[#432874]/50 hover:bg-[#432874]/20"
            >
              Cancel
            </Button>
            <Button 
              onClick={equipAura} 
              disabled={!selectedAuraId || isEquipping}
              className="bg-[#432874] hover:bg-[#432874]/80"
            >
              {isEquipping ? "Equipping..." : "Equip Aura"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <motion.div
        className="bg-[#1A1A2E] rounded-xl overflow-hidden border border-[#432874]/30 relative"
        whileHover={{ y: -5, boxShadow: '0 5px 20px rgba(67, 40, 116, 0.3)' }}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        {/* Activity Indicator */}
        {getActivityText()}

        <div className="p-4">
          <div className="flex items-center space-x-4">
            <div className="relative">
              <img
                src={character.avatarUrl}
                alt={character.name}
                className="w-16 h-16 rounded-full object-cover border-2 border-[#432874]"
              />
              <div className="absolute -bottom-1 -right-1 bg-[#1A1A2E] rounded-full p-0.5 border border-[#432874]">
                <div className="bg-[#432874] text-white text-xs w-5 h-5 rounded-full flex items-center justify-center font-bold">
                  {character.level}
                </div>
              </div>
            </div>

            <div>
              <h3 className="font-cinzel font-bold text-lg text-[#C8B8DB]">
                {character.name}
              </h3>
              <div className="flex items-center space-x-2 mt-1">
                <Badge className={`font-normal ${getClassColor(character.class)}`}>
                  {character.class}
                </Badge>
                <span className="text-xs text-[#C8B8DB]/80">
                  Level {character.level || 1}
                </span>
              </div>
            </div>
          </div>

          <div className="mt-4 grid grid-cols-4 gap-2 text-xs">
            <div className="flex items-center">
              <Swords className="h-3 w-3 mr-1 text-red-400" />
              <span>ATK: {character.attack}</span>
            </div>
            <div className="flex items-center">
              <Target className="h-3 w-3 mr-1 text-yellow-400" />
              <span>ACC: {character.accuracy}</span>
            </div>
            <div className="flex items-center">
              <Shield className="h-3 w-3 mr-1 text-blue-400" />
              <span>DEF: {character.defense}</span>
            </div>
            <div className="flex items-center">
              <Heart className="h-3 w-3 mr-1 text-red-500" />
              <span>VIT: {character.vitality}</span>
            </div>
            <div className="flex items-center">
              <Zap className="h-3 w-3 mr-1 text-cyan-400" />
              <span>SPD: {character.speed}</span>
            </div>
            <div className="flex items-center">
              <Brain className="h-3 w-3 mr-1 text-purple-400" />
              <span>FOC: {character.focus || 0}</span>
            </div>
            <div className="flex items-center">
              <CircleOff className="h-3 w-3 mr-1 text-purple-400" />
              <span>RES: {character.resilience || 0}</span>
            </div>
            {character.passiveSkills && Array.isArray(character.passiveSkills) && character.passiveSkills.length > 0 && (
              <div className="flex items-center">
                <Check className="h-3 w-3 mr-1 text-green-400" />
                <span className="text-green-400">Passive{character.passiveSkills.length > 1 ? 's' : ''}</span>
              </div>
            )}
          </div>

          <div className="mt-4 pt-3 border-t border-[#432874]/30 flex justify-between items-center">
            {character.equippedAuraId ? (
              <div className="flex items-center text-xs">
                <div className={`w-4 h-4 rounded-full mr-1 ${
                  aura?.element === 'fire' ? 'bg-gradient-to-r from-red-500 to-orange-500' 
                  : aura?.element === 'water' ? 'bg-gradient-to-r from-blue-500 to-cyan-500'
                  : aura?.element === 'earth' ? 'bg-gradient-to-r from-green-500 to-lime-500' 
                  : aura?.element === 'wind' ? 'bg-gradient-to-r from-sky-500 to-cyan-500'
                  : 'bg-gradient-to-r from-purple-500 to-pink-500'
                }`}></div>
                <span className="text-[#00B9AE]">
                  {aura ? (
                    `${aura.name || `${aura.element?.charAt(0).toUpperCase()}${aura.element?.slice(1)} Aura`} (Lv.${aura.level || 1})`
                  ) : 'Loading...'}
                </span>
              </div>
            ) : (
              <div className="text-xs text-[#C8B8DB]/60">No Aura Equipped</div>
            )}

            <Dialog>
              <DialogTrigger asChild>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="h-7 bg-transparent border-[#432874]/50 hover:bg-[#432874]/20"
                  disabled={character.isActive ? true : false}
                >
                  <Info className="h-3 w-3 mr-1" /> Details
                </Button>
              </DialogTrigger>
              <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB]">
                <DialogHeader>
                  <DialogTitle className="text-[#FF9D00] font-cinzel text-xl flex items-center">
                    <img
                      src={character.avatarUrl}
                      alt={character.name}
                      className="w-8 h-8 rounded-full object-cover border border-[#FF9D00] mr-2"
                    />
                    {character.name}
                  </DialogTitle>
                </DialogHeader>

                <div className="py-4">
                  <div className="flex justify-between mb-4">
                    <Badge className={`${getClassColor(character.class)}`}>{character.class}</Badge>
                    <div className="text-sm text-[#C8B8DB]/80">
                      Level {character.level || 1}
                    </div>
                  </div>

                  <div className="mb-4">
                    <h4 className="font-semibold mb-3 text-[#C8B8DB] border-b border-[#432874]/30 pb-1">Character Stats</h4>
                    <div className="grid grid-cols-2 gap-4">
                      {/* Stat bar displays with tooltip */}
                      <div className="space-y-3">
                        <div>
                          <div className="flex justify-between text-xs mb-1">
                            <div className="flex items-center">
                              <Swords className="h-3 w-3 mr-1 text-red-400" />
                              <span>Attack</span>
                            </div>
                            <span>{character.attack}</span>
                          </div>
                          <div className="h-2 bg-[#432874]/20 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-gradient-to-r from-red-500 to-red-400" 
                              style={{ width: `${Math.min(100, ((character.attack || 0) / 100) * 100)}%` }}
                            ></div>
                          </div>
                          {character.passiveSkills && Array.isArray(character.passiveSkills) && 
                           character.passiveSkills.some(skill => 
                             typeof skill === 'object' && skill && 'name' in skill && 
                             String(skill.name).toLowerCase().includes('attack')
                           ) && (
                            <div className="text-xs text-green-500 mt-1">+Passive Bonus</div>
                          )}
                        </div>

                        <div>
                          <div className="flex justify-between text-xs mb-1">
                            <div className="flex items-center">
                              <Target className="h-3 w-3 mr-1 text-yellow-400" />
                              <span>Accuracy</span>
                            </div>
                            <span>{character.accuracy}</span>
                          </div>
                          <div className="h-2 bg-[#432874]/20 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-gradient-to-r from-yellow-500 to-yellow-400" 
                              style={{ width: `${Math.min(100, ((character.accuracy || 0) / 100) * 100)}%` }}
                            ></div>
                          </div>
                          {character.passiveSkills && Array.isArray(character.passiveSkills) && 
                           character.passiveSkills.some(skill => 
                             typeof skill === 'object' && skill && 'name' in skill && 
                             String(skill.name).toLowerCase().includes('accuracy')
                           ) && (
                            <div className="text-xs text-green-500 mt-1">+Passive Bonus</div>
                          )}
                        </div>

                        <div>
                          <div className="flex justify-between text-xs mb-1">
                            <div className="flex items-center">
                              <Shield className="h-3 w-3 mr-1 text-blue-400" />
                              <span>Defense</span>
                            </div>
                            <span>{character.defense}</span>
                          </div>
                          <div className="h-2 bg-[#432874]/20 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-gradient-to-r from-blue-500 to-blue-400" 
                              style={{ width: `${Math.min(100, ((character.defense || 0) / 100) * 100)}%` }}
                            ></div>
                          </div>
                          {character.passiveSkills && Array.isArray(character.passiveSkills) && 
                           character.passiveSkills.some(skill => 
                             typeof skill === 'object' && skill && 'name' in skill && 
                             String(skill.name).toLowerCase().includes('defense')
                           ) && (
                            <div className="text-xs text-green-500 mt-1">+Passive Bonus</div>
                          )}
                        </div>
                      </div>

                      <div className="space-y-3">
                        <div>
                          <div className="flex justify-between text-xs mb-1">
                            <div className="flex items-center">
                              <Heart className="h-3 w-3 mr-1 text-red-500" />
                              <span>Vitality</span>
                            </div>
                            <span>{character.vitality}</span>
                          </div>
                          <div className="h-2 bg-[#432874]/20 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-gradient-to-r from-red-500 to-red-300" 
                              style={{ width: `${Math.min(100, ((character.vitality || 0) / 100) * 100)}%` }}
                            ></div>
                          </div>
                          {character.passiveSkills && Array.isArray(character.passiveSkills) && 
                           character.passiveSkills.some(skill => 
                             typeof skill === 'object' && skill && 'name' in skill && 
                             String(skill.name).toLowerCase().includes('vitality')
                           ) && (
                            <div className="text-xs text-green-500 mt-1">+Passive Bonus</div>
                          )}
                        </div>

                        <div>
                          <div className="flex justify-between text-xs mb-1">
                            <div className="flex items-center">
                              <Zap className="h-3 w-3 mr-1 text-cyan-400" />
                              <span>Speed</span>
                            </div>
                            <span>{character.speed}</span>
                          </div>
                          <div className="h-2 bg-[#432874]/20 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-gradient-to-r from-cyan-500 to-cyan-400" 
                              style={{ width: `${Math.min(100, ((character.speed || 0) / 100) * 100)}%` }}
                            ></div>
                          </div>
                          {character.passiveSkills && Array.isArray(character.passiveSkills) && 
                           character.passiveSkills.some(skill => 
                             typeof skill === 'object' && skill && 'name' in skill && 
                             String(skill.name).toLowerCase().includes('speed')
                           ) && (
                            <div className="text-xs text-green-500 mt-1">+Passive Bonus</div>
                          )}
                        </div>

                        <div>
                          <div className="flex justify-between text-xs mb-1">
                            <div className="flex items-center">
                              <CircleOff className="h-3 w-3 mr-1 text-purple-400" />
                              <span>Resilience</span>
                            </div>
                            <span>{character.resilience || 0}</span>
                          </div>
                          <div className="h-2 bg-[#432874]/20 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-gradient-to-r from-purple-500 to-purple-400" 
                              style={{ width: `${Math.min(100, ((character.resilience || 0) / 100) * 100)}%` }}
                            ></div>
                          </div>
                          {character.passiveSkills && Array.isArray(character.passiveSkills) && 
                           character.passiveSkills.some(skill => 
                             typeof skill === 'object' && skill && 'name' in skill && 
                             String(skill.name).toLowerCase().includes('resilience')
                           ) && (
                            <div className="text-xs text-green-500 mt-1">+Passive Bonus</div>
                          )}
                        </div>

                        <div>
                          <div className="flex justify-between text-xs mb-1">
                            <div className="flex items-center">
                              <Brain className="h-3 w-3 mr-1 text-purple-400" />
                              <span>Focus</span>
                            </div>
                            <span>{character.focus || 0}</span>
                          </div>
                          <div className="h-2 bg-[#432874]/20 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-gradient-to-r from-purple-500 to-indigo-400" 
                              style={{ width: `${Math.min(100, ((character.focus || 0) / 100) * 100)}%` }}
                            ></div>
                          </div>
                          {character.passiveSkills && Array.isArray(character.passiveSkills) && 
                           character.passiveSkills.some(skill => 
                             typeof skill === 'object' && skill && 'name' in skill && 
                             String(skill.name).toLowerCase().includes('focus')
                           ) && (
                            <div className="text-xs text-green-500 mt-1">+Passive Bonus</div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Aura Bonuses */}
                    {aura && (
                      <div className="mt-4 pt-3 border-t border-[#432874]/30">
                        <div className="flex items-center mb-2">
                          <div className="w-4 h-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 mr-2"></div>
                          <span className="text-sm text-[#00B9AE]">Aura Bonuses</span>
                        </div>
                        <div className="text-xs text-[#C8B8DB]/80 space-y-1">
                          {/* Display direct stat values */}
                          <div className="grid grid-cols-2 gap-x-4 gap-y-1 mb-2">
                            {aura.attack !== null && aura.attack !== undefined && aura.attack !== 0 && (
                              <div className="flex items-center">
                                <Swords className="h-3 w-3 mr-1 text-red-400" />
                                <span>
                                  Attack: <span className={aura.attack > 0 ? "text-green-400" : "text-red-400"}>
                                    {aura.attack > 0 ? "+" : ""}{aura.attack}%
                                  </span>
                                </span>
                              </div>
                            )}
                            {aura.accuracy !== null && aura.accuracy !== undefined && aura.accuracy !== 0 && (
                              <div className="flex items-center">
                                <Target className="h-3 w-3 mr-1 text-yellow-400" />
                                <span>
                                  Accuracy: <span className={aura.accuracy > 0 ? "text-green-400" : "text-red-400"}>
                                    {aura.accuracy > 0 ? "+" : ""}{aura.accuracy}%
                                  </span>
                                </span>
                              </div>
                            )}
                            {aura.defense !== null && aura.defense !== undefined && aura.defense !== 0 && (
                              <div className="flex items-center">
                                <Shield className="h-3 w-3 mr-1 text-blue-400" />
                                <span>
                                  Defense: <span className={aura.defense > 0 ? "text-green-400" : "text-red-400"}>
                                    {aura.defense > 0 ? "+" : ""}{aura.defense}%
                                  </span>
                                </span>
                              </div>
                            )}
                            {aura.vitality !== null && aura.vitality !== undefined && aura.vitality !== 0 && (
                              <div className="flex items-center">
                                <Heart className="h-3 w-3 mr-1 text-red-500" />
                                <span>
                                  Vitality: <span className={aura.vitality > 0 ? "text-green-400" : "text-red-400"}>
                                    {aura.vitality > 0 ? "+" : ""}{aura.vitality}%
                                  </span>
                                </span>
                              </div>
                            )}
                            {aura.speed !== null && aura.speed !== undefined && aura.speed !== 0 && (
                              <div className="flex items-center">
                                <Zap className="h-3 w-3 mr-1 text-cyan-400" />
                                <span>
                                  Speed: <span className={aura.speed > 0 ? "text-green-400" : "text-red-400"}>
                                    {aura.speed > 0 ? "+" : ""}{aura.speed}%
                                  </span>
                                </span>
                              </div>
                            )}
                            {aura.focus !== null && aura.focus !== undefined && aura.focus !== 0 && (
                              <div className="flex items-center">
                                <Brain className="h-3 w-3 mr-1 text-purple-400" />
                                <span>
                                  Focus: <span className={aura.focus > 0 ? "text-green-400" : "text-red-400"}>
                                    {aura.focus > 0 ? "+" : ""}{aura.focus}%
                                  </span>
                                </span>
                              </div>
                            )}
                            {aura.resilience !== null && aura.resilience !== undefined && aura.resilience !== 0 && (
                              <div className="flex items-center">
                                <CircleOff className="h-3 w-3 mr-1 text-purple-400" />
                                <span>
                                  Resilience: <span className={aura.resilience > 0 ? "text-green-400" : "text-red-400"}>
                                    {aura.resilience > 0 ? "+" : ""}{aura.resilience}%
                                  </span>
                                </span>
                              </div>
                            )}
                          </div>

                          {/* Note: Stat bonuses are now displayed directly in the attributes above */}
                        </div>
                      </div>
                    )}
                  </div>

                  {character.passiveSkills && Array.isArray(character.passiveSkills) && character.passiveSkills.length > 0 && (
                    <div className="bg-[#432874]/20 rounded-lg p-3 mb-4">
                      <h4 className="font-semibold mb-2 text-[#C8B8DB]">Passive Skills</h4>
                      <div className="space-y-2">
                        {character.passiveSkills.map((skill, index) => (
                          <div key={index} className="border-b border-[#432874]/30 pb-2 last:border-b-0 last:pb-0">
                            {typeof skill === 'object' && skill && 'name' in skill && 'description' in skill ? (
                              <>
                                <p className="text-sm font-medium text-[#00B9AE]">{String(skill.name)}</p>
                                <p className="text-xs text-[#C8B8DB]/80 mt-1">{String(skill.description)}</p>
                              </>
                            ) : (
                              <p className="text-sm">{typeof skill === 'string' ? skill : 'Unknown Skill'}</p>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <div className="bg-[#432874]/20 rounded-lg p-3">
                    <h4 className="font-semibold mb-2 text-[#C8B8DB]">Equipped Aura</h4>
                    {character.equippedAuraId ? (
                      <div className="flex items-center">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-2 ${getAuraElementClass(aura?.element)}`}>
                          {aura && getElementIcon(aura.element)}
                        </div>
                        <div>
                          <div className="text-sm text-[#00B9AE]">
                            {character.equippedAuraId 
                              ? (aura ? aura.name : 'Loading Aura...')
                              : 'No Aura'}
                          </div>
                          <div className="text-xs text-[#C8B8DB]/60">
                            {aura ? `Level ${aura.level || 1} • Tier ${aura.tier || 1}` : character.equippedAuraId ? 'Loading...' : ''}
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="text-sm text-[#C8B8DB]/60">No Aura Equipped</div>
                    )}
                  </div>

                  <div className="mt-4 flex justify-end space-x-2">
                    {!character.isActive && (
                      <>
                        <Button 
                          variant="outline" 
                          className="bg-transparent border-[#432874]/50 hover:bg-[#432874]/20"
                          onClick={() => setEquipAuraDialogOpen(true)}
                        >
                          Equip Aura
                        </Button>
                        <Button className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]">
                          Assign Task
                        </Button>
                      </>
                    )}
                    {character.isActive && (
                      <div className="flex items-center text-[#DC143C]">
                        <Lock className="h-4 w-4 mr-1" />
                        <span>
                          Busy: {character.activityType} 
                          {character.activityEndTime && (
                            <span className="ml-1">
                              (<CountdownTimer endTime={character.activityEndTime} />)
                            </span>
                          )}
                        </span>
                      </div>
                    )}
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>
      </motion.div>
    </>
  );
};

export default CharacterCard;

=== client/src/components/dungeons/DungeonView.tsx ===
import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useGameStore } from '@/lib/zustandStore';
import { motion } from 'framer-motion';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogTrigger,
  DialogFooter
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { Skull, Swords, Shield, Zap, Heart, Plus, Clock, ScrollText } from 'lucide-react';
import type { Character, DungeonRun } from '@shared/schema';
import BattleLog from '@/components/battles/BattleLog';

const dungeons = [
  {
    id: 1,
    name: "Shadow Depths",
    level: 12,
    description: "A dark cavern filled with shadowy creatures and hidden treasures.",
    difficulty: "Medium",
    rewards: "Celestial Ore, Soul Shards, Rogue Credits",
    image: "https://images.unsplash.com/photo-1553481187-be93c21490a9?w=400&h=250&fit=crop",
    recommendedLevel: 10,
    duration: 120 // in seconds
  },
  {
    id: 2,
    name: "Fire Caves",
    level: 8,
    description: "Blazing hot volcanic caves home to fire elementals and dragons.",
    difficulty: "Easy",
    rewards: "Phoenix Feathers, Dragon Scales, Rogue Credits",
    image: "https://images.unsplash.com/photo-1566041510639-8d95a2490bfb?w=400&h=250&fit=crop",
    recommendedLevel: 6,
    duration: 90 // in seconds
  },
  {
    id: 3,
    name: "Enchanted Forest",
    level: 16,
    description: "A mystical forest where ancient spirits and magical creatures dwell.",
    difficulty: "Hard",
    rewards: "Spirit Essence, Moonsilver, Soul Shards",
    image: "https://images.unsplash.com/photo-1448375240586-882707db888b?w=400&h=250&fit=crop",
    recommendedLevel: 14,
    duration: 180 // in seconds
  }
];

const getClassColor = (characterClass: string) => {
  switch (characterClass.toLowerCase()) {
    case 'warrior':
      return 'bg-red-900/20 text-red-400 border-red-500/30';
    case 'mage':
      return 'bg-blue-900/20 text-blue-400 border-blue-500/30';
    case 'rogue':
      return 'bg-green-900/20 text-green-400 border-green-500/30';
    default:
      return 'bg-purple-900/20 text-purple-400 border-purple-500/30';
  }
};

const DungeonView = () => {
  const { characters, fetchDungeonRuns } = useGameStore();
  const { toast } = useToast();
  const [selectedDungeon, setSelectedDungeon] = useState<any>(null);
  const [selectedCharacters, setSelectedCharacters] = useState<number[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showBattleLog, setShowBattleLog] = useState(false);
  const [currentBattleLog, setCurrentBattleLog] = useState<any[]>([]);

  // Get active characters (not assigned to other tasks)
  const availableCharacters = characters.filter(char => {
    // Check if character is in any active task
    const isInDungeon = char.isActive && char.activityType === 'dungeon';
    const isInForge = char.isActive && char.activityType === 'forging';
    const isInFarming = char.isActive && char.activityType === 'farming';
    return !isInDungeon && !isInForge && !isInFarming;
  });
  const activeDungeons = useQuery<DungeonRun[]>({ 
    queryKey: ['/api/dungeons/runs'],
    refetchInterval: 30000 // Refresh every 30 seconds
  });

  const toggleCharacterSelection = (characterId: number) => {
    if (selectedCharacters.includes(characterId)) {
      setSelectedCharacters(prev => prev.filter(id => id !== characterId));
    } else if (selectedCharacters.length < 4) {
      setSelectedCharacters(prev => [...prev, characterId]);
    } else {
      toast({
        title: "Party Limit Reached",
        description: "You can only select up to 4 characters for a dungeon run.",
        variant: "destructive"
      });
    }
  };

  const startDungeonRun = async () => {
    if (selectedCharacters.length === 0) {
      toast({
        title: "No Characters Selected",
        description: "Please select at least one character for the dungeon run.",
        variant: "destructive"
      });
      return;
    }

    if (!selectedDungeon) return;

    setIsSubmitting(true);

    try {
      // Calculate end time based on dungeon duration
      const endTime = new Date(new Date().getTime() + selectedDungeon.duration * 1000);

      // Get the selected character objects to check if they have auras equipped
      const selectedChars = characters.filter(char => selectedCharacters.includes(char.id));

      // Check if all selected characters have auras equipped
      const unequippedChars = selectedChars.filter(char => !char.equippedAuraId);
      if (unequippedChars.length > 0) {
        throw new Error(`${unequippedChars.map(c => c.name).join(', ')} ${unequippedChars.length === 1 ? 'needs' : 'need'} an aura equipped to enter dungeons`);
      }

      console.log("Sending dungeon request:", {
        dungeonName: selectedDungeon.name,
        dungeonLevel: selectedDungeon.level,
        characterIds: selectedCharacters,
        endTime: endTime
      });

      const response = await apiRequest('POST', '/api/dungeons/start', {
        dungeonName: selectedDungeon.name,
        dungeonLevel: selectedDungeon.level,
        characterIds: selectedCharacters,
        endTime: endTime.toISOString(), // Convert to ISO string
        dungeonTypeId: selectedDungeon.id,
        elementalType: selectedDungeon.elementalType || 'fire'  // Default to fire if not specified
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to start dungeon run");
      }

      toast({
        title: "Dungeon Run Started!",
        description: `Your party has entered ${selectedDungeon.name}.`,
      });

      // Refresh dungeon runs
      fetchDungeonRuns();
      activeDungeons.refetch();

      // Reset selections
      setSelectedCharacters([]);
      setSelectedDungeon(null);
    } catch (error: any) {
      console.error('Error starting dungeon run:', error);
      toast({
        title: "Failed to Start Dungeon Run",
        description: error.message || "There was an error starting the dungeon run.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCompleteDungeon = async (runId: number) => {
    setIsSubmitting(true);
    try {
      const res = await apiRequest('POST', `/api/dungeons/complete/${runId}`, undefined);
      const data = await res.json();

      // Show battle log immediately
      setCurrentBattleLog(data.battleLog || []);
      setShowBattleLog(true);

      // Refresh the list of dungeons
      activeDungeons.refetch();
    } catch (error) {
      console.error('Error completing dungeon:', error);
      toast({
        title: "Error",
        description: "Failed to complete dungeon run.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const viewBattleLog = (battleLog: any) => {
    // Display battle log in dialog
    console.log(battleLog);
    setCurrentBattleLog(battleLog || []);
    setShowBattleLog(true);
  };

  return (
    <>
      <div className="mb-6">
        <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] mb-2">Dungeon</h1>
        <p className="text-[#C8B8DB]/80">
          Send your heroes on dangerous dungeon runs to collect valuable rewards.
        </p>
      </div>

      {/* Active Dungeon Runs */}
      {activeDungeons.data && activeDungeons.data.filter(run => !run.completed).length > 0 && (
        <div className="mb-8">
          <h2 className="text-xl font-cinzel font-bold mb-4">Active Dungeon Runs</h2>
          <div className="grid gap-4 md:grid-cols-2">
            {activeDungeons.data
              .filter(run => !run.completed)
              .map(run => {
                const endTime = new Date(run.endTime);
                const isCompleted = endTime <= new Date();

                return (
                  <Card key={run.id} className="bg-[#1A1A2E] border-[#432874]/30">
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-[#FF9D00] font-cinzel">{run.dungeonName}</CardTitle>
                          <CardDescription>Level {run.dungeonLevel}</CardDescription>
                        </div>
                        <Badge className="bg-[#DC143C]/20 text-[#DC143C] border-[#DC143C]/30">
                          {isCompleted ? "Ready to Collect" : "In Progress"}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="pb-2">
                      <div className="flex space-x-2 mb-2">
                        {run.characterIds.map((charId) => {
                          const character = characters.find(c => c.id === charId);
                          return (
                            <img 
                              key={charId}
                              src={character?.avatarUrl || "https://via.placeholder.com/40"}
                              alt={character?.name || "Character"}
                              className="w-8 h-8 rounded-full border border-[#432874]"
                            />
                          );
                        })}
                      </div>
                      {!isCompleted && (
                        <div className="flex items-center text-sm text-[#C8B8DB]/70">
                          <Clock className="h-4 w-4 mr-1" />
                          <span>
                            Completes in {Math.ceil((endTime.getTime() - new Date().getTime()) / 60000)} minutes
                          </span>
                        </div>
                      )}
                    </CardContent>
                    <CardFooter>
                      {isCompleted ? (
                        <Button 
                          className="w-full bg-[#DC143C] hover:bg-[#DC143C]/80"
                          onClick={() => handleCompleteDungeon(run.id)}
                          disabled={isSubmitting}
                        >
                          <Skull className="h-4 w-4 mr-2" />
                          {isSubmitting ? "Retrieving Party..." : "Retrieve Party"}
                        </Button>
                      ) : (
                        <Button 
                          className="w-full bg-[#432874]/50 hover:bg-[#432874]/70 cursor-not-allowed"
                          disabled
                        >
                          <Clock className="h-4 w-4 mr-2" />
                          Party is exploring...
                        </Button>
                      )}
                    </CardFooter>
                  </Card>
                );
              })}
          </div>
        </div>
      )}


      {/* Available Dungeons */}
      <div>
        <h2 className="text-xl font-cinzel font-bold mb-4">Available Dungeons</h2>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {dungeons.map(dungeon => (
            <Dialog key={dungeon.id}>
              <DialogTrigger asChild>
                <motion.div 
                  className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl overflow-hidden cursor-pointer"
                  whileHover={{ y: -5, boxShadow: '0 5px 20px rgba(67, 40, 116, 0.3)' }}
                  onClick={() => setSelectedDungeon(dungeon)}
                >
                  <div className="relative h-40">
                    <img 
                      src={dungeon.image} 
                      alt={dungeon.name} 
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-[#1A1A2E] to-transparent"></div>
                    <div className="absolute bottom-0 left-0 right-0 p-4">
                      <h3 className="text-xl font-cinzel font-bold text-[#FF9D00]">{dungeon.name}</h3>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-[#C8B8DB]">Level {dungeon.level}</span>
                        <Badge className={
                          dungeon.difficulty === "Easy" ? "bg-green-700/30 text-green-400" :
                          dungeon.difficulty === "Medium" ? "bg-yellow-700/30 text-yellow-400" :
                          "bg-red-700/30 text-red-400"
                        }>
                          {dungeon.difficulty}
                        </Badge>
                      </div>
                    </div>
                  </div>
                  <div className="p-4">
                    <p className="text-sm text-[#C8B8DB]/80 mb-2">{dungeon.description}</p>
                    <div className="text-xs text-[#C8B8DB]/70">
                      <div className="flex items-center mb-1">
                        <Swords className="h-3 w-3 mr-1 text-[#FF9D00]" />
                        <span>Recommended Level: {dungeon.recommendedLevel}+</span>
                      </div>
                      <div className="flex items-center">
                        <Clock className="h-3 w-3 mr-1 text-[#C8B8DB]/80" />
                        <span>Duration: {Math.floor(dungeon.duration / 60)} minutes</span>
                      </div>
                    </div>
                  </div>
                </motion.div>
              </DialogTrigger>

              <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB] max-w-3xl">
                <DialogHeader>
                  <DialogTitle className="text-[#FF9D00] font-cinzel text-xl">
                    {dungeon.name} - Level {dungeon.level}
                  </DialogTitle>
                </DialogHeader>

                <div className="grid gap-4 py-4 md:grid-cols-2">
                  <div>
                    <div className="rounded-lg overflow-hidden mb-4">
                      <img src={dungeon.image} alt={dungeon.name} className="w-full h-48 object-cover" />
                    </div>

                    <div className="space-y-3">
                      <div>
                        <h3 className="text-sm font-bold mb-1">Description</h3>
                        <p className="text-sm text-[#C8B8DB]/80">{dungeon.description}</p>
                      </div>

                      <div>
                        <h3 className="text-sm font-bold mb-1">Rewards</h3>
                        <p className="text-sm text-[#C8B8DB]/80">{dungeon.rewards}</p>
                      </div>

                      <div className="grid grid-cols-2 gap-2">
                        <div className="bg-[#432874]/20 rounded-md p-2">
                          <h3 className="text-xs font-bold mb-1 text-[#C8B8DB]/70">Difficulty</h3>
                          <Badge className={
                            dungeon.difficulty === "Easy" ? "bg-green-700/30 text-green-400" :
                            dungeon.difficulty === "Medium" ? "bg-yellow-700/30 text-yellow-400" :
                            "bg-red-700/30 text-red-400"
                          }>
                            {dungeon.difficulty}
                          </Badge>
                        </div>

                        <div className="bg-[#432874]/20 rounded-md p-2">
                          <h3 className="text-xs font-bold mb-1 text-[#C8B8DB]/70">Duration</h3>
                          <div className="flex items-center">
                            <Clock className="h-3 w-3 mr-1 text-[#C8B8DB]/80" />
                            <span className="text-sm">{Math.floor(dungeon.duration / 60)} minutes</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-sm font-bold mb-2">Select Party Members (Up to 4)</h3>
                    <div className="grid grid-cols-1 gap-2 max-h-64 overflow-y-auto">
                      {characters
                        .sort((a, b) => {
                          // Sort function to put available characters first
                          const aUnavailable = (a.isActive && (a.activityType === 'dungeon' || a.activityType === 'forging' || a.activityType === 'farming')) || !a.equippedAuraId;
                          const bUnavailable = (b.isActive && (b.activityType === 'dungeon' || b.activityType === 'forging' || b.activityType === 'farming')) || !b.equippedAuraId;
                          return Number(aUnavailable) - Number(bUnavailable);
                        })
                        .map(character => {
                          const isInDungeon = character.isActive && character.activityType === 'dungeon';
                          const isInForge = character.isActive && character.activityType === 'forging';
                          const isInFarming = character.isActive && character.activityType === 'farming';
                          const hasNoAura = !character.equippedAuraId;
                          const isUnavailable = isInDungeon || isInForge || isInFarming || hasNoAura;

                          return (
                          <div 
                            key={character.id}
                            className={`flex items-center p-2 rounded-md border ${
                              isUnavailable 
                                ? 'border-red-500/30 bg-red-900/10 cursor-not-allowed opacity-70' 
                                : selectedCharacters.includes(character.id)
                                  ? 'bg-[#432874]/40 border-[#FF9D00]/50 cursor-pointer'
                                  : 'bg-[#1F1D36]/50 border-[#432874]/30 cursor-pointer'
                            }`}
                            onClick={() => !isUnavailable && toggleCharacterSelection(character.id)}
                          >
                            <div className="absolute right-2 top-2 flex items-center gap-2">
                              {isUnavailable ? (
                                <Badge variant="outline" className="bg-red-900/20 text-red-400 border-red-500/30">
                                  {hasNoAura ? 'No Aura' : character.activityType}
                                </Badge>
                              ) : (
                                <Badge variant="outline" className="bg-green-900/20 text-green-400 border-green-500/30">
                                  Available
                                </Badge>
                              )}
                              {!isUnavailable && (
                                <Dialog>
                                  <DialogTrigger asChild>
                                    <Button 
                                      variant="outline" 
                                      size="sm"
                                      className="h-6 bg-transparent border-[#432874]/50 hover:bg-[#432874]/20 text-xs"
                                    >
                                      View
                                    </Button>
                                  </DialogTrigger>
                                  <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB]">
                                    <DialogHeader>
                                      <DialogTitle className="text-[#FF9D00] font-cinzel">
                                        {character.name} - Level {character.level}
                                      </DialogTitle>
                                    </DialogHeader>
                                    <div className="py-4">
                                      <div className="flex items-center gap-4 mb-4">
                                        <img
                                          src={character.avatarUrl}
                                          alt={character.name}
                                          className="w-16 h-16 rounded-full object-cover border-2 border-[#432874]"
                                        />
                                        <div>
                                          <Badge className={`font-normal ${getClassColor(character.class)}`}>
                                            {character.class}
                                          </Badge>
                                          <div className="mt-2 text-sm text-[#C8B8DB]/80">
                                            Level {character.level}
                                          </div>
                                        </div>
                                      </div>
                                      
                                      <div className="grid grid-cols-2 gap-4 mb-4">
                                        <div className="flex items-center">
                                          <Swords className="h-4 w-4 mr-2 text-red-400" />
                                          <span>ATK: {character.attack}</span>
                                        </div>
                                        <div className="flex items-center">
                                          <Shield className="h-4 w-4 mr-2 text-blue-400" />
                                          <span>DEF: {character.defense}</span>
                                        </div>
                                        <div className="flex items-center">
                                          <Heart className="h-4 w-4 mr-2 text-red-500" />
                                          <span>HP: {character.health}</span>
                                        </div>
                                        <div className="flex items-center">
                                          <Zap className="h-4 w-4 mr-2 text-yellow-400" />
                                          <span>SPD: {character.speed}</span>
                                        </div>
                                      </div>

                                      {character.equippedAuraId && (
                                        <div className="mt-4 p-3 bg-[#432874]/20 rounded-lg">
                                          <h4 className="font-semibold mb-2">Equipped Aura</h4>
                                          <div className="flex items-center">
                                            <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 mr-2"></div>
                                            <div>
                                              <div className="text-sm text-[#00B9AE]">
                                                {character.equippedAura?.name || 'Mysterious Aura'}
                                              </div>
                                              <div className="text-xs text-[#C8B8DB]/60">
                                                Level {character.equippedAura?.level || 1}
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      )}
                                    </div>
                                  </DialogContent>
                                </Dialog>
                              )}
                            </div>
                            <img 
                              src={character.avatarUrl}
                              alt={character.name}
                              className={`w-10 h-10 rounded-full object-cover border-2 ${
                                selectedCharacters.includes(character.id) ? 'border-[#FF9D00]' : 'border-[#432874]/50'
                              }`}
                            />
                            <div className="ml-2 flex-1">
                              <div className="flex justify-between">
                                <span className="font-semibold">{character.name}</span>
                                <span className="text-sm">Lvl {character.level}</span>
                              </div>
                              <div className="flex items-center text-xs mt-1">
                                <Swords className="h-3 w-3 mr-1 text-red-400" />
                                <span className="mr-2">ATK: {character.attack}</span>
                                <Shield className="h-3 w-3 mr-1 text-blue-400" />
                                <span className="mr-2">DEF: {character.defense}</span>
                                <Heart className="h-3 w-3 mr-1 text-red-500" />
                                <span className="mr-2">HP: {character.health}</span>
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>

                    <div className="mt-4">
                      <h3 className="text-sm font-bold mb-2">Selected Party ({selectedCharacters.length}/4)</h3>
                      <div className="flex flex-wrap gap-2">
                        {selectedCharacters.map(charId => {
                          const character = characters.find(c => c.id === charId);
                          return character ? (
                            <img 
                              key={charId}
                              src={character.avatarUrl}
                              alt={character.name}
                              className="w-12 h-12 rounded-full object-cover border-2 border-[#FF9D00]"
                              title={character.name}
                            />
                          ) : null;
                        })}
                        {selectedCharacters.length < 4 && (
                          <div className="w-12 h-12 rounded-full border-2 border-dashed border-[#432874]/50 flex items-center justify-center text-[#432874]/70">
                            <Plus className="h-5 w-5" />
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                <DialogFooter>
                  <Button
                    className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                    onClick={startDungeonRun}
                    disabled={isSubmitting || selectedCharacters.length === 0 || availableCharacters.length === 0}
                  >
                    {isSubmitting ? "Starting Dungeon Run..." : "Start Dungeon Run"}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          ))}
        </div>
      </div>

      {/* Battle Log Dialog */}
      <BattleLog 
        isOpen={showBattleLog}
        onClose={() => setShowBattleLog(false)}
        battleLog={currentBattleLog}
        runId={null}
        onCompleteDungeon={handleCompleteDungeon}
      />
    </>
  );
};

export default DungeonView;

=== client/src/components/farming/FarmingView.tsx ===
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useQuery } from '@tanstack/react-query';
import { useGameStore } from '@/lib/zustandStore';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger,
  DialogFooter
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Plus, 
  Lock, 
  Clock, 
  CheckCircle2, 
  UserX, 
  Gem, 
  Timer, 
  HelpCircle 
} from 'lucide-react';
import CountdownTimer from '../common/CountdownTimer';
import type { Character, FarmingTask } from '@shared/schema';

// Available farming resources
const farmingResources = [
  { 
    id: 1, 
    name: "Celestial Ore", 
    description: "A rare material used in forging and crafting high-level Auras.",
    image: "https://images.unsplash.com/photo-1518709594023-6ebd2b555f4e?w=150&h=150&fit=crop",
    type: "rare",
    baseTime: 60 * 45 // 45 minutes in seconds
  },
  { 
    id: 2, 
    name: "Moonsilver", 
    description: "A shimmering metallic material that enhances the power of water Auras.",
    image: "https://images.unsplash.com/photo-1505356822725-08ad25f3ffe4?w=150&h=150&fit=crop",
    type: "common",
    baseTime: 60 * 30 // 30 minutes in seconds
  },
  { 
    id: 3, 
    name: "Dragon Scale", 
    description: "Tough scales from fallen dragons, essential for crafting fire Auras.",
    image: "https://images.unsplash.com/photo-1563589425059-d2524a5a1dfc?w=150&h=150&fit=crop",
    type: "rare",
    baseTime: 60 * 45 // 45 minutes in seconds
  },
  { 
    id: 4, 
    name: "Phoenix Feather", 
    description: "Brilliant feathers from phoenixes, used in creating powerful Auras.",
    image: "https://images.unsplash.com/photo-1592364395653-83e648b22fa4?w=150&h=150&fit=crop",
    type: "epic",
    baseTime: 60 * 60 // 60 minutes in seconds
  }
];

const FarmingView = () => {
  const { characters, fetchFarmingTasks } = useGameStore();
  const { toast } = useToast();
  const [selectedSlot, setSelectedSlot] = useState<number | null>(null);
  const [selectedResource, setSelectedResource] = useState<any>(null);
  const [selectedCharacter, setSelectedCharacter] = useState<number | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Get farming tasks
  const { data: farmingTasks = [], isLoading, refetch: refetchFarmingTasks } = useQuery<FarmingTask[]>({ 
    queryKey: ['/api/farming/tasks'],
    refetchInterval: 5000, // Refresh even more frequently (every 5 seconds)
    staleTime: 1000, // Mark data as stale after 1 second
  });
  
  // Get truly available characters (not assigned to any active tasks)
  const availableCharacters = characters.filter(char => {
    // Check if character is assigned to any active forging task
    const isInForgingTask = useGameStore.getState().forgingTasks.some(task => 
      !task.completed && task.characterId === char.id
    );
    
    // Check if character is assigned to any active farming task
    const isInFarmingTask = farmingTasks.some(task => 
      !task.completed && task.characterId === char.id
    );
    
    // Check if character is in a dungeon run
    const isInDungeonRun = useGameStore.getState().dungeonRuns.some(run => 
      !run.completed && run.characterIds && run.characterIds.includes(char.id)
    );
    
    // Character is available if not assigned to any active task
    return !isInForgingTask && !isInFarmingTask && !isInDungeonRun;
  });
  
  // Calculate available farming slots based on townhall level (for MVP, we'll use 3)
  const maxFarmingSlots = 3;
  
  // Create slots array
  const farmingSlots = Array.from({ length: maxFarmingSlots }, (_, index) => {
    const slot = index + 1;
    const task = farmingTasks.find(t => t.slotIndex === slot && !t.completed);
    return { slot, task };
  });

  const startFarmingTask = async () => {
    if (!selectedResource || !selectedCharacter || selectedSlot === null) {
      toast({
        title: "Incomplete Selection",
        description: "Please select a resource, character, and farming slot.",
        variant: "destructive"
      });
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // Calculate farming duration (based on character level and resource type)
      const character = characters.find(c => c.id === selectedCharacter);
      
      if (!character) {
        throw new Error("Selected character not found");
      }
      
      // Adjust time based on character's level (higher level = faster farming)
      const levelMultiplier = Math.max(0.6, 1 - (character.level || 1) * 0.02); // 2% reduction per level, min 40% reduction
      const farmingDuration = selectedResource.baseTime * levelMultiplier;
      
      // Calculate end time
      const now = new Date();
      const endTime = new Date(now.getTime() + farmingDuration * 1000);
      
      console.log('Sending farming request with endTime:', endTime.toISOString());
      
      // Send request to start farming task
      const response = await apiRequest('POST', '/api/farming/tasks', {
        characterId: selectedCharacter,
        resourceName: selectedResource.name,
        endTime: endTime.toISOString(), // Convert Date to ISO string
        slotIndex: selectedSlot
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to start farming task");
      }
      
      // Show success message
      toast({
        title: "Farming Started",
        description: `${character.name} is now farming ${selectedResource.name}.`,
      });
      
      // Reset selections
      setSelectedSlot(null);
      setSelectedResource(null);
      setSelectedCharacter(null);
      
      // Refresh farming tasks immediately
      fetchFarmingTasks();
      // Also update the query cache immediately
      refetchFarmingTasks();
    } catch (error: any) {
      console.error('Error starting farming task:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to start farming task.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCollectResources = async (taskId: number) => {
    setIsSubmitting(true);
    try {
      const response = await apiRequest('POST', `/api/farming/complete/${taskId}`, undefined);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to collect resources");
      }
      
      const data = await response.json();
      
      toast({
        title: "Resources Collected",
        description: `Gained ${data.amount} ${data.resource}.`,
      });
      
      // Refresh farming tasks immediately
      fetchFarmingTasks();
      // Also update the query cache immediately
      refetchFarmingTasks();
    } catch (error) {
      console.error('Error collecting resources:', error);
      toast({
        title: "Error",
        description: "Failed to collect resources.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const getTypeStyles = (type: string) => {
    switch (type) {
      case 'common':
        return 'bg-slate-700/30 text-slate-300 border-slate-600/30';
      case 'rare':
        return 'bg-blue-700/30 text-blue-300 border-blue-600/30';
      case 'epic':
        return 'bg-purple-700/30 text-purple-300 border-purple-600/30';
      case 'legendary':
        return 'bg-yellow-700/30 text-yellow-300 border-yellow-600/30';
      default:
        return 'bg-slate-700/30 text-slate-300 border-slate-600/30';
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-[#FF9D00] text-xl">Loading farming data...</div>
      </div>
    );
  }

  return (
    <>
      <div className="mb-6">
        <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] mb-2">Farming</h1>
        <p className="text-[#C8B8DB]/80">
          Gather valuable materials for crafting Auras and upgrading your characters.
        </p>
      </div>
      
      {/* Farming Slots */}
      <div className="grid gap-4 md:grid-cols-3 mb-8">
        {farmingSlots.map(({ slot, task }) => {
          // Find character if a task is active
          const character = task ? characters.find(c => c.id === task.characterId) : null;
          
          return (
            <motion.div
              key={`slot-${slot}`}
              whileHover={{ scale: 1.02 }}
              className={`bg-[#1A1A2E] border border-[#432874]/30 rounded-xl overflow-hidden ${!task && 'cursor-pointer'}`}
              onClick={() => !task && setSelectedSlot(slot)}
            >
              {task ? (
                // Active farming task
                <div>
                  <div className="p-4">
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <h3 className="font-cinzel font-bold text-lg text-[#C8B8DB]">
                          Farming Slot {slot}
                        </h3>
                        <Badge className="bg-[#228B22]/20 text-[#228B22] border-[#228B22]/30">
                          Active
                        </Badge>
                      </div>
                      {/* Countdown timer */}
                      <div className="text-sm text-[#C8B8DB]/70 flex items-center">
                        <Clock className="h-4 w-4 mr-1" />
                        <CountdownTimer 
                          endTime={task.endTime} 
                          onComplete={() => task && handleCollectResources(task.id)}
                        />
                      </div>
                    </div>
                    
                    {/* Resource and character info */}
                    <div className="flex justify-between items-center mb-4">
                      <div className="flex items-center">
                        <img
                          src={farmingResources.find(r => r.name === task.resourceName)?.image || "https://via.placeholder.com/40"}
                          alt={task.resourceName}
                          className="w-12 h-12 rounded-full object-cover border-2 border-[#228B22]/50"
                        />
                        <div className="ml-2">
                          <div className="text-sm font-semibold">{task.resourceName}</div>
                          <div className="text-xs text-[#C8B8DB]/70">
                            {farmingResources.find(r => r.name === task.resourceName)?.type || "common"}
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex flex-col items-end">
                        <div className="text-sm font-semibold">{character?.name || "Character"}</div>
                        <div className="text-xs text-[#C8B8DB]/70">Level {character?.level || "?"}</div>
                      </div>
                    </div>
                    
                    {/* Collect button (only shown if task is complete) */}
                    {new Date(task.endTime) <= new Date() && (
                      <Button 
                        className="w-full bg-[#228B22] hover:bg-[#228B22]/80"
                        onClick={() => handleCollectResources(task.id)}
                        disabled={isSubmitting}
                      >
                        <CheckCircle2 className="h-4 w-4 mr-2" />
                        {isSubmitting ? "Collecting..." : "Collect Resources"}
                      </Button>
                    )}
                  </div>
                </div>
              ) : (
                // Empty farming slot
                <Dialog>
                  <DialogTrigger asChild>
                    <div className="h-full min-h-[200px] flex flex-col items-center justify-center p-6">
                      <div className="w-16 h-16 rounded-full bg-[#432874]/20 flex items-center justify-center mb-3">
                        <Plus className="h-8 w-8 text-[#C8B8DB]/70" />
                      </div>
                      <h3 className="font-cinzel font-bold text-lg text-[#C8B8DB] mb-1">
                        Farming Slot {slot}
                      </h3>
                      <p className="text-sm text-[#C8B8DB]/70 text-center">
                        Click to assign a character to farm resources.
                      </p>
                    </div>
                  </DialogTrigger>
                  
                  <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB]">
                    <DialogHeader>
                      <DialogTitle className="text-[#FF9D00] font-cinzel text-xl">
                        Start Farming - Slot {slot}
                      </DialogTitle>
                    </DialogHeader>
                    
                    <div className="py-4">
                      {/* Select Resource */}
                      <h3 className="font-semibold mb-2">Select Resource to Farm</h3>
                      <div className="grid grid-cols-2 gap-2 mb-4">
                        {farmingResources.map(resource => (
                          <div
                            key={resource.id}
                            className={`flex items-center p-2 rounded-md border cursor-pointer ${
                              selectedResource?.id === resource.id
                                ? 'bg-[#432874]/40 border-[#228B22]/50'
                                : 'bg-[#1F1D36]/50 border-[#432874]/30'
                            }`}
                            onClick={() => setSelectedResource(resource)}
                          >
                            <img
                              src={resource.image}
                              alt={resource.name}
                              className="w-10 h-10 rounded-full object-cover border border-[#432874]/50"
                            />
                            <div className="ml-2">
                              <div className="text-sm font-semibold">{resource.name}</div>
                              <Badge className={`text-xs ${getTypeStyles(resource.type)}`}>
                                {resource.type}
                              </Badge>
                            </div>
                          </div>
                        ))}
                      </div>
                      
                      {/* Resource Details (if selected) */}
                      {selectedResource && (
                        <div className="bg-[#432874]/20 p-3 rounded-md mb-4">
                          <h4 className="text-sm font-semibold mb-1">{selectedResource.name}</h4>
                          <p className="text-xs text-[#C8B8DB]/80 mb-2">{selectedResource.description}</p>
                          <div className="flex items-center text-xs">
                            <Timer className="h-3 w-3 mr-1 text-[#C8B8DB]/70" />
                            <span>Base Time: {Math.floor(selectedResource.baseTime / 60)} minutes</span>
                          </div>
                        </div>
                      )}
                      
                      {/* Select Character */}
                      <h3 className="font-semibold mb-2">Select Character</h3>
                      {availableCharacters.length === 0 ? (
                        <div className="bg-[#432874]/20 p-4 rounded-md text-center mb-4">
                          <UserX className="h-8 w-8 mx-auto mb-2 text-[#DC143C]" />
                          <p className="text-[#C8B8DB]/80 text-sm">
                            All characters are currently busy. Wait for them to complete their current tasks or recruit new ones.
                          </p>
                        </div>
                      ) : (
                        <div className="grid grid-cols-1 gap-2 max-h-48 overflow-y-auto mb-4">
                          {availableCharacters.map(character => (
                            <div
                              key={character.id}
                              className={`flex items-center p-2 rounded-md border cursor-pointer ${
                                selectedCharacter === character.id
                                  ? 'bg-[#432874]/40 border-[#228B22]/50'
                                  : 'bg-[#1F1D36]/50 border-[#432874]/30'
                              }`}
                              onClick={() => setSelectedCharacter(character.id)}
                            >
                              <img
                                src={character.avatarUrl}
                                alt={character.name}
                                className="w-10 h-10 rounded-full object-cover border border-[#432874]/50"
                              />
                              <div className="ml-2 flex-1">
                                <div className="flex justify-between">
                                  <span className="text-sm font-semibold">{character.name}</span>
                                  <span className="text-xs">Lvl {character.level}</span>
                                </div>
                                <div className="text-xs text-[#C8B8DB]/70">
                                  {/* Character can farm faster based on level */}
                                  Farming Efficiency: +{Math.min(40, (character.level || 1) * 2)}%
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                      
                      {/* Farming Time Estimate */}
                      {selectedResource && selectedCharacter && (
                        <div className="bg-[#228B22]/10 p-3 rounded-md border border-[#228B22]/30 mb-4">
                          <div className="flex justify-between items-center">
                            <h4 className="text-sm font-semibold flex items-center">
                              <Clock className="h-4 w-4 mr-1 text-[#228B22]" />
                              Estimated Farming Time
                            </h4>
                            <HelpCircle className="h-4 w-4 text-[#C8B8DB]/50" />
                          </div>
                          <div className="text-sm mt-1">
                            {(() => {
                              const character = characters.find(c => c.id === selectedCharacter);
                              const levelMultiplier = Math.max(0.6, 1 - (character?.level || 1) * 0.02);
                              const minutes = Math.ceil((selectedResource.baseTime * levelMultiplier) / 60);
                              return `${minutes} minutes`;
                            })()}
                          </div>
                        </div>
                      )}
                    </div>
                    
                    <DialogFooter>
                      <Button
                        className="bg-[#228B22] hover:bg-[#228B22]/80"
                        onClick={startFarmingTask}
                        disabled={isSubmitting || !selectedResource || !selectedCharacter || availableCharacters.length === 0}
                      >
                        <Gem className="h-4 w-4 mr-2" />
                        {isSubmitting ? "Starting..." : "Start Farming"}
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              )}
            </motion.div>
          );
        })}
      </div>
      
      {/* Tips Section */}
      <div className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl p-6">
        <h2 className="text-xl font-cinzel font-bold text-[#FF9D00] mb-4">Farming Tips</h2>
        <div className="space-y-3">
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">1</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              Higher-level characters farm resources faster, with up to 40% reduction in farming time.
            </p>
          </div>
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">2</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              Rare and epic resource types take longer to farm but provide better materials for crafting higher-quality Auras.
            </p>
          </div>
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">3</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              Upgrade your Townhall to unlock additional farming slots and increase your material production.
            </p>
          </div>
        </div>
      </div>
    </>
  );
};

export default FarmingView;


=== client/src/components/forge/ForgeView.tsx ===
import { useEffect, useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useGameStore } from "@/lib/zustandStore";
import { motion } from "framer-motion";
import { Clock, Flame, Hammer, Sparkles, User, Info } from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Aura, BuildingUpgrade, Character, ForgingTask } from "@shared/schema";
import CountdownTimer from "../common/CountdownTimer";

const ForgeView = () => {
  const { auras = [], resources = [], characters = [], fetchAuras, fetchResources, fetchForgingTasks, fetchCharacters } = useGameStore();
  const { toast } = useToast();
  
  // Get forge building level
  const { data: buildingUpgrades = [] } = useQuery<BuildingUpgrade[]>({ 
    queryKey: ['/api/buildings/upgrades'], 
  });
  
  // Determine available crafting slots based on forge level (1 by default, +1 per level)
  const forgeUpgrade = buildingUpgrades.find(u => u.buildingType === 'forge');
  const forgeLevel = forgeUpgrade?.currentLevel || 1;
  const maxCraftingSlots = forgeLevel;
  const [selectedTab, setSelectedTab] = useState('craft');
  const [selectedElement, setSelectedElement] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [primaryAura, setPrimaryAura] = useState<Aura | null>(null);
  const [secondaryAura, setSecondaryAura] = useState<Aura | null>(null);
  const [selectedCharacterId, setSelectedCharacterId] = useState<number | null>(null);
  
  // Get forging tasks
  const { data: forgingTasks = [], isLoading: isTasksLoading } = useQuery<ForgingTask[]>({ 
    queryKey: ['/api/forge/tasks'],
    refetchInterval: 10000 // Refresh every 10 seconds
  });
  
  // Get currently available characters (not assigned to any active tasks)
  const availableCharacters = characters.filter(char => {
    // Check if character is assigned to any active forging task
    const isInForgingTask = forgingTasks.some(task => 
      !task.completed && task.characterId === char.id
    );
    
    // Check if character is assigned to any active farming task
    const isInFarmingTask = useGameStore.getState().farmingTasks.some(task => 
      !task.completed && task.characterId === char.id
    );
    
    // Check if character is in a dungeon run
    const isInDungeonRun = useGameStore.getState().dungeonRuns.some(run => 
      !run.completed && run.characterIds && run.characterIds.includes(char.id)
    );
    
    // Character is available if not assigned to any active task
    return !isInForgingTask && !isInFarmingTask && !isInDungeonRun;
  });

  // Filter auras that are not currently being used in fusion
  const availableAuras = auras.filter(aura => !aura.isFusing);
  const activeForgingTasks = forgingTasks.filter(task => !task.completed);
  
  // Reset selections when changing tabs
  useEffect(() => {
    setPrimaryAura(null);
    setSecondaryAura(null);
    setSelectedElement(null);
    setSelectedCharacterId(null);
  }, [selectedTab]);
  
  // Start crafting a new aura
  const startCrafting = async () => {
    if (!selectedElement) {
      toast({
        title: "Element Required",
        description: "Please select an element for your new aura.",
        variant: "destructive"
      });
      return;
    }
    
    if (!selectedCharacterId) {
      toast({
        title: "Character Required",
        description: "Please select a character to assist with crafting.",
        variant: "destructive"
      });
      return;
    }
    
    // Check if there are available slots
    if (activeForgingTasks.length >= maxCraftingSlots) {
      toast({
        title: "No Available Slots",
        description: `You can only have ${maxCraftingSlots} active crafting tasks. Upgrade your Forge to unlock more slots.`,
        variant: "destructive"
      });
      return;
    }
    
    // Check if user has enough materials (essence)
    const essence = resources.find(r => r.name === 'Essence');
    if (!essence || (essence.quantity || 0) < 500) {
      toast({
        title: "Insufficient Materials",
        description: `You need 500 Essence to craft a new aura. You have ${essence?.quantity || 0}.`,
        variant: "destructive"
      });
      return;
    }
    
    setIsSubmitting(true);
    try {
      // Create task with required materials
      // Calculate completion time (5 minutes for crafting)
      const now = new Date();
      const endTime = new Date(now.getTime() + 5 * 60 * 1000); // Add 5 minutes in milliseconds
      
      console.log('Sending forge request with endTime:', endTime.toISOString());
      
      const response = await apiRequest('POST', '/api/forge/craft', {
        targetElement: selectedElement,
        characterId: selectedCharacterId, // Add the selected character ID
        endTime: endTime.toISOString(), // Server expects ISO string format
        requiredMaterials: {
          'Essence': 500
        }
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to start crafting");
      }
      
      const data = await response.json();
      
      toast({
        title: "Crafting Started",
        description: `You've started crafting a new ${selectedElement} Aura. It will be ready in 5 minutes.`,
      });
      
      // Refresh resources and forging tasks
      fetchResources();
      fetchForgingTasks();
      fetchCharacters(); // Refresh characters to update their activity status
      setSelectedElement(null);
      setSelectedCharacterId(null);
    } catch (error: any) {
      console.error('Error starting craft:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to start crafting.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Complete a forging task
  const [showResultDialog, setShowResultDialog] = useState(false);
const [completedAura, setCompletedAura] = useState<Aura | null>(null);

const completeForging = async (taskId: number) => {
    setIsSubmitting(true);
    try {
      const response = await apiRequest('POST', `/api/forge/complete/${taskId}`, undefined);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to complete forging task");
      }
      
      const data = await response.json();
      
      // Store the completed aura and show dialog
      setCompletedAura(data.aura);
      setShowResultDialog(true);
      
      // Refresh forging tasks, auras, and characters
      fetchForgingTasks();
      fetchAuras();
      fetchCharacters(); // Refresh characters to update their activity status
    } catch (error: any) {
      console.error('Error completing forging task:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to complete forging task.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };
  
  return (
    <>
      <div className="mb-6">
        <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] mb-2">The Forge</h1>
        <p className="text-[#C8B8DB]/80">
          Craft new Auras and fuse existing ones to create more powerful versions.
        </p>
      </div>
      
      {/* Active Tasks */}
      {activeForgingTasks.length > 0 && (
        <motion.div 
          className="mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <h2 className="text-xl font-cinzel font-bold mb-4">Active Forging</h2>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {activeForgingTasks.map(task => {
              // Calculate progress percentage
              const startTime = new Date(task.startTime || Date.now()).getTime();
              const endTime = new Date(task.endTime || Date.now()).getTime();
              const now = new Date().getTime();
              const progress = Math.min(
                100,
                Math.max(0, ((now - startTime) / (endTime - startTime)) * 100)
              );
              
              // Check if task is complete
              const isComplete = now >= endTime;
              
              return (
                <Card key={task.id} className="bg-[#1A1A2E] border-[#432874]/30">
                  <CardHeader className="pb-2">
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle className="text-lg">
                          {task.taskType === 'craft' ? 'Crafting' : 'Fusion'}
                        </CardTitle>
                        <CardDescription>
                          {task.taskType === 'craft' 
                            ? `New ${task.targetElement} Aura` 
                            : 'Fusing Auras'
                          }
                        </CardDescription>
                      </div>
                      <Badge 
                        className={task.taskType === 'craft' 
                          ? 'bg-purple-700/30 text-purple-300 border-purple-600/30'
                          : 'bg-orange-700/30 text-orange-300 border-orange-600/30'
                        }
                      >
                        {task.taskType === 'craft' ? 'New' : 'Fusion'}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="mb-4">
                      <Progress value={progress} max={100} className="h-2 bg-[#432874]/20" />
                    </div>
                    
                    {isComplete ? (
                      <div className="flex justify-center items-center py-2">
                        <span className="text-green-400 flex items-center">
                          <Sparkles className="h-4 w-4 mr-1" />
                          Ready to claim!
                        </span>
                      </div>
                    ) : (
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-[#C8B8DB]/80 flex items-center">
                          <Clock className="h-4 w-4 mr-1" />
                          Completes in <CountdownTimer 
                            endTime={task.endTime} 
                            onComplete={() => completeForging(task.id)}
                          />
                        </span>
                      </div>
                    )}
                  </CardContent>
                  {isComplete && (
                    <CardFooter>
                      <Button
                        className="w-full bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                        onClick={() => completeForging(task.id)}
                        disabled={isSubmitting}
                      >
                        <Sparkles className="h-4 w-4 mr-2" />
                        {isSubmitting ? 'Completing...' : 'Complete Forging'}
                      </Button>
                    </CardFooter>
                  )}
                </Card>
              );
            })}
          </div>
        </motion.div>
      )}
      
      {/* Forge Interface */}
      <div className="bg-[#1A1A2E] rounded-xl border border-[#432874]/30 p-6">
        <Tabs defaultValue="craft" value={selectedTab} onValueChange={setSelectedTab} className="w-full">
          <TabsList className="bg-[#432874]/20 mb-6">
            <TabsTrigger value="craft" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
              <Hammer className="h-4 w-4 mr-2" />
              Craft Aura
            </TabsTrigger>
            <TabsTrigger value="fusion" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
              <Flame className="h-4 w-4 mr-2" />
              Aura Fusion
            </TabsTrigger>
          </TabsList>
          
          {/* Crafting Interface */}
          <TabsContent value="craft" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Left side: Element and Character selection */}
              <div className="bg-[#15152C] rounded-lg border border-[#432874]/20 p-4">
                <h3 className="text-lg font-semibold mb-4">Select Character & Element</h3>
                
                {/* Character Selection */}
                <div className="mb-6">
                  <h4 className="text-md font-semibold mb-3 flex items-center">
                    Assign Character
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <span className="ml-2 cursor-help">
                            <Info className="h-4 w-4 text-[#C8B8DB]/60" />
                          </span>
                        </TooltipTrigger>
                        <TooltipContent className="max-w-sm">
                          <p>You must assign a character to assist with crafting. This character will be unavailable for other tasks until crafting is complete.</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </h4>
                  
                  {availableCharacters.length > 0 ? (
                    <Select 
                      value={selectedCharacterId ? String(selectedCharacterId) : ""} 
                      onValueChange={(value) => setSelectedCharacterId(Number(value))}
                    >
                      <SelectTrigger className="bg-[#1A1A2E] border-[#432874]/30">
                        <SelectValue placeholder="Select a character" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableCharacters.map(character => (
                          <SelectItem key={character.id} value={String(character.id)}>
                            {character.name} (Lvl {character.level} {character.class})
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <div className="text-sm text-amber-400 py-2 px-4 bg-amber-950/20 border border-amber-900/30 rounded-md">
                      <span className="flex items-center">
                        <Info className="h-4 w-4 mr-2" />
                        All characters are currently busy. Wait for them to complete their tasks.
                      </span>
                    </div>
                  )}
                </div>
                
                {/* Element Selection */}
                <h4 className="text-md font-semibold mb-3">Element Type</h4>
                <Select value={selectedElement || ''} onValueChange={setSelectedElement}>
                  <SelectTrigger className="bg-[#1A1A2E] border-[#432874]/30">
                    <SelectValue placeholder="Select element" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="fire">Fire</SelectItem>
                    <SelectItem value="water">Water</SelectItem>
                    <SelectItem value="earth">Earth</SelectItem>
                    <SelectItem value="wind">Wind</SelectItem>
                    <SelectItem value="light">Light</SelectItem>
                    <SelectItem value="dark">Dark</SelectItem>
                  </SelectContent>
                </Select>
                
                <div className="mt-8">
                  <h4 className="text-md font-semibold mb-3">Required Materials:</h4>
                  <div className="flex justify-between items-center p-3 bg-[#1A1A2E] rounded border border-[#432874]/20">
                    <div className="flex items-center">
                      <div className="w-8 h-8 rounded-full bg-purple-800/50 flex items-center justify-center mr-3">
                        <span className="text-purple-300">E</span>
                      </div>
                      <span>Essence</span>
                    </div>
                    <div className="flex flex-col items-end">
                      <span className="text-sm">500</span>
                      <span className="text-xs text-[#C8B8DB]/60">
                        You have: {resources.find(r => r.name === 'Essence')?.quantity || 0}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Right side: Crafting summary */}
              <div className="bg-[#15152C] rounded-lg border border-[#432874]/20 p-4">
                <h3 className="text-lg font-semibold mb-4">Crafting Summary</h3>
                
                <div className="mb-6">
                  <div className="flex items-center mb-2">
                    <div className={`w-3 h-3 rounded-full mr-2 ${selectedElement 
                      ? selectedElement === 'fire' ? 'bg-red-500' 
                      : selectedElement === 'water' ? 'bg-blue-500'
                      : selectedElement === 'earth' ? 'bg-green-500' 
                      : selectedElement === 'wind' ? 'bg-cyan-500'
                      : selectedElement === 'light' ? 'bg-yellow-500'
                      : 'bg-purple-500'
                      : 'bg-gray-500'}`} 
                    />
                    <span className="capitalize">
                      {selectedElement || 'No element selected'}
                    </span>
                  </div>
                  
                  <p className="text-sm text-[#C8B8DB]/70">
                    Crafting a new Aura with random stat multipliers.
                  </p>
                </div>
                
                <div className="mb-6">
                  <h4 className="text-md font-semibold mb-2">Crafting Time:</h4>
                  <div className="flex items-center text-[#C8B8DB]/80">
                    <Clock className="h-4 w-4 mr-2" />
                    <span>5 minutes</span>
                  </div>
                </div>
                
                <div className="mb-6">
                  <h4 className="text-md font-semibold mb-2">Forge Capacity:</h4>
                  <div className="text-sm">
                    <div className="flex justify-between mb-1">
                      <span>Active Tasks:</span>
                      <span className={activeForgingTasks.length >= maxCraftingSlots ? 'text-red-400' : 'text-green-400'}>
                        {activeForgingTasks.length} / {maxCraftingSlots}
                      </span>
                    </div>
                    <p className="text-xs text-[#C8B8DB]/60">
                      Upgrade your Forge building to increase capacity.
                    </p>
                  </div>
                </div>
                
                <Button 
                  className="w-full bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                  onClick={startCrafting}
                  disabled={
                    isSubmitting || 
                    !selectedElement || 
                    !selectedCharacterId ||
                    activeForgingTasks.length >= maxCraftingSlots
                  }
                >
                  <Hammer className="h-4 w-4 mr-2" />
                  {isSubmitting ? 'Starting...' : 'Start Crafting'}
                </Button>
              </div>
            </div>
          </TabsContent>
          
          {/* Fusion Interface */}
          <TabsContent value="fusion" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Left side: Character & Aura selection */}
              <div className="bg-[#15152C] rounded-lg border border-[#432874]/20 p-4">
                <h3 className="text-lg font-semibold mb-4">Choose Auras to Fuse</h3>
                
                {/* Character Selection for Fusion */}
                <div className="mb-6">
                  <h4 className="text-md font-semibold mb-3 flex items-center">
                    Assign Character
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <span className="ml-2 cursor-help">
                            <Info className="h-4 w-4 text-[#C8B8DB]/60" />
                          </span>
                        </TooltipTrigger>
                        <TooltipContent className="max-w-sm">
                          <p>You must assign a character to perform the fusion process. This character will be unavailable for other tasks until fusion is complete.</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </h4>
                  
                  {availableCharacters.length > 0 ? (
                    <Select 
                      value={selectedCharacterId ? String(selectedCharacterId) : ""} 
                      onValueChange={(value) => setSelectedCharacterId(Number(value))}
                    >
                      <SelectTrigger className="bg-[#1A1A2E] border-[#432874]/30">
                        <SelectValue placeholder="Select a character" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableCharacters.map(character => (
                          <SelectItem key={character.id} value={String(character.id)}>
                            {character.name} (Lvl {character.level} {character.class})
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <div className="text-sm text-amber-400 py-2 px-4 bg-amber-950/20 border border-amber-900/30 rounded-md">
                      <span className="flex items-center">
                        <Info className="h-4 w-4 mr-2" />
                        All characters are currently busy. Wait for them to complete their tasks.
                      </span>
                    </div>
                  )}
                </div>
                
                <div className="mb-6">
                  <h4 className="text-md font-semibold mb-3">Primary Aura:</h4>
                  <div className="grid grid-cols-1 gap-3 max-h-[200px] overflow-y-auto">
                    {availableAuras.length === 0 ? (
                      <div className="text-center py-4 text-[#C8B8DB]/70">
                        No available auras to use as primary.
                      </div>
                    ) : (
                      availableAuras.map(aura => (
                        <div 
                          key={`primary-${aura.id}`}
                          className={`p-3 rounded border ${primaryAura?.id === aura.id 
                            ? 'bg-[#432874]/30 border-[#432874]' 
                            : 'bg-[#1A1A2E] border-[#432874]/20 hover:border-[#432874]/40 cursor-pointer'
                          }`}
                          onClick={() => setPrimaryAura(aura)}
                        >
                          <div className="flex justify-between items-center">
                            <div className="flex items-center">
                              <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${
                                aura.element === 'fire' ? 'bg-red-500/30 text-red-300' 
                                : aura.element === 'water' ? 'bg-blue-500/30 text-blue-300'
                                : aura.element === 'earth' ? 'bg-green-500/30 text-green-300' 
                                : aura.element === 'wind' ? 'bg-cyan-500/30 text-cyan-300'
                                : aura.element === 'light' ? 'bg-yellow-500/30 text-yellow-300'
                                : 'bg-purple-500/30 text-purple-300'
                              }`}>
                                {aura.element?.charAt(0).toUpperCase()}
                              </div>
                              <div>
                                <h4 className="font-medium capitalize">
                                  {aura.name || `${aura.element} Aura`}
                                </h4>
                                <Badge className='bg-purple-700/30 text-purple-300 border-purple-600/30'>
                                  Level {aura.level}
                                </Badge>
                              </div>
                            </div>
                          </div>
                          <p className="text-sm text-[#C8B8DB]/70 mt-1">
                            {aura.attack ? `Attack: ${aura.attack > 0 ? '+' : ''}${aura.attack}% ` : ''}
                            {aura.accuracy ? `Accuracy: ${aura.accuracy > 0 ? '+' : ''}${aura.accuracy}% ` : ''}
                            {aura.defense ? `Defense: ${aura.defense > 0 ? '+' : ''}${aura.defense}% ` : ''}
                            {aura.vitality ? `Vitality: ${aura.vitality > 0 ? '+' : ''}${aura.vitality}% ` : ''}
                            {aura.speed ? `Speed: ${aura.speed > 0 ? '+' : ''}${aura.speed}% ` : ''}
                            {aura.focus ? `Focus: ${aura.focus > 0 ? '+' : ''}${aura.focus}% ` : ''}
                            {aura.resilience ? `Resilience: ${aura.resilience > 0 ? '+' : ''}${aura.resilience}% ` : ''}
                          </p>
                        </div>
                      ))
                    )}
                  </div>
                </div>
                
                <div>
                  <h4 className="text-md font-semibold mb-3">Secondary Aura:</h4>
                  <div className="grid grid-cols-1 gap-3 max-h-[200px] overflow-y-auto">
                    {availableAuras.filter(a => a.id !== primaryAura?.id).length === 0 ? (
                      <div className="text-center py-4 text-[#C8B8DB]/70">
                        No available auras to use as secondary.
                      </div>
                    ) : (
                      availableAuras
                        .filter(a => a.id !== primaryAura?.id)
                        .map(aura => (
                          <div 
                            key={`secondary-${aura.id}`}
                            className={`p-3 rounded border ${secondaryAura?.id === aura.id 
                              ? 'bg-[#432874]/30 border-[#432874]' 
                              : 'bg-[#1A1A2E] border-[#432874]/20 hover:border-[#432874]/40 cursor-pointer'
                            }`}
                            onClick={() => setSecondaryAura(aura)}
                          >
                            <div className="flex justify-between items-center">
                              <div className="flex items-center">
                                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${
                                  aura.element === 'fire' ? 'bg-red-500/30 text-red-300' 
                                  : aura.element === 'water' ? 'bg-blue-500/30 text-blue-300'
                                  : aura.element === 'earth' ? 'bg-green-500/30 text-green-300' 
                                  : aura.element === 'wind' ? 'bg-cyan-500/30 text-cyan-300'
                                  : aura.element === 'light' ? 'bg-yellow-500/30 text-yellow-300'
                                  : 'bg-purple-500/30 text-purple-300'
                                }`}>
                                  {aura.element?.charAt(0).toUpperCase()}
                                </div>
                                <div>
                                  <h4 className="font-medium capitalize">
                                    {aura.name || `${aura.element} Aura`}
                                  </h4>
                                  <Badge className='bg-purple-700/30 text-purple-300 border-purple-600/30'>
                                    Level {aura.level}
                                  </Badge>
                                </div>
                              </div>
                            </div>
                            <p className="text-sm text-[#C8B8DB]/70 mt-1">
                              {aura.attack ? `Attack: ${aura.attack > 0 ? '+' : ''}${aura.attack}% ` : ''}
                              {aura.accuracy ? `Accuracy: ${aura.accuracy > 0 ? '+' : ''}${aura.accuracy}% ` : ''}
                              {aura.defense ? `Defense: ${aura.defense > 0 ? '+' : ''}${aura.defense}% ` : ''}
                              {aura.vitality ? `Vitality: ${aura.vitality > 0 ? '+' : ''}${aura.vitality}% ` : ''}
                              {aura.speed ? `Speed: ${aura.speed > 0 ? '+' : ''}${aura.speed}% ` : ''}
                              {aura.focus ? `Focus: ${aura.focus > 0 ? '+' : ''}${aura.focus}% ` : ''}
                              {aura.resilience ? `Resilience: ${aura.resilience > 0 ? '+' : ''}${aura.resilience}% ` : ''}
                            </p>
                          </div>
                        ))
                    )}
                  </div>
                </div>
              </div>
              
              {/* Right side: Fusion summary */}
              <div className="bg-[#15152C] rounded-lg border border-[#432874]/20 p-4">
                <h3 className="text-lg font-semibold mb-4">Fusion Summary</h3>
                
                {primaryAura && secondaryAura ? (
                  <>
                    <div className="bg-[#1A1A2E] rounded-lg border border-[#432874]/30 p-4 mb-6">
                      <h4 className="text-md font-semibold mb-2">Result Preview:</h4>
                      <div className="flex items-center mb-3">
                        <div className={`w-6 h-6 rounded-full flex items-center justify-center mr-2 ${
                          primaryAura.element === 'fire' ? 'bg-red-500/30 text-red-300' 
                          : primaryAura.element === 'water' ? 'bg-blue-500/30 text-blue-300'
                          : primaryAura.element === 'earth' ? 'bg-green-500/30 text-green-300' 
                          : primaryAura.element === 'wind' ? 'bg-cyan-500/30 text-cyan-300'
                          : primaryAura.element === 'light' ? 'bg-yellow-500/30 text-yellow-300'
                          : 'bg-purple-500/30 text-purple-300'
                        }`}>
                          {primaryAura.element?.charAt(0).toUpperCase()}
                        </div>
                        <span className="capitalize">
                          Enhanced {primaryAura.element} Aura
                        </span>
                        <Badge className="ml-2 bg-purple-700/30 text-purple-300 border-purple-600/30">
                          Level {(primaryAura.level || 1) + 1}
                        </Badge>
                      </div>
                      
                      <p className="text-sm text-[#C8B8DB]/80 mb-3">
                        Fusion will create an enhanced version of the primary aura with improved stats.
                      </p>
                      
                      <div className="text-xs text-[#C8B8DB]/70">
                        <div className="grid grid-cols-2 gap-1">
                          <div>• Primary element retained</div>
                          <div>• Level increased by 1</div>
                          <div>• Stats enhanced by ~20%</div>
                          <div>• Secondary aura consumed</div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="mb-6">
                      <h4 className="text-md font-semibold mb-2">Fusion Time:</h4>
                      <div className="flex items-center text-[#C8B8DB]/80">
                        <Clock className="h-4 w-4 mr-2" />
                        <span>10 minutes</span>
                      </div>
                    </div>
                    
                    <div className="mb-6">
                      <h4 className="text-md font-semibold mb-2">Forge Capacity:</h4>
                      <div className="text-sm">
                        <div className="flex justify-between mb-1">
                          <span>Active Tasks:</span>
                          <span className={activeForgingTasks.length >= maxCraftingSlots ? 'text-red-400' : 'text-green-400'}>
                            {activeForgingTasks.length} / {maxCraftingSlots}
                          </span>
                        </div>
                        <p className="text-xs text-[#C8B8DB]/60">
                          Upgrade your Forge building to increase capacity.
                        </p>
                      </div>
                    </div>
                    
                    <Button 
                      className="w-full bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                      onClick={() => {
                        if (!selectedCharacterId) {
                          toast({
                            title: "Character Required",
                            description: "Please select a character to assist with fusion.",
                            variant: "destructive"
                          });
                          return;
                        }
                        console.log("Fusion not yet implemented");
                        toast({
                          title: "Feature Coming Soon",
                          description: "Fusion functionality will be available in a future update.",
                        });
                      }}
                      disabled={!selectedCharacterId || true} // Keep 'true' until fusion is implemented
                    >
                      <Flame className="h-4 w-4 mr-2" />
                      Fusion Coming Soon
                    </Button>
                  </>
                ) : (
                  <div className="text-center py-8 text-[#C8B8DB]/70">
                    Select two auras to see fusion details
                  </div>
                )}
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>

      {/* Forge Result Dialog */}
      <Dialog open={showResultDialog} onOpenChange={setShowResultDialog}>
        <DialogContent className="bg-[#1A1A2E] border-[#432874] max-w-2xl">
          <DialogHeader>
            <DialogTitle className="text-2xl font-cinzel text-[#FF9D00]">
              Forging Complete!
            </DialogTitle>
          </DialogHeader>
          
          {completedAura && (
            <div className="space-y-4">
              <div className="flex items-center gap-4">
                <div className={`w-16 h-16 rounded-full flex items-center justify-center ${
                  completedAura.element === 'fire' ? 'bg-red-500/30 text-red-300' 
                  : completedAura.element === 'water' ? 'bg-blue-500/30 text-blue-300'
                  : completedAura.element === 'earth' ? 'bg-green-500/30 text-green-300' 
                  : completedAura.element === 'wind' ? 'bg-cyan-500/30 text-cyan-300'
                  : completedAura.element === 'light' ? 'bg-yellow-500/30 text-yellow-300'
                  : 'bg-purple-500/30 text-purple-300'
                }`}>
                  <span className="text-2xl">{completedAura.element?.charAt(0).toUpperCase()}</span>
                </div>
                <div>
                  <h3 className="text-xl font-semibold capitalize">
                    {completedAura.name || `${completedAura.element} Aura`}
                  </h3>
                  <div className="flex gap-2">
                    <Badge className="bg-purple-700/30 text-purple-300 border-purple-600/30">
                      Level {completedAura.level}
                    </Badge>
                    <Badge className="bg-[#432874]/30 text-[#C8B8DB]">
                      {completedAura.tier ? `Tier ${completedAura.tier}` : 'Basic Tier'}
                    </Badge>
                  </div>
                </div>
              </div>

              <div className="bg-[#432874]/20 rounded-lg p-4">
                <h4 className="font-semibold mb-2">Stat Multipliers</h4>
                <div className="grid grid-cols-2 gap-x-4 gap-y-2 text-[#C8B8DB]">
                  {completedAura.attack && (
                    <div>Attack: <span className="text-[#FF9D00]">+{completedAura.attack}%</span></div>
                  )}
                  {completedAura.defense && (
                    <div>Defense: <span className="text-[#FF9D00]">+{completedAura.defense}%</span></div>
                  )}
                  {completedAura.vitality && (
                    <div>Vitality: <span className="text-[#FF9D00]">+{completedAura.vitality}%</span></div>
                  )}
                  {completedAura.speed && (
                    <div>Speed: <span className="text-[#FF9D00]">+{completedAura.speed}%</span></div>
                  )}
                  {completedAura.accuracy && (
                    <div>Accuracy: <span className="text-[#FF9D00]">+{completedAura.accuracy}%</span></div>
                  )}
                  {completedAura.focus && (
                    <div>Focus: <span className="text-[#FF9D00]">+{completedAura.focus}%</span></div>
                  )}
                  {completedAura.resilience && (
                    <div>Resilience: <span className="text-[#FF9D00]">+{completedAura.resilience}%</span></div>
                  )}
                </div>
                <div className="mt-3 pt-3 border-t border-[#432874]/30">
                  <div className="text-sm font-semibold">Total Stat Value</div>
                  <div className="text-[#FF9D00] text-lg">
                    +{(completedAura.attack || 0) + 
                       (completedAura.defense || 0) + 
                       (completedAura.vitality || 0) + 
                       (completedAura.speed || 0) + 
                       (completedAura.accuracy || 0) + 
                       (completedAura.focus || 0) + 
                       (completedAura.resilience || 0)}%
                  </div>
                </div>
              </div>

              {completedAura.skills && completedAura.skills.length > 0 && (
                <div className="bg-[#432874]/20 rounded-lg p-4">
                  <h4 className="font-semibold mb-2">Skills</h4>
                  <div className="space-y-3">
                    {completedAura.skills.map((skill: any, index: number) => (
                      <div key={index} className="border border-[#432874]/40 rounded p-3">
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <div className="font-medium text-[#FF9D00]">{skill.name}</div>
                            <div className="text-xs text-[#C8B8DB]/60">{skill.type} Skill</div>
                          </div>
                          <Badge className={
                            skill.type === 'Basic' ? 'bg-blue-500/20 text-blue-300' :
                            skill.type === 'Advanced' ? 'bg-purple-500/20 text-purple-300' :
                            'bg-amber-500/20 text-amber-300'
                          }>
                            Level {skill.level}
                          </Badge>
                        </div>
                        <div className="text-sm text-[#C8B8DB]/80">{skill.description}</div>
                        <div className="mt-2 space-y-1 text-xs">
                          {skill.damage && (
                            <div className="text-red-400">Base Damage: {skill.damage}x</div>
                          )}
                          {skill.effect && (
                            <div className="text-emerald-400">{skill.effect}</div>
                          )}
                          {skill.targets && (
                            <div className="text-blue-400">Targets: {skill.targets}</div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {completedAura.description && (
                <div className="bg-[#432874]/20 rounded-lg p-4">
                  <h4 className="font-semibold mb-2">Description</h4>
                  <p className="text-[#C8B8DB]">{completedAura.description}</p>
                </div>
              )}

              {completedAura.skills && (
                <div className="bg-[#432874]/20 rounded-lg p-4">
                  <h4 className="font-semibold mb-2">Skills</h4>
                  <div className="space-y-2">
                    {(typeof completedAura.skills === 'string' 
                      ? JSON.parse(completedAura.skills) 
                      : completedAura.skills
                    ).map((skill: any, index: number) => (
                      <div key={index} className="border border-[#432874]/40 rounded p-2">
                        <div className="font-medium text-[#FF9D00]">{skill.name}</div>
                        <div className="text-sm text-[#C8B8DB]/80">{skill.description}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
          
          <DialogFooter>
            <Button 
              onClick={() => setShowResultDialog(false)}
              className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default ForgeView;


=== client/src/components/blackmarket/BlackMarketView.tsx ===
import { useState } from 'react';
import { motion } from 'framer-motion';
import { useQuery } from '@tanstack/react-query';
import { useGameStore } from '@/lib/zustandStore';
import { useDiscordAuth } from '@/lib/discordAuth';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogFooter
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  ShoppingBag, 
  Coins, 
  Clock, 
  Sparkles, 
  Users, 
  Shield, 
  Gem, 
  AlertTriangle
} from 'lucide-react';

import type { BlackMarketListing } from '@shared/schema';

const BlackMarketView = () => {
  const { user, fetchUser } = useDiscordAuth();
  const { fetchResources, fetchCharacters, fetchAuras } = useGameStore();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [confirmDialog, setConfirmDialog] = useState<{open: boolean, listing: BlackMarketListing | null}>({
    open: false,
    listing: null
  });
  
  // Fetch black market listings
  const { data: listings = [], isLoading, refetch: refetchListings } = useQuery<BlackMarketListing[]>({ 
    queryKey: ['/api/blackmarket/listings'],
    refetchInterval: 60000 // Refresh every minute
  });

  // Filter listings by different categories
  const featuredPremiumListings = listings.filter(listing => 
    listing.isPremium === true && !listing.sold
  );
  
  const regularPremiumListings = listings.filter(listing => 
    listing.currencyType === 'forgeTokens' && !listing.isPremium && !listing.sold
  );
  
  const standardListings = listings.filter(listing => 
    listing.currencyType === 'rogueCredits' && !listing.isPremium && !listing.sold
  );

  // Generate time until refresh
  const getTimeUntilRefresh = () => {
    const now = new Date();
    const tomorrow = new Date();
    tomorrow.setHours(24, 0, 0, 0);
    
    const diffMs = tomorrow.getTime() - now.getTime();
    const diffHrs = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMins = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${diffHrs}h ${diffMins}m`;
  };

  const handlePurchase = async (listing: BlackMarketListing) => {
    setIsSubmitting(true);
    try {
      const response = await apiRequest('POST', `/api/blackmarket/buy/${listing.id}`, undefined);
      const data = await response.json();
      
      toast({
        title: "Purchase Successful!",
        description: `You have acquired a new ${listing.itemType}.`,
      });
      
      // Refresh data
      fetchUser();
      refetchListings();
      
      // Refresh related collections based on purchased item type
      if (listing.itemType === 'character') {
        fetchCharacters();
      } else if (listing.itemType === 'aura') {
        fetchAuras();
      } else if (listing.itemType === 'resource') {
        fetchResources();
      }
      
      setConfirmDialog({ open: false, listing: null });
    } catch (error) {
      console.error('Purchase error:', error);
      toast({
        title: "Purchase Failed",
        description: "You may not have enough currency or the item is no longer available.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const getItemInfo = (listing: BlackMarketListing) => {
    const itemData = listing.itemData as any;
    
    switch (listing.itemType) {
      case 'character':
        return {
          title: itemData?.name || 'Mystery Character',
          description: `${itemData?.rarity || 'Unknown'} ${itemData?.class || 'Character'} - Level ${itemData?.level || '?'}`,
          detailLines: [
            itemData?.stats ? `STR: ${itemData.stats.strength || 0} | AGI: ${itemData.stats.agility || 0}` : '',
            itemData?.stats ? `INT: ${itemData.stats.intelligence || 0} | VIT: ${itemData.stats.vitality || 0}` : '',
            itemData?.passiveSkills?.length > 0 ? `Skills: ${itemData.passiveSkills.map((s: any) => s.name).join(', ')}` : 'No special skills'
          ],
          image: itemData?.avatarUrl || 'https://images.unsplash.com/photo-1577095972620-2f389ca3abcd?w=150&h=150&fit=crop'
        };
      case 'aura':
        return {
          title: itemData?.name || 'Mystery Aura',
          description: `${itemData?.element || 'Unknown'} Element - Level ${itemData?.level || '?'}`,
          detailLines: [
            itemData?.statMultipliers ? `Multipliers: STR ×${itemData.statMultipliers.strength?.toFixed(1) || '1.0'}, AGI ×${itemData.statMultipliers.agility?.toFixed(1) || '1.0'}` : '',
            itemData?.statMultipliers ? `INT ×${itemData.statMultipliers.intelligence?.toFixed(1) || '1.0'}, VIT ×${itemData.statMultipliers.vitality?.toFixed(1) || '1.0'}` : '',
            itemData?.skills?.length > 0 ? `Skills: ${itemData.skills.map((s: any) => s.name).join(', ')}` : 'No skills'
          ],
          image: 'https://images.unsplash.com/photo-1618325500063-14cd8117369c?w=150&h=150&fit=crop'
        };
      case 'resource':
        return {
          title: itemData?.name || 'Rare Materials',
          description: `${itemData?.quantity || '?'} ${itemData?.type || 'material'} units`,
          detailLines: [
            itemData?.description || 'Valuable crafting resource'
          ],
          image: itemData?.iconUrl || 'https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop'
        };
      default:
        return {
          title: 'Market Item',
          description: 'A valuable item for your collection',
          detailLines: ['Unknown item details'],
          image: 'https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop'
        };
    }
  };

  const getCurrencyIcon = (currencyType: string) => {
    if (currencyType === 'forgeTokens') {
      return "https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=250&h=250&fit=crop";
    } else {
      return "https://images.unsplash.com/photo-1543486958-d783bfbf7f8e?w=250&h=250&fit=crop";
    }
  };

  const canAfford = (listing: BlackMarketListing) => {
    if (!user) return false;
    
    if (listing.currencyType === 'forgeTokens') {
      return (user.forgeTokens || 0) >= listing.price;
    } else {
      return (user.rogueCredits || 0) >= listing.price;
    }
  };

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-[#FF9D00] text-xl animate-pulse">Loading market data...</div>
      </div>
    );
  }

  return (
    <>
      <div className="mb-6">
        <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] mb-2">Black Market</h1>
        <p className="text-[#C8B8DB]/80">
          Purchase rare characters, auras, and valuable materials with your currencies.
        </p>
      </div>
      
      {/* Market Header */}
      <div className="bg-gradient-to-r from-[#432874]/60 to-[#1A1A2E] rounded-xl p-6 mb-6 relative overflow-hidden">
        <div className="absolute top-0 right-0 w-64 h-64 bg-[#FF9D00]/10 rounded-full -mr-32 -mt-32 blur-md"></div>
        <div className="absolute -bottom-16 -left-16 w-64 h-64 bg-[#00B9AE]/10 rounded-full blur-md"></div>
        
        <div className="flex flex-col md:flex-row md:justify-between md:items-center relative z-10">
          <div>
            <h2 className="text-2xl font-cinzel font-bold text-[#FF9D00] mb-2">Today's Offerings</h2>
            <div className="flex items-center text-[#C8B8DB]/70">
              <Clock className="h-4 w-4 mr-1" />
              <span>Refreshes in {getTimeUntilRefresh()}</span>
            </div>
          </div>
          
          <div className="flex items-center space-x-4 mt-4 md:mt-0">
            <div className="flex items-center bg-[#1A1A2E]/50 rounded-lg px-3 py-2">
              <img 
                src="https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=250&h=250&fit=crop" 
                alt="Forge Tokens" 
                className="w-6 h-6 rounded-full mr-2"
              />
              <span className="text-[#FFD700]">{user?.forgeTokens || 0}</span>
            </div>
            <div className="flex items-center bg-[#1A1A2E]/50 rounded-lg px-3 py-2">
              <img 
                src="https://images.unsplash.com/photo-1543486958-d783bfbf7f8e?w=250&h=250&fit=crop" 
                alt="Rogue Credits" 
                className="w-6 h-6 rounded-full mr-2"
              />
              <span className="text-[#C8B8DB]">{user?.rogueCredits || 0}</span>
            </div>
          </div>
        </div>
      </div>
      
      {/* Featured Premium Items Section */}
      {featuredPremiumListings.length > 0 && (
        <div className="mb-8">
          <div className="flex items-center mb-4">
            <Sparkles className="h-5 w-5 mr-2 text-[#FFD700]" />
            <h3 className="text-xl font-cinzel font-bold text-[#FFD700]">Featured Premium Items</h3>
          </div>
          
          <div className="bg-gradient-to-r from-[#432874]/40 to-[#1A1A2E] p-1 rounded-xl">
            <motion.div
              variants={container}
              initial="hidden"
              animate="show"
              className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 p-4"
            >
              {featuredPremiumListings.map(listing => {
                const itemInfo = getItemInfo(listing);
                
                return (
                  <motion.div
                    key={listing.id}
                    variants={item}
                    className="bg-[#1A1A2E] border border-[#FFD700]/30 rounded-xl overflow-hidden shadow-lg shadow-[#FFD700]/10"
                  >
                    <div className="relative h-40">
                      <img 
                        src={itemInfo.image} 
                        alt={itemInfo.title} 
                        className="w-full h-full object-cover"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-[#1A1A2E] to-transparent"></div>
                      <div className="absolute top-2 right-2">
                        <Badge className="bg-[#FFD700]/30 text-[#FFD700] border-[#FFD700]/50">
                          <Sparkles className="h-3 w-3 mr-1" />
                          Featured
                        </Badge>
                      </div>
                      <div className="absolute bottom-0 left-0 right-0 p-4">
                        <h3 className="text-xl font-cinzel font-bold text-[#FFD700]">{itemInfo.title}</h3>
                        <p className="text-sm text-[#C8B8DB]/80">{itemInfo.description}</p>
                      </div>
                    </div>
                    
                    <div className="p-4">
                      {/* Item details section */}
                      {itemInfo.detailLines && itemInfo.detailLines.length > 0 && (
                        <div className="mb-3 text-xs text-[#C8B8DB]/80 bg-[#1A1A2E]/80 rounded p-2 border border-[#FFD700]/20">
                          {itemInfo.detailLines.map((line, index) => 
                            line ? <div key={index} className="mb-1">{line}</div> : null
                          )}
                        </div>
                      )}
                      
                      <div className="flex justify-between items-center mb-4">
                        <div className="flex items-center">
                          <img 
                            src={getCurrencyIcon(listing.currencyType)} 
                            alt={listing.currencyType} 
                            className="w-6 h-6 rounded-full mr-2"
                          />
                          <span className="text-lg font-semibold text-[#FFD700]">{listing.price}</span>
                        </div>
                        
                        <Button
                          className={`${canAfford(listing) 
                            ? 'bg-[#FFD700] hover:bg-[#FFD700]/80 text-[#1A1A2E]' 
                            : 'bg-[#432874]/50 text-[#C8B8DB]/50 cursor-not-allowed'}`}
                          disabled={!canAfford(listing) || isSubmitting}
                          onClick={() => setConfirmDialog({ open: true, listing })}
                        >
                          <ShoppingBag className="h-4 w-4 mr-2" />
                          {canAfford(listing) ? 'Purchase' : 'Can\'t Afford'}
                        </Button>
                      </div>
                      
                      <div className="text-xs text-[#FFD700]/60 italic">
                        Limited time offer, exclusive premium item!
                      </div>
                    </div>
                  </motion.div>
                );
              })}
            </motion.div>
          </div>
        </div>
      )}
      
      {/* Regular Premium Items */}
      {regularPremiumListings.length > 0 && (
        <div className="mb-8">
          <div className="flex items-center mb-4">
            <Gem className="h-5 w-5 mr-2 text-[#FF9D00]" />
            <h3 className="text-xl font-cinzel font-bold text-[#FF9D00]">Premium Items</h3>
          </div>
          <motion.div
            variants={container}
            initial="hidden"
            animate="show"
            className="grid gap-6 md:grid-cols-2 lg:grid-cols-3"
          >
            {regularPremiumListings.map(listing => {
              const itemInfo = getItemInfo(listing);
              
              return (
                <motion.div
                  key={listing.id}
                  variants={item}
                  className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl overflow-hidden"
                >
                  <div className="relative h-40">
                    <img 
                      src={itemInfo.image} 
                      alt={itemInfo.title} 
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-[#1A1A2E] to-transparent"></div>
                    <div className="absolute top-2 right-2">
                      <Badge className="bg-[#FFD700]/20 text-[#FFD700] border-[#FFD700]/30">
                        Premium
                      </Badge>
                    </div>
                    <div className="absolute bottom-0 left-0 right-0 p-4">
                      <h3 className="text-xl font-cinzel font-bold text-[#FF9D00]">{itemInfo.title}</h3>
                      <p className="text-sm text-[#C8B8DB]/80">{itemInfo.description}</p>
                    </div>
                  </div>
                  
                  <div className="p-4">
                    {/* Item details section */}
                    {itemInfo.detailLines && itemInfo.detailLines.length > 0 && (
                      <div className="mb-3 text-xs text-[#C8B8DB]/80 bg-[#1A1A2E]/80 rounded p-2 border border-[#432874]/20">
                        {itemInfo.detailLines.map((line, index) => 
                          line ? <div key={index} className="mb-1">{line}</div> : null
                        )}
                      </div>
                    )}
                    
                    <div className="flex justify-between items-center mb-4">
                      <div className="flex items-center">
                        <img 
                          src={getCurrencyIcon(listing.currencyType)} 
                          alt={listing.currencyType} 
                          className="w-6 h-6 rounded-full mr-2"
                        />
                        <span className="text-lg font-semibold text-[#FFD700]">{listing.price}</span>
                      </div>
                      
                      <Button
                        className={`${canAfford(listing) 
                          ? 'bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]' 
                          : 'bg-[#432874]/50 text-[#C8B8DB]/50 cursor-not-allowed'}`}
                        disabled={!canAfford(listing) || isSubmitting}
                        onClick={() => setConfirmDialog({ open: true, listing })}
                      >
                        <ShoppingBag className="h-4 w-4 mr-2" />
                        {canAfford(listing) ? 'Purchase' : 'Can\'t Afford'}
                      </Button>
                    </div>
                    
                    <div className="text-xs text-[#C8B8DB]/60 italic">
                      Limited time offer, refreshes with the daily market.
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </motion.div>
        </div>
      )}
      
      {/* Standard Items */}
      <div className="mb-8">
        <div className="flex items-center mb-4">
          <Coins className="h-5 w-5 mr-2 text-[#C8B8DB]" />
          <h3 className="text-xl font-cinzel font-bold text-[#C8B8DB]">Standard Items</h3>
        </div>
        <motion.div
          variants={container}
          initial="hidden"
          animate="show"
          className="grid gap-6 md:grid-cols-2 lg:grid-cols-3"
        >
          {standardListings.length === 0 ? (
            <div className="col-span-full bg-[#1A1A2E] rounded-xl p-8 text-center">
              <ShoppingBag className="h-12 w-12 mx-auto mb-4 text-[#C8B8DB]/50" />
              <p className="text-[#C8B8DB]/80 mb-4">
                No standard items are available at the moment. Check back later!
              </p>
            </div>
          ) : (
            standardListings.map(listing => {
              const itemInfo = getItemInfo(listing);
              
              return (
                <motion.div
                  key={listing.id}
                  variants={item}
                  className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl overflow-hidden"
                >
                  <div className="relative h-40">
                    <img 
                      src={itemInfo.image} 
                      alt={itemInfo.title} 
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-[#1A1A2E] to-transparent"></div>
                    <div className="absolute top-2 right-2">
                      <Badge className="bg-[#C8B8DB]/20 text-[#C8B8DB] border-[#C8B8DB]/30">
                        Standard
                      </Badge>
                    </div>
                    <div className="absolute bottom-0 left-0 right-0 p-4">
                      <h3 className="text-xl font-cinzel font-bold text-[#C8B8DB]">{itemInfo.title}</h3>
                      <p className="text-sm text-[#C8B8DB]/80">{itemInfo.description}</p>
                    </div>
                  </div>
                  
                  <div className="p-4">
                    {/* Item details section */}
                    {itemInfo.detailLines && itemInfo.detailLines.length > 0 && (
                      <div className="mb-3 text-xs text-[#C8B8DB]/80 bg-[#1A1A2E]/80 rounded p-2 border border-[#432874]/20">
                        {itemInfo.detailLines.map((line, index) => 
                          line ? <div key={index} className="mb-1">{line}</div> : null
                        )}
                      </div>
                    )}
                    
                    <div className="flex justify-between items-center mb-4">
                      <div className="flex items-center">
                        <img 
                          src={getCurrencyIcon(listing.currencyType)} 
                          alt={listing.currencyType} 
                          className="w-6 h-6 rounded-full mr-2"
                        />
                        <span className="text-lg font-semibold text-[#C8B8DB]">{listing.price}</span>
                      </div>
                      
                      <Button
                        className={`${canAfford(listing) 
                          ? 'bg-[#432874] hover:bg-[#432874]/80' 
                          : 'bg-[#432874]/50 text-[#C8B8DB]/50 cursor-not-allowed'}`}
                        disabled={!canAfford(listing) || isSubmitting}
                        onClick={() => setConfirmDialog({ open: true, listing })}
                      >
                        <ShoppingBag className="h-4 w-4 mr-2" />
                        {canAfford(listing) ? 'Purchase' : 'Can\'t Afford'}
                      </Button>
                    </div>
                    
                    <div className="text-xs text-[#C8B8DB]/60 italic">
                      Available until the daily market refresh.
                    </div>
                  </div>
                </motion.div>
              );
            })
          )}
        </motion.div>
      </div>
      
      {/* Coming Soon: Player Listings */}
      <div className="mt-12 bg-[#1A1A2E] border border-[#432874]/30 rounded-xl p-6">
        <div className="flex items-center mb-4">
          <Users className="h-6 w-6 text-[#FF9D00] mr-2" />
          <h2 className="text-xl font-cinzel font-bold">Coming Soon: Player Listings</h2>
        </div>
        <p className="text-[#C8B8DB]/80 mb-4">
          Soon you'll be able to list your own characters, auras, and resources for sale to other players. Upgrade your Black Market level to unlock more listing slots!
        </p>
        
        <div className="bg-[#432874]/20 p-4 rounded-lg">
          <div className="flex items-center mb-2">
            <Shield className="h-5 w-5 text-[#00B9AE] mr-2" />
            <h3 className="font-semibold">Your Black Market Level: {user?.blackMarketLevel || 1}</h3>
          </div>
          <div className="text-sm text-[#C8B8DB]/80">
            Listing Slots: {user?.blackMarketLevel || 1} / 5 (max)
          </div>
        </div>
      </div>
      
      {/* Purchase Confirmation Dialog */}
      <Dialog open={confirmDialog.open} onOpenChange={(open) => setConfirmDialog({ ...confirmDialog, open })}>
        <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB]">
          <DialogHeader>
            <DialogTitle className="text-[#FF9D00] font-cinzel text-xl">Confirm Purchase</DialogTitle>
          </DialogHeader>
          
          {confirmDialog.listing && (
            <div className="py-4">
              <div className="flex items-center mb-4">
                <img 
                  src={getItemInfo(confirmDialog.listing).image}
                  alt={getItemInfo(confirmDialog.listing).title} 
                  className="w-16 h-16 rounded-lg object-cover mr-4"
                />
                <div>
                  <h3 className="font-semibold text-lg">{getItemInfo(confirmDialog.listing).title}</h3>
                  <p className="text-sm text-[#C8B8DB]/70">
                    {getItemInfo(confirmDialog.listing).description}
                  </p>
                </div>
              </div>
              
              {/* Display item details in the confirmation dialog */}
              {getItemInfo(confirmDialog.listing).detailLines && getItemInfo(confirmDialog.listing).detailLines.length > 0 && (
                <div className="mb-4 p-3 bg-[#432874]/10 rounded border border-[#432874]/30">
                  <h4 className="text-sm font-semibold mb-1">Item Details:</h4>
                  {getItemInfo(confirmDialog.listing).detailLines.map((line, index) => 
                    line ? <div key={index} className="text-xs text-[#C8B8DB]/80 mb-1">{line}</div> : null
                  )}
                </div>
              )}
              
              <div className="bg-[#432874]/20 p-4 rounded-lg mb-4">
                <div className="flex justify-between items-center">
                  <span>Price:</span>
                  <div className="flex items-center">
                    <img 
                      src={getCurrencyIcon(confirmDialog.listing.currencyType)} 
                      alt={confirmDialog.listing.currencyType} 
                      className="w-5 h-5 rounded-full mr-1"
                    />
                    <span className={confirmDialog.listing.currencyType === 'forgeTokens' ? 'text-[#FFD700]' : ''}>
                      {confirmDialog.listing.price}
                    </span>
                  </div>
                </div>
                
                <div className="flex justify-between items-center mt-2">
                  <span>Your Balance:</span>
                  <div className="flex items-center">
                    <img 
                      src={getCurrencyIcon(confirmDialog.listing.currencyType)} 
                      alt={confirmDialog.listing.currencyType} 
                      className="w-5 h-5 rounded-full mr-1"
                    />
                    <span className={confirmDialog.listing.currencyType === 'forgeTokens' ? 'text-[#FFD700]' : ''}>
                      {confirmDialog.listing.currencyType === 'forgeTokens' 
                        ? user?.forgeTokens || 0 
                        : user?.rogueCredits || 0
                      }
                    </span>
                  </div>
                </div>
                
                <div className="flex justify-between items-center mt-2 border-t border-[#432874]/50 pt-2">
                  <span>After Purchase:</span>
                  <div className="flex items-center">
                    <img 
                      src={getCurrencyIcon(confirmDialog.listing.currencyType)} 
                      alt={confirmDialog.listing.currencyType} 
                      className="w-5 h-5 rounded-full mr-1"
                    />
                    <span className={confirmDialog.listing.currencyType === 'forgeTokens' ? 'text-[#FFD700]' : ''}>
                      {confirmDialog.listing.currencyType === 'forgeTokens' 
                        ? (user?.forgeTokens || 0) - confirmDialog.listing.price
                        : (user?.rogueCredits || 0) - confirmDialog.listing.price
                      }
                    </span>
                  </div>
                </div>
              </div>
              
              <div className="flex items-start mb-4">
                <AlertTriangle className="h-5 w-5 text-[#FF9D00] mr-2 flex-shrink-0 mt-0.5" />
                <p className="text-sm">
                  This purchase cannot be undone. Are you sure you want to proceed?
                </p>
              </div>
            </div>
          )}
          
          <DialogFooter className="flex justify-end space-x-2">
            <Button 
              variant="outline" 
              className="bg-transparent border-[#432874]/50 hover:bg-[#432874]/20"
              onClick={() => setConfirmDialog({ open: false, listing: null })}
              disabled={isSubmitting}
            >
              Cancel
            </Button>
            <Button
              className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
              onClick={() => confirmDialog.listing && handlePurchase(confirmDialog.listing)}
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Processing...' : 'Confirm Purchase'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default BlackMarketView;

=== client/src/components/buildings/BuildingsView.tsx ===
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useQuery } from '@tanstack/react-query';
import { useGameStore } from '@/lib/zustandStore';
import { useDiscordAuth } from '@/lib/discordAuth';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { 
  Building2, 
  Hammer, 
  ShoppingBag, 
  User, 
  Gem, 
  List, 
  Clock, 
  Hourglass, 
  ArrowUp, 
  CheckCircle, 
  Lock, 
  Shield,
  Loader2,
  Plus,
  Wheat
} from 'lucide-react';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger,
  DialogFooter,
  DialogDescription
} from '@/components/ui/dialog';
import CountdownTimer from '../common/CountdownTimer';

import type { BuildingUpgrade } from '@shared/schema';

// Building definitions
const buildings = [
  {
    id: 'townhall',
    name: 'Townhall',
    description: 'The central building that determines the maximum level of other buildings and unlocks additional farming and dungeon slots.',
    icon: <Building2 className="h-6 w-6" />,
    color: 'text-[#FF9D00] bg-[#FF9D00]/10',
    benefits: [
      { level: 1, text: 'Unlocks basic buildings and 3 farming slots' },
      { level: 2, text: 'Unlocks 4th farming slot' },
      { level: 3, text: 'Unlocks 5th farming slot and increase active character tasks' },
      { level: 4, text: 'Unlocks 6th farming slot' },
      { level: 5, text: 'Unlocks Guild access and all farming slots' },
      { level: 10, text: 'Allows other buildings to reach level 19' },
      { level: 20, text: 'Allows other buildings to reach level 29' },
      { level: 30, text: 'Allows other buildings to reach level 39' },
      { level: 40, text: 'Allows other buildings to reach level 49' }
    ],
    maxLevel: 9,
    baseUpgradeCost: { rogueCredits: 1000, forgeTokens: 100 },
    upgradeTimeInMinutes: 60
  },
  {
    id: 'forge',
    name: 'Forge',
    description: 'Determines the maximum level of your characters and allows crafting and fusion of Auras.',
    icon: <Hammer className="h-6 w-6" />,
    color: 'text-[#DC143C] bg-[#DC143C]/10',
    benefits: [
      { level: 1, text: 'Craft level 1 Auras' },
      { level: 2, text: 'Characters can reach level 10' },
      { level: 3, text: 'Unlock Aura fusion up to level 5' },
      { level: 4, text: 'Characters can reach level 25' },
      { level: 5, text: 'Aura fusion up to level 10, characters can reach level 49' }
    ],
    maxLevel: 9,
    baseUpgradeCost: { rogueCredits: 800, forgeTokens: 80 },
    upgradeTimeInMinutes: 45
  },
  {
    id: 'blackmarket',
    name: 'Black Market',
    description: 'Enables purchasing of premium items and eventually listing your own items for sale.',
    icon: <ShoppingBag className="h-6 w-6" />,
    color: 'text-[#00B9AE] bg-[#00B9AE]/10',
    benefits: [
      { level: 1, text: 'Access to basic market offers' },
      { level: 2, text: 'Unlock 1 personal listing slot' },
      { level: 3, text: 'Unlock 2 personal listing slots' },
      { level: 4, text: 'Unlock 4 personal listing slots' },
      { level: 5, text: 'Unlock all 6 personal listing slots' }
    ],
    maxLevel: 9,
    baseUpgradeCost: { rogueCredits: 750, forgeTokens: 75 },
    upgradeTimeInMinutes: 40
  },
  {
    id: 'bountyboard',
    name: 'Bounty Board',
    description: 'Provides daily quests and missions that reward valuable resources and Soul Shards.',
    icon: <List className="h-6 w-6" />,
    color: 'text-[#228B22] bg-[#228B22]/10',
    benefits: [
      { level: 1, text: '3 daily quests (common)' },
      { level: 2, text: '4 daily quests (chance for rare)' },
      { level: 3, text: '5 daily quests (chance for epic)' },
      { level: 4, text: '6 daily quests (higher chance for epic)' },
      { level: 5, text: '7 daily quests (guaranteed epic)' }
    ],
    maxLevel: 9,
    baseUpgradeCost: { rogueCredits: 600, forgeTokens: 60 },
    upgradeTimeInMinutes: 30
  },
  {
    id: 'tavern',
    name: 'Tavern',
    description: 'Specialized trading post that offers character trades and generates energy/tickets for dungeons.',
    icon: <User className="h-6 w-6" />,
    color: 'text-[#4169E1] bg-[#4169E1]/10',
    benefits: [
      { level: 1, text: 'Basic trade options (3 common for 1 rare)' },
      { level: 2, text: 'Improved trade options (3 rare for 1 epic)' },
      { level: 3, text: 'Generate 2 dungeon tickets per day' },
      { level: 4, text: 'Generate 4 dungeon tickets per day' },
      { level: 5, text: 'Elite trade options (3 epic for 1 legendary)' }
    ],
    maxLevel: 9,
    baseUpgradeCost: { rogueCredits: 700, forgeTokens: 70 },
    upgradeTimeInMinutes: 35
  },
  {
    id: 'farming',
    name: 'Farming',
    description: 'Enables resource gathering from farming tasks with improved efficiency and rewards.',
    icon: <Wheat className="h-6 w-6" />,
    color: 'text-[#8BC34A] bg-[#8BC34A]/10',
    benefits: [
      { level: 1, text: 'Basic farming efficiency (normal yields)' },
      { level: 2, text: '10% faster farming task completion' },
      { level: 3, text: '20% increased resource yield from farming' },
      { level: 4, text: '40% faster farming task completion' },
      { level: 5, text: '60% increased resource yield from farming' }
    ],
    maxLevel: 9,
    baseUpgradeCost: { rogueCredits: 650, forgeTokens: 65 },
    upgradeTimeInMinutes: 30
  }
];

const BuildingsView = () => {
  const { user, fetchUser } = useDiscordAuth();
  const { toast } = useToast();
  const [selectedBuilding, setSelectedBuilding] = useState<any>(null);
  const [upgradeDialog, setUpgradeDialog] = useState<boolean>(false);
  const [skillTreeDialog, setSkillTreeDialog] = useState<boolean>(false);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [selectedSkill, setSelectedSkill] = useState<string | null>(null);
  
  // Fetch building upgrades
  const { data: buildingUpgrades = [], isLoading, refetch: refetchBuildings } = useQuery<BuildingUpgrade[]>({
    queryKey: ['/api/buildings'],
    refetchInterval: 60000 // Refresh every minute
  });

  // Get building upgrade by type
  const getBuildingByType = (buildingType: string) => {
    console.log("All building upgrades:", buildingUpgrades);
    
    // Map building IDs to the correct buildingType for the server
    const buildingTypeMap: Record<string, string> = {
      'townhall': 'townhall',
      'forge': 'forge',
      'blackmarket': 'blackmarket',
      'bountyboard': 'bountyBoard',
      'tavern': 'tavern',
      'farming': 'farming'
    };
    
    const normalizedType = buildingTypeMap[buildingType] || buildingType;
    console.log("Mapped building type:", buildingType, "->", normalizedType);
    
    // Check if we have a building of this type
    const found = buildingUpgrades.find(upgrade => upgrade.buildingType === normalizedType);
    if (found) {
      console.log("Found building data for:", normalizedType, found);
      return found;
    }
    
    // If no building data found, create a new building instance
    console.log("Creating new building data for:", normalizedType);
    return {
      id: 0,
      userId: 1,
      buildingType: normalizedType,
      currentLevel: 1,
      upgradeStartTime: null,
      upgradeEndTime: null,
      upgradeInProgress: false,
      unlockedSkills: [],
      availableSkillPoints: 1,
      skillDistribution: {}
    } as unknown as BuildingUpgrade;
  };

  // Calculate upgrade cost based on current level
  const calculateUpgradeCost = (building: any, currentLevel: number) => {
    const levelMultiplier = currentLevel;
    return {
      rogueCredits: building.baseUpgradeCost.rogueCredits * levelMultiplier,
      forgeTokens: building.baseUpgradeCost.forgeTokens * levelMultiplier
    };
  };

  // Check if user can afford upgrade
  const canAffordUpgrade = (building: any, currentLevel: number) => {
    if (!user) return false;
    
    const cost = calculateUpgradeCost(building, currentLevel);
    const userCredits = user.rogueCredits || 0;
    const userTokens = user.forgeTokens || 0;
    
    return userCredits >= cost.rogueCredits && userTokens >= cost.forgeTokens;
  };

  // Check if building is at max level based on townhall level
  const isMaxLevel = (building: any, currentLevel: number) => {
    // Get townhall level
    const townhall = getBuildingByType('townhall');
    const townhallLevel = townhall?.currentLevel || 1;
    
    // Fixed max level of 9 for all buildings regardless of Townhall level
    const maxAllowedLevel = 9;
    
    // For all buildings, check against the max allowed level (including townhall)
    return currentLevel >= maxAllowedLevel;
  };

  // Check if building is currently upgrading
  const isUpgrading = (buildingType: string) => {
    const building = getBuildingByType(buildingType);
    return building ? building.upgradeInProgress : false;
  };

  // Calculate upgrade progress
  const calculateUpgradeProgress = (building: BuildingUpgrade) => {
    if (!building.upgradeStartTime || !building.upgradeEndTime) return 0;
    
    const startTime = new Date(building.upgradeStartTime).getTime();
    const endTime = new Date(building.upgradeEndTime).getTime();
    const now = new Date().getTime();
    
    return Math.min(100, Math.max(0, ((now - startTime) / (endTime - startTime)) * 100));
  };

  // Import the TownhallSkillTree component
  const TownhallSkillTree = React.lazy(() => import('./TownhallSkillTree'));
  
  // Start building upgrade
  // Define the SkillTreeData type
  type SkillTreeData = {
    currentLevel: number;
    unlockedSkills: string[];
    availableSkillTree: Array<{
      id: string;
      name: string;
      description: string;
      maxLevel: number;
      path?: string;
      requires?: Record<string, number>;
    }>;
  };

  // Fetch building skill tree data with proper typing
  const { data: skillTreeData = { 
    currentLevel: 1, 
    unlockedSkills: [], 
    availableSkillTree: [] 
  } as SkillTreeData } = useQuery<SkillTreeData>({
    queryKey: selectedBuilding ? [`/api/buildings/skills/${selectedBuilding.buildingType}`] : [],
    enabled: !!selectedBuilding && skillTreeDialog
  });

  // Debug log for skill tree query with console logs
  if (selectedBuilding && skillTreeDialog) {
    console.log("Skill tree query for building:", selectedBuilding);
    console.log("Building type for skill tree:", selectedBuilding.buildingType);
    
    // Log error if undefined
    if (!selectedBuilding.buildingType) {
      console.error("Building type is undefined for:", selectedBuilding);
    }
  }

  // Allocate skill point
  const allocateSkill = async (skillId: string) => {
    if (!selectedBuilding) return;
    
    setIsSubmitting(true);
    
    try {
      const response = await apiRequest('POST', `/api/buildings/skills/${selectedBuilding.buildingType}`, {
        skillId: skillId
      });
      
      const data = await response.json();
      
      toast({
        title: "Skill Allocated",
        description: `You've allocated a skill point for ${selectedBuilding.name}.`,
      });
      
      setSelectedSkill(skillId);
      setSkillTreeDialog(false);
      
      // Continue with upgrade after skill allocation
      startUpgrade(skillId);
    } catch (error: any) {
      console.error('Error allocating skill:', error);
      toast({
        title: "Failed to Allocate Skill",
        description: error.message || "There was an error allocating the skill point.",
        variant: "destructive"
      });
      setIsSubmitting(false);
    }
  };

  // Start building upgrade
  const startUpgrade = async (allocatedSkill?: string) => {
    if (!selectedBuilding) return;
    
    // Make sure we're using the correct building type mapping
    const buildingTypeMap: Record<string, string> = {
      'townhall': 'townhall',
      'forge': 'forge',
      'blackmarket': 'blackmarket',
      'bountyboard': 'bountyBoard',
      'tavern': 'tavern',
      'farming': 'farming'
    };
    const normalizedType = buildingTypeMap[selectedBuilding.id] || selectedBuilding.id;
    
    // Always use the normalized type for consistency
    selectedBuilding.buildingType = normalizedType;
    console.log("Upgrade using buildingType:", selectedBuilding.buildingType);
    
    const buildingData = getBuildingByType(selectedBuilding.id);
    if (!buildingData) return;
    
    const currentLevel = buildingData.currentLevel;
    
    if (isMaxLevel(selectedBuilding, currentLevel)) {
      toast({
        title: "Max Level Reached",
        description: `${selectedBuilding.name} is already at maximum level.`,
        variant: "destructive"
      });
      setIsSubmitting(false);
      return;
    }
    
    if (isUpgrading(selectedBuilding.id)) {
      toast({
        title: "Already Upgrading",
        description: `${selectedBuilding.name} is already being upgraded.`,
        variant: "destructive"
      });
      setIsSubmitting(false);
      return;
    }
    
    if (!canAffordUpgrade(selectedBuilding, currentLevel)) {
      toast({
        title: "Insufficient Resources",
        description: "You don't have enough resources for this upgrade.",
        variant: "destructive"
      });
      setIsSubmitting(false);
      return;
    }
    
    try {
      console.log("Starting upgrade for building:", selectedBuilding.id);
      
      // If user has selected a skill to allocate, include it in the upgrade request
      const requestData: any = {
        buildingType: selectedBuilding.buildingType,
      };
      
      if (allocatedSkill) {
        requestData.allocatedSkill = allocatedSkill;
      }
      
      // Use apiRequest instead of fetch for better error handling
      const response = await apiRequest('POST', '/api/buildings/upgrade', requestData);
      
      // apiRequest already returns the parsed JSON data
      const data = response;
      console.log("Upgrade response:", data);
      
      toast({
        title: "Upgrade Started",
        description: `${selectedBuilding.name} is now being upgraded to level ${currentLevel + 1}.`,
      });
      
      // Reset selections and close dialog
      setSelectedBuilding(null);
      setUpgradeDialog(false);
      setSelectedSkill(null);
      
      // Refresh buildings and user data
      refetchBuildings();
      fetchUser();
    } catch (error: any) {
      console.error('Error starting upgrade:', error);
      toast({
        title: "Upgrade Failed",
        description: error.message || "There was an error starting the upgrade.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Complete building upgrade
  const completeUpgrade = async (buildingType: string) => {
    setIsSubmitting(true);
    
    try {
      // Map building IDs to the correct buildingType for the server
      const buildingTypeMap: Record<string, string> = {
        'townhall': 'townhall',
        'forge': 'forge', 
        'blackmarket': 'blackmarket',
        'bountyboard': 'bountyBoard',
        'tavern': 'tavern',
        'farming': 'farming'
      };
      
      const normalizedType = buildingTypeMap[buildingType] || buildingType;
      console.log(`Completing upgrade for building type: ${buildingType} -> ${normalizedType}`);
      
      // Call API to complete upgrade
      await apiRequest('POST', `/api/buildings/complete/${normalizedType}`, {});
      
      const building = buildings.find(b => b.id === buildingType);
      
      toast({
        title: "Upgrade Complete!",
        description: `${building?.name || buildingType} has been upgraded successfully.`,
      });
      
      // Refresh buildings and user data
      refetchBuildings();
      fetchUser();
    } catch (error) {
      console.error('Error completing upgrade:', error);
      toast({
        title: "Error",
        description: "Failed to complete the upgrade.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Check if a building is locked
  const isBuildingLocked = (buildingType: string) => {
    // No buildings should be locked - they can all be upgraded up to level 9
    return false;
  };

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-[#FF9D00] text-xl animate-pulse">Loading buildings data...</div>
      </div>
    );
  }

  // Check if there are any available skill points for a building
  const hasAvailableSkillPoints = (building: any) => {
    if (!building) {
      console.log("No building provided to hasAvailableSkillPoints");
      return false;
    }
    
    const buildingData = getBuildingByType(building.id);
    if (!buildingData) {
      console.log("No building data found for:", building.id);
      return false;
    }
    
    // Calculate available skill points based on building level and already allocated skills
    const totalSkillPoints = Math.max(0, buildingData.currentLevel - 1);
    const allocatedPoints = (buildingData.unlockedSkills?.length || 0);
    
    console.log("Building:", building.id);
    console.log("Current level:", buildingData.currentLevel);
    console.log("Total skill points:", totalSkillPoints);
    console.log("Allocated points:", allocatedPoints);
    console.log("Has available points:", totalSkillPoints > allocatedPoints);
    
    // Always return true for testing
    return true;
  };

  return (
    <>
      <div className="mb-6">
        <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] mb-2">Buildings</h1>
        <p className="text-[#C8B8DB]/80">
          Upgrade your buildings to unlock new features and increase your capabilities.
        </p>
      </div>
      
      {/* Skill Tree Dialog */}
      <Dialog open={skillTreeDialog} onOpenChange={(open) => {
        setSkillTreeDialog(open);
        if (!open) setSelectedSkill(null);
      }}>
        <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB] max-w-2xl overflow-y-auto max-h-[80vh]">
          <DialogHeader>
            <DialogTitle className="text-[#FF9D00] font-cinzel text-xl">
              {selectedBuilding?.name} Skill Tree
            </DialogTitle>
            <DialogDescription>
              Allocate skill points to enhance your building's capabilities. You gain skill points each time you level up your building.
            </DialogDescription>
          </DialogHeader>
          
          {skillTreeData ? (
            <div className="py-4">
              <div className="mb-6 bg-[#432874]/20 p-3 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="font-semibold">Available Skill Points:</span>
                  <Badge className="bg-[#FF9D00] text-[#1A1A2E]">
                    {skillTreeData.currentLevel - (skillTreeData.unlockedSkills?.length || 0)}
                  </Badge>
                </div>
              </div>
              
              <div className="grid gap-4">
                {skillTreeData.availableSkillTree?.map((skill: any) => {
                  const isUnlocked = skillTreeData.unlockedSkills?.includes(skill.id);
                  
                  return (
                    <div 
                      key={skill.id}
                      className={`border p-4 rounded-lg ${isUnlocked ? 'border-[#00B9AE] bg-[#00B9AE]/10' : 'border-[#432874]/30 bg-[#432874]/5'}`}
                    >
                      <div className="flex justify-between items-start">
                        <div>
                          <h3 className={`font-semibold ${isUnlocked ? 'text-[#00B9AE]' : 'text-[#FF9D00]'}`}>{skill.name}</h3>
                          <p className="text-sm mt-1">{skill.description}</p>
                        </div>
                        {isUnlocked ? (
                          <Badge className="bg-[#00B9AE]/20 text-[#00B9AE] border-[#00B9AE]/50">
                            <CheckCircle className="h-4 w-4 mr-1" /> Unlocked
                          </Badge>
                        ) : (
                          <Button
                            size="sm"
                            className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                            onClick={() => allocateSkill(skill.id)}
                            disabled={!hasAvailableSkillPoints(selectedBuilding) || isSubmitting}
                          >
                            {isSubmitting ? (
                              <><Loader2 className="h-4 w-4 mr-1 animate-spin" /> Allocating...</>
                            ) : (
                              <><Plus className="h-4 w-4 mr-1" /> Allocate Point</>
                            )}
                          </Button>
                        )}
                      </div>
                      {skill.maxLevel > 1 && (
                        <div className="mt-3 flex items-center">
                          <span className="text-xs mr-2">Level: 1/{skill.maxLevel}</span>
                          <Progress 
                            value={(1 / skill.maxLevel) * 100} 
                            className="h-1 flex-1 bg-[#1F1D36]" 
                          />
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          ) : (
            <div className="py-8 text-center">
              <Loader2 className="h-8 w-8 mx-auto animate-spin text-[#FF9D00]" />
              <p className="mt-4">Loading skill tree data...</p>
            </div>
          )}
          
          <DialogFooter>
            <Button 
              className="bg-[#432874] hover:bg-[#432874]/80"
              onClick={() => setSkillTreeDialog(false)}
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Buildings Grid */}
      <motion.div
        variants={container}
        initial="hidden"
        animate="show"
        className="grid gap-6 md:grid-cols-2 lg:grid-cols-3"
      >
        {buildings.map(building => {
          const buildingData = getBuildingByType(building.id);
          const currentLevel = buildingData?.currentLevel || 1;
          const isBeingUpgraded = buildingData?.upgradeInProgress || false;
          const locked = isBuildingLocked(building.id) && building.id !== 'townhall';
          
          return (
            <motion.div
              key={building.id}
              variants={item}
              className={`bg-[#1A1A2E] border border-[#432874]/30 rounded-xl overflow-hidden ${
                locked ? 'opacity-50' : ''
              }`}
            >
              <CardHeader className={`pb-2 ${building.color}`}>
                <div className="flex justify-between items-start">
                  <div className="flex items-center">
                    {building.icon}
                    <CardTitle className="ml-2 font-cinzel">{building.name}</CardTitle>
                  </div>
                  <Badge className="bg-[#432874]/30 text-[#C8B8DB] border-[#432874]/50">
                    Level {currentLevel}/{building.maxLevel}
                  </Badge>
                </div>
                <CardDescription>{building.description}</CardDescription>
              </CardHeader>
              
              <CardContent className="pt-4">
                {/* Current Benefits */}
                <div className="mb-4">
                  <h3 className="text-sm font-semibold mb-2">Current Benefits:</h3>
                  <div className="bg-[#432874]/20 p-3 rounded-lg">
                    <div className="flex items-center">
                      <CheckCircle className="h-4 w-4 text-[#00B9AE] mr-2 flex-shrink-0" />
                      <p className="text-sm text-[#C8B8DB]/90">
                        {building.benefits[currentLevel - 1]?.text || 'Basic functionality'}
                      </p>
                    </div>
                  </div>
                </div>
                
                {/* Next Level Benefits */}
                {!isMaxLevel(building, currentLevel) && (
                  <div className="mb-4">
                    <h3 className="text-sm font-semibold mb-2">Next Level Unlocks:</h3>
                    <div className="bg-[#432874]/10 p-3 rounded-lg">
                      <div className="flex items-center">
                        <ArrowUp className="h-4 w-4 text-[#FF9D00] mr-2 flex-shrink-0" />
                        <p className="text-sm text-[#C8B8DB]/80">
                          {building.benefits[currentLevel]?.text || 'Advanced functionality'}
                        </p>
                      </div>
                    </div>
                  </div>
                )}
                
                {/* Upgrade In Progress */}
                {isBeingUpgraded && buildingData?.upgradeEndTime && (
                  <div className="mt-4">
                    <div className="flex justify-between text-sm mb-1">
                      <span className="text-[#FF9D00] flex items-center">
                        <Hourglass className="h-4 w-4 mr-1" /> Upgrade in Progress
                      </span>
                      <CountdownTimer
                        endTime={buildingData.upgradeEndTime}
                        onComplete={() => completeUpgrade(building.id)}
                      />
                    </div>
                    <Progress 
                      value={calculateUpgradeProgress(buildingData)} 
                      className="h-2 bg-[#1F1D36] border-[#432874]/20" 
                    />
                    
                    {new Date(buildingData.upgradeEndTime) <= new Date() && (
                      <Button
                        className="w-full mt-3 bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                        onClick={() => completeUpgrade(building.id)}
                        disabled={isSubmitting}
                      >
                        <CheckCircle className="h-4 w-4 mr-2" />
                        {isSubmitting ? 'Completing...' : 'Complete Upgrade'}
                      </Button>
                    )}
                  </div>
                )}
              </CardContent>
              
              <CardFooter>
                {locked ? (
                  <div className="w-full flex items-center justify-center bg-[#432874]/20 py-2 rounded-lg text-sm text-[#C8B8DB]/70">
                    <Lock className="h-4 w-4 mr-2" />
                    Requires Townhall Upgrade
                  </div>
                ) : isBeingUpgraded ? (
                  <div className="w-full flex items-center justify-center bg-[#432874]/20 py-2 rounded-lg text-sm text-[#C8B8DB]/70">
                    <Hourglass className="h-4 w-4 mr-2" />
                    Upgrade in Progress
                  </div>
                ) : isMaxLevel(building, currentLevel) ? (
                  <div className="w-full flex items-center justify-center bg-[#00B9AE]/20 py-2 rounded-lg text-sm text-[#00B9AE]">
                    <Shield className="h-4 w-4 mr-2" />
                    Maximum Level Reached
                  </div>
                ) : hasAvailableSkillPoints(building) ? (
                  <Button
                    className="w-full bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                    onClick={() => {
                      // Ensure buildingType is set correctly with proper mapping
                      const buildingTypeMap: Record<string, string> = {
                        'townhall': 'townhall',
                        'forge': 'forge',
                        'blackmarket': 'blackmarket',
                        'bountyboard': 'bountyBoard',
                        'tavern': 'tavern',
      'farming': 'farming'
                      };
                      const normalizedType = buildingTypeMap[building.id] || building.id;
                      console.log(`Opening skill tree for ${building.name}, type: ${normalizedType}`);
                      
                      setSelectedBuilding({
                        ...building,
                        buildingType: normalizedType  // Map the UI ID to the backend buildingType
                      });
                      setSkillTreeDialog(true);
                    }}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Choose Skill Upgrade
                  </Button>
                ) : (
                  <Dialog open={upgradeDialog && selectedBuilding?.id === building.id} onOpenChange={(open) => {
                    setUpgradeDialog(open);
                    if (!open) setSelectedBuilding(null);
                  }}>
                    <DialogTrigger asChild>
                      <Button
                        className="w-full bg-[#432874] hover:bg-[#432874]/80"
                        onClick={() => setSelectedBuilding({
                          ...building,
                          buildingType: building.id
                        })}
                      >
                        <ArrowUp className="h-4 w-4 mr-2" />
                        Upgrade to Level {currentLevel + 1}
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB]">
                      <DialogHeader>
                        <DialogTitle className="text-[#FF9D00] font-cinzel text-xl">
                          Upgrade {building.name}
                        </DialogTitle>
                      </DialogHeader>
                      
                      {building.id === 'townhall' ? (
                        <div className="py-4">
                          <React.Suspense fallback={<div className="py-4 text-center">Loading Townhall upgrades...</div>}>
                            <TownhallSkillTree 
                              building={buildingData} 
                              currentLevel={currentLevel}
                              onUpgrade={(skillId) => {
                                allocateSkill(skillId);
                              }} 
                            />
                          </React.Suspense>
                        </div>
                      ) : (
                        <div className="py-4">
                          <div className="mb-4">
                            <h3 className="font-semibold mb-2">Upgrade to Level {currentLevel + 1}</h3>
                            <div className="bg-[#432874]/20 p-4 rounded-lg">
                              <p className="text-sm mb-3">
                                This upgrade will unlock:
                              </p>
                              <div className="flex items-center text-[#FF9D00] mb-4">
                                <ArrowUp className="h-4 w-4 mr-2 flex-shrink-0" />
                                <p className="text-sm">
                                  {building.benefits[currentLevel]?.text || 'Advanced functionality'}
                                </p>
                              </div>
                            
                              <div className="border-t border-[#432874]/30 pt-3">
                                <h4 className="text-sm font-semibold mb-2">Cost:</h4>
                                <div className="grid grid-cols-2 gap-4">
                                  <div className="flex items-center">
                                    <img 
                                      src="https://images.unsplash.com/photo-1543486958-d783bfbf7f8e?w=250&h=250&fit=crop" 
                                      alt="Rogue Credits" 
                                      className="w-5 h-5 rounded-full mr-2"
                                    />
                                    <div>
                                      <div className="text-sm">
                                        {calculateUpgradeCost(building, currentLevel).rogueCredits} Rogue Credits
                                      </div>
                                      <div className={`text-xs ${user && (user.rogueCredits || 0) >= calculateUpgradeCost(building, currentLevel).rogueCredits ? 'text-green-400' : 'text-red-400'}`}>
                                        You have: {user?.rogueCredits || 0}
                                      </div>
                                    </div>
                                  </div>
                                  
                                  <div className="flex items-center">
                                    <img 
                                      src="https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=250&h=250&fit=crop" 
                                      alt="Forge Tokens" 
                                      className="w-5 h-5 rounded-full mr-2"
                                    />
                                    <div>
                                      <div className="text-sm">
                                        {calculateUpgradeCost(building, currentLevel).forgeTokens} Forge Tokens
                                      </div>
                                      <div className={`text-xs ${user && (user.forgeTokens || 0) >= calculateUpgradeCost(building, currentLevel).forgeTokens ? 'text-green-400' : 'text-red-400'}`}>
                                        You have: {user?.forgeTokens || 0}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              
                              <div className="border-t border-[#432874]/30 pt-3 mt-3">
                                <div className="flex items-center">
                                  <Clock className="h-4 w-4 mr-2 text-[#C8B8DB]/70" />
                                  <span className="text-sm">
                                    Upgrade Time: {building.upgradeTimeInMinutes} minutes
                                  </span>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                      
                      <DialogFooter className="flex justify-end space-x-2">
                        <Button 
                          variant="outline" 
                          className="bg-transparent border-[#432874]/50 hover:bg-[#432874]/20"
                          onClick={() => {
                            setSelectedBuilding(null);
                            setUpgradeDialog(false);
                          }}
                          disabled={isSubmitting}
                        >
                          Cancel
                        </Button>
                        <Button
                          className={`${
                            canAffordUpgrade(building, currentLevel)
                              ? 'bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]'
                              : 'bg-[#432874]/50 text-[#C8B8DB]/50 cursor-not-allowed'
                          }`}
                          onClick={() => {
                            // Set the selected building first with the correct mapped buildingType
                            const buildingTypeMap: Record<string, string> = {
                              'townhall': 'townhall',
                              'forge': 'forge',
                              'blackmarket': 'blackmarket',
                              'bountyboard': 'bountyBoard',
                              'tavern': 'tavern',
                              'farming': 'farming'
                            };
                            const normalizedType = buildingTypeMap[building.id] || building.id;
                            console.log(`Setting building for upgrade: ${building.name}, type: ${normalizedType}`);
                            
                            setSelectedBuilding({
                              ...building,
                              buildingType: normalizedType
                            });
                            
                            if (hasAvailableSkillPoints(building)) {
                              console.log("Opening skill tree for:", building.id);
                              // Close the upgrade dialog and open the skill tree dialog
                              setUpgradeDialog(false);
                              setTimeout(() => {
                                setSkillTreeDialog(true);
                              }, 100);
                            } else {
                              console.log("Starting upgrade directly for:", building.id);
                              // If no available skill points, start upgrade directly
                              startUpgrade();
                            }
                          }}
                          disabled={!canAffordUpgrade(building, currentLevel) || isSubmitting}
                        >
                          {isSubmitting 
                            ? 'Starting Upgrade...' 
                            : canAffordUpgrade(building, currentLevel)
                              ? hasAvailableSkillPoints(building)
                                ? 'Choose Skill Upgrade'
                                : 'Start Upgrade'
                              : 'Not Enough Resources'
                          }
                        </Button>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                )}
              </CardFooter>
            </motion.div>
          );
        })}
      </motion.div>
      
      {/* Building Strategy Tips */}
      <div className="mt-12 bg-[#1A1A2E] border border-[#432874]/30 rounded-xl p-6">
        <h2 className="text-xl font-cinzel font-bold text-[#FF9D00] mb-4">Building Strategy Tips</h2>
        <div className="space-y-4">
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">1</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              Prioritize upgrading the <span className="text-[#FF9D00] font-semibold">Townhall</span> first as it serves as the foundation of your base and unlocks other buildings.
            </p>
          </div>
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">2</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              The <span className="text-[#DC143C] font-semibold">Forge</span> should be your second priority as it controls your character level cap and Aura capabilities.
            </p>
          </div>
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">3</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              The <span className="text-[#00B9AE] font-semibold">Black Market</span> is essential for trading and acquiring rare items at higher levels.
            </p>
          </div>
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">4</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              Balance your upgrades to maintain an optimal progression pace - having multiple low-level buildings is often better than a single high-level one.
            </p>
          </div>
        </div>
      </div>
    </>
  );
};

export default BuildingsView;


=== client/src/components/buildings/TownhallSkillTree.tsx ===
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useQuery } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Wheat, Hammer, Plus, Check, Building } from 'lucide-react';

const TownhallSkillTree = ({ 
  building, 
  currentLevel, 
  onUpgrade 
}: { 
  building: any; 
  currentLevel: number; 
  onUpgrade: (skillId: string) => void; 
}) => {
  const { toast } = useToast();
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [resourceChecked, setResourceChecked] = useState(false);
  
  const { data: skillTreeData, isLoading, error } = useQuery({
    queryKey: [`/api/buildings/skills/townhall`],
    enabled: !!building
  });
  
  // Debug logging
  console.log("TownhallSkillTree rendering:", { building, currentLevel });
  console.log("Skill tree data:", skillTreeData);
  console.log("Loading state:", isLoading);
  console.log("Error state:", error);

  useEffect(() => {
    // Check if player has "Building Plans" resource
    const checkForBuildingPlans = async () => {
      try {
        const resources = await apiRequest('GET', '/api/resources');
        if (Array.isArray(resources)) {
          const buildingPlans = resources.find((r: any) => r.name === 'Building Plans');
          setResourceChecked(true);
          if (!buildingPlans || buildingPlans.quantity < 1) {
            toast({
              title: "Building Plans Required",
              description: "You need Building Plans to upgrade your Townhall",
              variant: "destructive"
            });
          }
        }
      } catch (error) {
        console.error("Error checking for Building Plans:", error);
      }
    };
    
    checkForBuildingPlans();
  }, []);

  const availableUpgrades = React.useMemo(() => {
    if (!skillTreeData || !skillTreeData.availableSkillTree || !Array.isArray(skillTreeData.availableSkillTree) || !skillTreeData.unlockedSkills) {
      return { farmPlots: [], forgeSlots: [], specialUpgrades: [] };
    }
    
    const unlockedSkills = Array.isArray(skillTreeData.unlockedSkills) ? skillTreeData.unlockedSkills : [];
    
    return {
      farmPlots: skillTreeData.availableSkillTree.filter((skill: any) => 
        skill.id && typeof skill.id === 'string' && 
        skill.id.startsWith('th_farm_plot_') && 
        !unlockedSkills.includes(skill.id)
      ),
      forgeSlots: skillTreeData.availableSkillTree.filter((skill: any) => 
        skill.id && typeof skill.id === 'string' && 
        skill.id.startsWith('th_forge_slot_') && 
        !unlockedSkills.includes(skill.id)
      ),
      specialUpgrades: skillTreeData.availableSkillTree.filter((skill: any) => 
        skill.id && typeof skill.id === 'string' && 
        (skill.id.startsWith('th_crafting_station_') || skill.id.startsWith('th_farm_expansion_')) &&
        !unlockedSkills.includes(skill.id) &&
        (!skill.requires || (skill.requires.townhall_level && skill.requires.townhall_level <= currentLevel))
      )
    };
  }, [skillTreeData, currentLevel]);

  const specialUpgradesAvailable = currentLevel % 5 === 0 && availableUpgrades.specialUpgrades.length > 0;

  const handleUpgrade = () => {
    if (!selectedOption) {
      toast({
        title: "Selection Required",
        description: "Please select an option to upgrade",
        variant: "destructive"
      });
      return;
    }
    
    onUpgrade(selectedOption);
  };

  if (isLoading) {
    return <div className="p-4 text-center">Loading townhall upgrade options...</div>;
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center">
          <Building className="mr-2 h-5 w-5" />
          Townhall Upgrade Options
        </CardTitle>
        <CardDescription>
          Use Building Plans to upgrade your Townhall
        </CardDescription>
      </CardHeader>
      
      <CardContent>
        {specialUpgradesAvailable ? (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Special Upgrades (Townhall Level {currentLevel})</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {availableUpgrades.specialUpgrades.map((upgrade: any) => (
                <motion.div
                  key={upgrade.id}
                  whileHover={{ scale: 1.02 }}
                  className={`p-4 border rounded-lg cursor-pointer ${
                    selectedOption === upgrade.id ? 'border-2 border-primary' : 'border-border'
                  }`}
                  onClick={() => setSelectedOption(upgrade.id)}
                >
                  <div className="flex items-start justify-between">
                    <div>
                      <h4 className="font-medium">{upgrade.name}</h4>
                      <p className="text-sm text-muted-foreground">{upgrade.description}</p>
                    </div>
                    <div className="flex items-center justify-center w-6 h-6 rounded-full bg-primary/10">
                      {selectedOption === upgrade.id ? (
                        <Check className="h-4 w-4 text-primary" />
                      ) : (
                        <Plus className="h-4 w-4 text-primary" />
                      )}
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        ) : (
          <Tabs defaultValue="farm" className="w-full">
            <TabsList className="w-full grid grid-cols-2">
              <TabsTrigger value="farm" className="flex items-center">
                <Wheat className="mr-2 h-4 w-4" />
                Farm Plots
              </TabsTrigger>
              <TabsTrigger value="forge" className="flex items-center">
                <Hammer className="mr-2 h-4 w-4" />
                Forge Slots
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="farm" className="p-1 mt-4">
              <div className="grid grid-cols-1 gap-3">
                {availableUpgrades.farmPlots.length > 0 ? (
                  availableUpgrades.farmPlots.map((plot: any) => (
                    <motion.div
                      key={plot.id}
                      whileHover={{ scale: 1.02 }}
                      className={`p-4 border rounded-lg cursor-pointer ${
                        selectedOption === plot.id ? 'border-2 border-primary' : 'border-border'
                      }`}
                      onClick={() => setSelectedOption(plot.id)}
                    >
                      <div className="flex items-start justify-between">
                        <div>
                          <h4 className="font-medium">{plot.name}</h4>
                          <p className="text-sm text-muted-foreground">{plot.description}</p>
                        </div>
                        <div className="flex items-center justify-center w-6 h-6 rounded-full bg-primary/10">
                          {selectedOption === plot.id ? (
                            <Check className="h-4 w-4 text-primary" />
                          ) : (
                            <Plus className="h-4 w-4 text-primary" />
                          )}
                        </div>
                      </div>
                    </motion.div>
                  ))
                ) : (
                  <div className="text-center py-4 text-muted-foreground">
                    All farm plots have been unlocked
                  </div>
                )}
              </div>
            </TabsContent>
            
            <TabsContent value="forge" className="p-1 mt-4">
              <div className="grid grid-cols-1 gap-3">
                {availableUpgrades.forgeSlots.length > 0 ? (
                  availableUpgrades.forgeSlots.map((slot: any) => (
                    <motion.div
                      key={slot.id}
                      whileHover={{ scale: 1.02 }}
                      className={`p-4 border rounded-lg cursor-pointer ${
                        selectedOption === slot.id ? 'border-2 border-primary' : 'border-border'
                      }`}
                      onClick={() => setSelectedOption(slot.id)}
                    >
                      <div className="flex items-start justify-between">
                        <div>
                          <h4 className="font-medium">{slot.name}</h4>
                          <p className="text-sm text-muted-foreground">{slot.description}</p>
                        </div>
                        <div className="flex items-center justify-center w-6 h-6 rounded-full bg-primary/10">
                          {selectedOption === slot.id ? (
                            <Check className="h-4 w-4 text-primary" />
                          ) : (
                            <Plus className="h-4 w-4 text-primary" />
                          )}
                        </div>
                      </div>
                    </motion.div>
                  ))
                ) : (
                  <div className="text-center py-4 text-muted-foreground">
                    All forge slots have been unlocked
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        )}
      </CardContent>
      
      <CardFooter>
        <Button 
          className="w-full" 
          disabled={!selectedOption}
          onClick={handleUpgrade}
        >
          Confirm Selection
        </Button>
      </CardFooter>
    </Card>
  );
};

export default TownhallSkillTree;

=== client/src/components/bounty/BountyBoardSkillTree.tsx ===
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { Card } from '@/components/ui/card';
import { Plus, Minus, Lock } from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { BuildingUpgrade } from '@shared/schema';

// Define skill tree data
export const bountySkills = [
  {
    id: 'questRewards',
    name: 'Quest Rewards',
    description: 'Increases gold rewards from bounty quests by 10% per level',
    maxLevel: 5,
    requires: [],
    position: { x: 1, y: 1 },
    color: '#FFD700',
    icon: '💰'
  },
  {
    id: 'questSlots',
    name: 'Quest Slots',
    description: 'Increases available daily quest slots by 1 per level',
    maxLevel: 3,
    requires: [],
    position: { x: 3, y: 1 },
    color: '#4169E1',
    icon: '📜'
  },
  {
    id: 'resourceBonus',
    name: 'Resource Hunter',
    description: 'Increases resource rewards from bounty quests by 15% per level',
    maxLevel: 4,
    requires: ['questRewards'],
    position: { x: 1, y: 2 },
    color: '#32CD32',
    icon: '🌿'
  },
  {
    id: 'questDuration',
    name: 'Swift Hunter',
    description: 'Decreases quest completion time by 5% per level',
    maxLevel: 3,
    requires: ['questSlots'],
    position: { x: 3, y: 2 },
    color: '#1E90FF',
    icon: '⏱️'
  },
  {
    id: 'rareQuests',
    name: 'Rare Quests',
    description: 'Increases chance to find rare quests by 10% per level',
    maxLevel: 3,
    requires: ['resourceBonus', 'questDuration'],
    position: { x: 2, y: 3 },
    color: '#9932CC',
    icon: '✨'
  },
  {
    id: 'legendaryQuests',
    name: 'Legendary Pursuit',
    description: 'Unlocks legendary quests with exceptional rewards',
    maxLevel: 1,
    requires: ['rareQuests'],
    position: { x: 2, y: 4 },
    color: '#FF4500',
    icon: '🏆'
  }
];

interface BountyBoardSkillTreeProps {
  building?: BuildingUpgrade;
  onUpgrade?: () => void;
}

export const BountyBoardSkillTree = ({ building, onUpgrade }: BountyBoardSkillTreeProps) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [skillDistribution, setSkillDistribution] = useState<Record<string, number>>({});
  const [availablePoints, setAvailablePoints] = useState(0);

  // Fetch bounty board data
  const { data: bountyBoard, isLoading, isError } = useQuery({
    queryKey: ['/api/buildings/bountyBoard'],
    enabled: !!building
  });

  useEffect(() => {
    if (bountyBoard) {
      // Ensure skillDistribution is a valid object
      const distribution = bountyBoard.skillDistribution || {};
      setSkillDistribution(distribution as Record<string, number>);
      
      // Initialize skill levels that aren't set
      bountySkills.forEach(skill => {
        if (!(skill.id in distribution)) {
          setSkillDistribution(prev => ({ ...prev, [skill.id]: 0 }));
        }
      });
      
      // Set available points
      setAvailablePoints(bountyBoard.availableSkillPoints || 0);
    }
  }, [bountyBoard]);

  // Mutation to update skill distribution
  const updateSkillsMutation = useMutation({
    mutationFn: async (data: { skillDistribution: Record<string, number> }) => {
      return apiRequest('POST', '/api/buildings/skills/bountyBoard', data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/buildings/bountyBoard'] });
      toast({
        title: 'Skills Updated',
        description: 'Your skill points have been allocated successfully.',
      });
    },
    onError: (error: any) => {
      toast({
        title: 'Error',
        description: error.message || 'Failed to update skills. Please try again.',
        variant: 'destructive',
      });
    }
  });

  // Check if a skill can be allocated points
  const canAllocateSkill = (skillId: string): boolean => {
    if (availablePoints <= 0) return false;
    
    const skill = bountySkills.find(s => s.id === skillId);
    if (!skill) return false;
    
    // Check level cap
    const currentLevel = skillDistribution[skillId] || 0;
    if (currentLevel >= skill.maxLevel) return false;
    
    // Check prerequisites
    if (skill.requires.length > 0) {
      const hasPrerequisites = skill.requires.every(reqId => {
        const reqSkill = bountySkills.find(s => s.id === reqId);
        return reqSkill && (skillDistribution[reqId] || 0) > 0;
      });
      
      if (!hasPrerequisites) return false;
    }
    
    return true;
  };

  // Check if points can be removed from a skill
  const canDeallocateSkill = (skillId: string): boolean => {
    const currentLevel = skillDistribution[skillId] || 0;
    if (currentLevel <= 0) return false;
    
    // Check if any dependent skills are allocated
    const dependentSkills = bountySkills.filter(skill => 
      skill.requires.includes(skillId) && (skillDistribution[skill.id] || 0) > 0
    );
    
    return dependentSkills.length === 0;
  };

  // Handle allocating/deallocating skill points
  const handleSkillChange = (skillId: string, add: boolean) => {
    if (add && !canAllocateSkill(skillId)) return;
    if (!add && !canDeallocateSkill(skillId)) return;
    
    const newDistribution = { ...skillDistribution };
    newDistribution[skillId] = (newDistribution[skillId] || 0) + (add ? 1 : -1);
    
    // Update in the state
    setSkillDistribution(newDistribution);
    setAvailablePoints(prev => prev + (add ? -1 : 1));
    
    // Send to the server
    updateSkillsMutation.mutate({ skillDistribution: newDistribution });
  };
  
  if (isLoading) {
    return <div className="text-center p-8">Loading skill tree...</div>;
  }
  
  if (isError) {
    return <div className="text-center p-8 text-red-500">Failed to load skill tree. Please try again.</div>;
  }
  
  return (
    <div className="relative w-full">
      <Card className="bg-gradient-to-br from-[#2A1657] to-[#392179] border-[#4F3293] text-white p-6 mb-6">
        <h3 className="text-xl font-bold mb-4">Bounty Board Skill Tree</h3>
        <div className="flex justify-between items-center mb-4">
          <div>
            <span className="text-sm text-[#A390D3]">Building Level:</span>
            <span className="ml-2 font-semibold">{building?.currentLevel || 1}</span>
          </div>
          <div>
            <span className="text-sm text-[#A390D3]">Available Points:</span>
            <span className="ml-2 font-semibold text-amber-300">{availablePoints}</span>
          </div>
        </div>
        
        <div className="grid grid-cols-3 gap-4 relative">
          {bountySkills.map(skill => {
            const currentLevel = skillDistribution[skill.id] || 0;
            const maxLevel = skill.maxLevel;
            const progress = (currentLevel / maxLevel) * 100;
            const isLocked = skill.requires.some(reqId => !(skillDistribution[reqId] || 0));
            
            return (
              <div 
                key={skill.id}
                className={`relative col-start-${skill.position.x} row-start-${skill.position.y}`}
                style={{ gridColumn: skill.position.x, gridRow: skill.position.y }}
              >
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Card 
                        className={`p-3 w-full h-full flex flex-col items-center 
                          ${isLocked 
                            ? 'bg-gray-800/60 border-gray-700' 
                            : `bg-gradient-to-b from-${skill.color}/20 to-${skill.color}/5 border-${skill.color}/30`}`}
                      >
                        {isLocked && (
                          <div className="absolute inset-0 bg-black/50 flex items-center justify-center rounded-md z-10">
                            <Lock className="text-gray-500 w-6 h-6" />
                          </div>
                        )}
                        
                        <div className="text-2xl mb-2">{skill.icon}</div>
                        <div className="font-semibold text-center mb-1">{skill.name}</div>
                        <div className="text-xs text-center text-gray-300 mb-2">Level: {currentLevel}/{maxLevel}</div>
                        
                        <Progress value={progress} className="h-2 w-full mb-3" />
                        
                        <div className="flex justify-between w-full mt-auto">
                          <Button
                            variant="outline"
                            size="icon"
                            disabled={!canDeallocateSkill(skill.id)}
                            onClick={() => handleSkillChange(skill.id, false)}
                            className="h-7 w-7 rounded-full"
                          >
                            <Minus className="h-4 w-4" />
                          </Button>
                          
                          <Button
                            variant="outline"
                            size="icon"
                            disabled={!canAllocateSkill(skill.id)}
                            onClick={() => handleSkillChange(skill.id, true)}
                            className="h-7 w-7 rounded-full"
                          >
                            <Plus className="h-4 w-4" />
                          </Button>
                        </div>
                      </Card>
                    </TooltipTrigger>
                    <TooltipContent className="max-w-xs">
                      <div className="font-bold">{skill.name}</div>
                      <div className="text-sm">{skill.description}</div>
                      <div className="text-xs mt-1">
                        {skill.requires.length > 0 && (
                          <div className="mt-1">
                            <span className="font-semibold">Requires:</span> {skill.requires.join(', ')}
                          </div>
                        )}
                      </div>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
            );
          })}
          
          {/* Draw lines between connected skills */}
          <svg className="absolute inset-0 w-full h-full -z-10 text-white/20">
            {bountySkills.map(skill => 
              skill.requires.map(reqId => {
                const parentSkill = bountySkills.find(s => s.id === reqId);
                if (!parentSkill) return null;
                
                // Calculate line positions
                const startX = (parentSkill.position.x - 0.5) * 33.33 + '%';
                const startY = (parentSkill.position.y - 0.5) * 33.33 + '%';
                const endX = (skill.position.x - 0.5) * 33.33 + '%';
                const endY = (skill.position.y - 0.5) * 33.33 + '%';
                
                return (
                  <line 
                    key={`${skill.id}-${reqId}`}
                    x1={startX} 
                    y1={startY} 
                    x2={endX} 
                    y2={endY} 
                    stroke="currentColor" 
                    strokeWidth="2"
                    strokeDasharray={!(skillDistribution[reqId] || 0) ? "4" : "0"}
                  />
                );
              })
            )}
          </svg>
        </div>
      </Card>
    </div>
  );
};

// We use named export for consistency
// export default BountyBoardSkillTree is removed intentionally

=== client/src/components/bounty/BountyBoardView.tsx ===
import { useState } from 'react';
import { motion } from 'framer-motion';
import { useQuery } from '@tanstack/react-query';
import { useGameStore } from '@/lib/zustandStore';
import { useDiscordAuth } from '@/lib/discordAuth';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  List,
  CheckCircle2,
  Clock,
  Gem,
  Flame,
  Skull,
  Shield,
  Scroll,
  Package,
  ChevronDown,
  ChevronRight,
  Settings,
  Calendar,
  CalendarDays
} from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import type { BountyQuest, BuildingUpgrade } from '@shared/schema';
import { BountyBoardSkillTree } from './BountyBoardSkillTree';

// Sample quest templates for demonstrations
const questTemplates = [
  {
    type: 'farming',
    name: 'Resource Collector',
    description: 'Gather various resources from farming missions.',
    icon: <Gem className="h-5 w-5" />,
    color: 'bg-green-700/30 text-green-400 border-green-600/30',
    requirementTypes: ['Farm any resource', 'Complete farming missions']
  },
  {
    type: 'dungeon',
    name: 'Dungeon Delver',
    description: 'Clear dungeons and defeat enemies.',
    icon: <Skull className="h-5 w-5" />,
    color: 'bg-red-700/30 text-red-400 border-red-600/30',
    requirementTypes: ['Complete dungeon runs', 'Defeat specific enemies']
  },
  {
    type: 'crafting',
    name: 'Master Craftsman',
    description: 'Craft and fuse Auras at The Forge.',
    icon: <Flame className="h-5 w-5" />,
    color: 'bg-yellow-700/30 text-yellow-400 border-yellow-600/30',
    requirementTypes: ['Craft Auras', 'Perform Aura fusion']
  },
  {
    type: 'building',
    name: 'Town Developer',
    description: 'Upgrade buildings to improve your settlement.',
    icon: <Shield className="h-5 w-5" />,
    color: 'bg-blue-700/30 text-blue-400 border-blue-600/30',
    requirementTypes: ['Upgrade buildings', 'Reach specific building levels']
  }
];

// Helper function to format time remaining
const formatTimeRemaining = (expiresAt: string | Date) => {
  const expires = typeof expiresAt === 'string' ? new Date(expiresAt) : expiresAt;
  const now = new Date();
  const diffMs = expires.getTime() - now.getTime();
  
  if (diffMs <= 0) return 'Expired';
  
  const diffHrs = Math.floor(diffMs / (1000 * 60 * 60));
  const diffMins = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
  
  return `${diffHrs}h ${diffMins}m remaining`;
};

const BountyBoardView = () => {
  const { user } = useDiscordAuth();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [showSkillTree, setShowSkillTree] = useState<boolean>(false);
  
  // Fetch bounty quests
  const { data: bountyQuests = [], isLoading: questsLoading, refetch: refetchQuests } = useQuery<BountyQuest[]>({
    queryKey: ['/api/bounty/quests'],
    refetchInterval: 60000 // Refresh every minute
  });
  
  // Fetch bounty board building data
  const { data: bountyBoard, isLoading: buildingLoading } = useQuery<BuildingUpgrade>({
    queryKey: ['/api/buildings/bountyBoard']
  });

  // Get frequency badge style
  const getFrequencyStyle = (frequency?: string) => {
    if (!frequency) return 'bg-blue-700/30 text-blue-400 border-blue-600/30'; // Default to daily style
    
    switch (frequency.toLowerCase()) {
      case 'daily':
        return 'bg-blue-700/30 text-blue-400 border-blue-600/30';
      case 'weekly':
        return 'bg-purple-700/30 text-purple-400 border-purple-600/30';
      default:
        return 'bg-slate-700/30 text-slate-300 border-slate-600/30';
    }
  };

  // Get quest icon by type
  const getQuestIcon = (questName: string) => {
    const lowerName = questName.toLowerCase();
    
    if (lowerName.includes('resource') || lowerName.includes('farm')) {
      return <Gem className="h-5 w-5 text-green-400" />;
    } else if (lowerName.includes('dungeon') || lowerName.includes('enemy')) {
      return <Skull className="h-5 w-5 text-red-400" />;
    } else if (lowerName.includes('craft') || lowerName.includes('forge') || lowerName.includes('aura')) {
      return <Flame className="h-5 w-5 text-yellow-400" />;
    } else if (lowerName.includes('building') || lowerName.includes('upgrade')) {
      return <Shield className="h-5 w-5 text-blue-400" />;
    }
    
    return <Scroll className="h-5 w-5 text-purple-400" />;
  };

  // Calculate quest progress percentage
  const calculateProgress = (quest: BountyQuest) => {
    if (!quest.requirements || typeof quest.requirements !== 'object') return 0;
    
    let completed = 0;
    let total = 0;
    
    // Sum up all requirement progress
    Object.entries(quest.requirements).forEach(([key, requirement]) => {
      if (typeof requirement === 'object' && 'current' in requirement && 'target' in requirement) {
        completed += Math.min(requirement.current, requirement.target);
        total += requirement.target;
      }
    });
    
    return total > 0 ? Math.floor((completed / total) * 100) : 0;
  };

  // Check if quest is completed but not claimed
  const isCompletedNotClaimed = (quest: BountyQuest) => {
    return calculateProgress(quest) >= 100 && !quest.completed;
  };

  // Claim quest rewards
  const claimQuestRewards = async (questId: number) => {
    setIsSubmitting(true);
    
    try {
      // Call the API to claim the quest
      const response = await apiRequest('POST', `/api/bounty/quests/${questId}/claim`, {});
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to claim quest rewards');
      }
      
      const data = await response.json();
      
      // Generate reward description from API response
      const claimedQuest = bountyQuests.find(q => q.id === questId);
      let rewardDescription = '';
      
      if (claimedQuest?.rewards && typeof claimedQuest.rewards === 'object') {
        const rewards = claimedQuest.rewards as Record<string, any>;
        if ('rogueCredits' in rewards && rewards.rogueCredits) {
          rewardDescription += `${rewards.rogueCredits} Rogue Credits, `;
        }
        if ('forgeTokens' in rewards && rewards.forgeTokens) {
          rewardDescription += `${rewards.forgeTokens} Forge Tokens, `;
        }
        if ('soulShards' in rewards && rewards.soulShards) {
          rewardDescription += `${rewards.soulShards} Soul Shards, `;
        }
        if ('material' in rewards && rewards.material) {
          const mat = rewards.material as any;
          rewardDescription += `${mat.amount} ${mat.name}, `;
        }
        
        // Remove trailing comma and space
        rewardDescription = rewardDescription.replace(/, $/, '');
      }
      
      toast({
        title: "Quest Rewards Claimed!",
        description: `You received: ${rewardDescription || 'various rewards'}`,
      });
      
      // Refresh quests and user data
      refetchQuests();
    } catch (error) {
      console.error('Error claiming quest rewards:', error);
      toast({
        title: "Error",
        description: typeof error === 'object' && error instanceof Error ? error.message : "Failed to claim quest rewards.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  const isLoading = questsLoading || buildingLoading;
  
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-[#FF9D00] text-xl animate-pulse">Loading bounty board data...</div>
      </div>
    );
  }

  // Filter quests by frequency
  const dailyQuests = bountyQuests.filter(quest => !quest.frequency || (quest.frequency as any)?.toLowerCase() === 'daily');
  const weeklyQuests = bountyQuests.filter(quest => (quest.frequency as any)?.toLowerCase() === 'weekly');

  // Render quest card
  const renderQuestCard = (quest: BountyQuest) => {
    const progress = calculateProgress(quest);
    const canClaim = isCompletedNotClaimed(quest);
    
    return (
      <motion.div
        key={quest.id}
        variants={item}
        className={`bg-[#1F1D36]/50 border border-[#432874]/30 rounded-lg p-4 ${
          quest.completed ? 'opacity-50' : ''
        }`}
      >
        <div className="flex items-start">
          <div className="mr-3 mt-1">
            {getQuestIcon(quest.name)}
          </div>
          <div className="flex-1">
            <div className="flex justify-between items-start mb-1">
              <div>
                <h3 className="font-cinzel font-semibold text-lg">{quest.name}</h3>
                <p className="text-sm text-[#C8B8DB]/80">{quest.description}</p>
              </div>
              <Badge className={getFrequencyStyle((quest as any).frequency)}>
                {(quest as any).frequency || 'Daily'}
              </Badge>
            </div>
            
            {/* Requirements */}
            <div className="mt-3 space-y-2">
              {quest.requirements && typeof quest.requirements === 'object' && Object.entries(quest.requirements as Record<string, any>).map(([key, requirement]) => {
                if (typeof requirement === 'object' && 'current' in requirement && 'target' in requirement) {
                  const subProgress = Math.min(100, (requirement.current / requirement.target) * 100);
                  
                  return (
                    <div key={key} className="text-sm">
                      <div className="flex justify-between mb-1">
                        <span>{key}</span>
                        <span>
                          {requirement.current}/{requirement.target}
                        </span>
                      </div>
                      <Progress 
                        value={subProgress} 
                        className="h-1.5 bg-[#1A1A2E] border-[#432874]/20" 
                      />
                    </div>
                  );
                }
                return null;
              })}
            </div>
            
            {/* Rewards */}
            <div className="mt-4 pt-3 border-t border-[#432874]/30">
              <div className="flex justify-between items-center">
                <div className="flex items-center">
                  <Package className="h-4 w-4 text-[#00B9AE] mr-1" />
                  <span className="text-sm font-semibold">Rewards:</span>
                </div>
                
                {!quest.completed && (
                  <div className="text-xs text-[#C8B8DB]/70">
                    {progress < 100 
                      ? `Progress: ${progress}%` 
                      : 'Completed - Claim Rewards!'
                    }
                  </div>
                )}
              </div>
              
              <div className="flex flex-wrap gap-2 mt-2">
                {quest.rewards && typeof quest.rewards === 'object' && (
                  <>
                    {'rogueCredits' in quest.rewards && (quest.rewards as any).rogueCredits > 0 && (
                      <Badge className="bg-[#432874]/20 border-[#432874]/50">
                        {(quest.rewards as any).rogueCredits} Rogue Credits
                      </Badge>
                    )}
                    {'forgeTokens' in quest.rewards && (quest.rewards as any).forgeTokens > 0 && (
                      <Badge className="bg-[#FFD700]/20 text-[#FFD700] border-[#FFD700]/30">
                        {(quest.rewards as any).forgeTokens} Forge Tokens
                      </Badge>
                    )}
                    {'soulShards' in quest.rewards && (quest.rewards as any).soulShards > 0 && (
                      <Badge className="bg-[#00B9AE]/20 text-[#00B9AE] border-[#00B9AE]/30">
                        {(quest.rewards as any).soulShards} Soul Shards
                      </Badge>
                    )}
                    {'material' in quest.rewards && (quest.rewards as any).material && (
                      <Badge className="bg-[#C8B8DB]/20 text-[#C8B8DB] border-[#C8B8DB]/30">
                        {((quest.rewards as any).material as any).amount} {((quest.rewards as any).material as any).name}
                      </Badge>
                    )}
                    {'materials' in quest.rewards && Array.isArray((quest.rewards as any).materials) && 
                      (quest.rewards as any).materials.map((mat: any, idx: number) => (
                        <Badge key={idx} className="bg-[#C8B8DB]/20 text-[#C8B8DB] border-[#C8B8DB]/30">
                          {mat.amount} {mat.name}
                        </Badge>
                      ))
                    }
                  </>
                )}
              </div>
            </div>
            
            {/* Action Buttons */}
            <div className="mt-3 flex justify-end">
              {quest.completed ? (
                <div className="flex items-center text-sm text-[#00B9AE]">
                  <CheckCircle2 className="h-4 w-4 mr-1" />
                  Claimed
                </div>
              ) : canClaim ? (
                <Button
                  className="bg-[#00B9AE] hover:bg-[#00B9AE]/80"
                  onClick={() => claimQuestRewards(quest.id)}
                  disabled={isSubmitting}
                >
                  <CheckCircle2 className="h-4 w-4 mr-2" />
                  {isSubmitting ? 'Claiming...' : 'Claim Rewards'}
                </Button>
              ) : (
                <div className="text-sm text-[#C8B8DB]/70">
                  {formatTimeRemaining(quest.expiresAt)}
                </div>
              )}
            </div>
          </div>
        </div>
      </motion.div>
    );
  };
  
  return (
    <>
      <div className="mb-6">
        <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] mb-2">Bounty Board</h1>
        <p className="text-[#C8B8DB]/80">
          Complete daily and weekly quests to earn valuable rewards and progress your account.
        </p>
      </div>
      
      {/* Active Quests */}
      <motion.div
        variants={container}
        initial="hidden"
        animate="show"
      >
        <div className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl p-6 mb-8">
          <div className="flex items-center mb-4">
            <List className="h-6 w-6 text-[#FF9D00] mr-2" />
            <h2 className="text-xl font-cinzel font-bold">Active Quests</h2>
            <div className="ml-auto flex items-center text-sm text-[#C8B8DB]/70">
              <Clock className="h-4 w-4 mr-1" />
              <span>Daily Reset in 12h 34m</span>
            </div>
          </div>
          
          {bountyQuests.length === 0 ? (
            <div className="bg-[#1F1D36]/50 rounded-lg p-8 text-center">
              <Scroll className="h-12 w-12 mx-auto mb-4 text-[#C8B8DB]/50" />
              <p className="text-[#C8B8DB]/80 mb-4">
                No active quests available. Check back later or upgrade your Bounty Board to unlock more quests!
              </p>
            </div>
          ) : (
            <Tabs defaultValue="daily" className="w-full">
              <TabsList className="bg-[#1A1A2E] border border-[#432874]/30 mb-4">
                <TabsTrigger value="daily" className="data-[state=active]:bg-[#432874]/30">
                  <Calendar className="h-4 w-4 mr-2" />
                  Daily Quests
                </TabsTrigger>
                <TabsTrigger value="weekly" className="data-[state=active]:bg-[#432874]/30">
                  <CalendarDays className="h-4 w-4 mr-2" />
                  Weekly Quests
                </TabsTrigger>
              </TabsList>
              
              <TabsContent value="daily" className="space-y-4">
                {dailyQuests.length > 0 ? (
                  dailyQuests.map(renderQuestCard)
                ) : (
                  <div className="bg-[#1F1D36]/50 rounded-lg p-6 text-center">
                    <p className="text-[#C8B8DB]/80">No daily quests available right now.</p>
                  </div>
                )}
              </TabsContent>
              
              <TabsContent value="weekly" className="space-y-4">
                {weeklyQuests.length > 0 ? (
                  weeklyQuests.map(renderQuestCard)
                ) : (
                  <div className="bg-[#1F1D36]/50 rounded-lg p-6 text-center">
                    <p className="text-[#C8B8DB]/80">No weekly quests available right now.</p>
                  </div>
                )}
              </TabsContent>
            </Tabs>
          )}
        </div>
      </motion.div>
      
      {/* Bounty Board Level Info */}
      <div className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl p-6">
        <h2 className="text-xl font-cinzel font-bold text-[#FF9D00] mb-4">Bounty Board Information</h2>
        
        <div className="bg-[#1F1D36]/50 rounded-lg p-4 mb-6">
          <div className="flex items-center mb-2">
            <Shield className="h-5 w-5 text-[#00B9AE] mr-2" />
            <h3 className="font-semibold">Your Bounty Board Level: {user?.bountyBoardLevel || 1}</h3>
          </div>
          <p className="text-sm text-[#C8B8DB]/80 mb-3">
            Your Bounty Board level determines the quantity and quality of daily quests available.
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <div className="text-sm font-semibold mb-1">Daily Quest Slots:</div>
              <div className="flex">
                {Array.from({ length: 7 }).map((_, idx) => (
                  <div
                    key={idx}
                    className={`w-5 h-5 rounded-sm mr-1 flex items-center justify-center text-xs ${
                      idx < (user?.bountyBoardLevel || 1) * 1.5
                        ? 'bg-[#432874] text-[#C8B8DB]'
                        : 'bg-[#1A1A2E] text-[#432874]/50 border border-[#432874]/30'
                    }`}
                  >
                    {idx + 1}
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <div className="text-sm font-semibold mb-1">Quest Rarity Chance:</div>
              <div className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span>Legendary Quests:</span>
                  <span className={user?.bountyBoardLevel && user.bountyBoardLevel >= 10 ? 'text-yellow-400' : 'text-[#C8B8DB]/50'}>
                    {user?.bountyBoardLevel && user.bountyBoardLevel >= 10 ? 'Unlocked' : 'Locked (Lvl 10)'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Mythic Quests:</span>
                  <span className={user?.bountyBoardLevel && user.bountyBoardLevel >= 7 ? 'text-orange-400' : 'text-[#C8B8DB]/50'}>
                    {user?.bountyBoardLevel && user.bountyBoardLevel >= 7 ? 'Unlocked' : 'Locked (Lvl 7)'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Epic Quests:</span>
                  <span className={user?.bountyBoardLevel && user.bountyBoardLevel >= 5 ? 'text-purple-400' : 'text-[#C8B8DB]/50'}>
                    {user?.bountyBoardLevel && user.bountyBoardLevel >= 5 ? 'Unlocked' : 'Locked (Lvl 5)'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Rare Quests:</span>
                  <span className={user?.bountyBoardLevel && user.bountyBoardLevel >= 3 ? 'text-blue-400' : 'text-[#C8B8DB]/50'}>
                    {user?.bountyBoardLevel && user.bountyBoardLevel >= 3 ? 'Unlocked' : 'Locked (Lvl 3)'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Basic Quests:</span>
                  <span className="text-green-400">Always Available</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Bounty Board Skills Section */}
        <div className="mb-6">
          <Collapsible
            open={showSkillTree}
            onOpenChange={setShowSkillTree}
            className="w-full"
          >
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center">
                <Settings className="h-5 w-5 text-[#00B9AE] mr-2" />
                <h3 className="font-semibold">Bounty Board Skill Tree</h3>
                {bountyBoard && bountyBoard.availableSkillPoints && bountyBoard.availableSkillPoints > 0 && (
                  <Badge className="ml-3 bg-amber-500/20 text-amber-300 border-amber-400/30">
                    {bountyBoard.availableSkillPoints} Points Available
                  </Badge>
                )}
              </div>
              <CollapsibleTrigger asChild>
                <Button 
                  variant="ghost" 
                  size="sm"
                  className="hover:bg-[#432874]/30"
                >
                  {showSkillTree ? (
                    <div className="flex items-center">
                      <ChevronDown className="h-4 w-4 mr-1" />
                      <span className="text-sm">Hide Skill Tree</span>
                    </div>
                  ) : (
                    <div className="flex items-center">
                      <ChevronRight className="h-4 w-4 mr-1" />
                      <span className="text-sm">Show Skill Tree</span>
                    </div>
                  )}
                </Button>
              </CollapsibleTrigger>
            </div>
            
            <CollapsibleContent>
              <BountyBoardSkillTree building={bountyBoard} />
            </CollapsibleContent>
          </Collapsible>
          
          <Separator className="my-6 bg-[#432874]/30" />
        </div>
        
        {/* Tips and Information */}
        <div className="space-y-4">
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">1</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              Complete daily quests to earn valuable resources, Soul Shards, and currencies.
            </p>
          </div>
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">2</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              Weekly quests are more challenging but provide better rewards.
            </p>
          </div>
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">3</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              Upgrade your Bounty Board building to unlock more daily quests and higher-tier quest types.
            </p>
          </div>
          <div className="flex">
            <div className="bg-[#432874]/30 rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-[#FF9D00] font-bold">4</span>
            </div>
            <p className="text-[#C8B8DB]/80">
              Allocate skill points in the Bounty Board Skill Tree to enhance your quest rewards and unlock special abilities.
            </p>
          </div>
        </div>
      </div>
    </>
  );
};

export default BountyBoardView;

=== client/src/components/collections/CollectionsView.tsx ===
import { useState } from 'react';
import { motion } from 'framer-motion';
import { useGameStore } from '@/lib/zustandStore';
import { useDiscordAuth } from '@/lib/discordAuth';
import { useToast } from '@/hooks/use-toast';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { 
  Star, 
  Sparkles, 
  Swords, 
  Zap, 
  Shield, 
  Flame,
  Wind,
  Droplets,
  Mountain,
  Activity,
  BrainCircuit,
  Lightbulb
} from 'lucide-react';

const CollectionsView = () => {
  const [selectedTab, setSelectedTab] = useState('collections');
  const [basicRewardClaimed, setBasicRewardClaimed] = useState(false);
  const [rareRewardClaimed, setRareRewardClaimed] = useState(false);
  const [equippedTitle, setEquippedTitle] = useState<number | null>(1); // Default to first title
  
  const gameStore = useGameStore();
  const { user } = useDiscordAuth();
  const { toast } = useToast();
  
  // Mock perks data (for skill tree)
  const [perks, setPerks] = useState([
    {
      id: 1,
      name: "Essence Harvester",
      description: "Increases Essence gain by 10%",
      level: 2,
      maxLevel: 5,
      icon: <Zap className="h-8 w-8 text-[#4CAF50]" />,
      effect: "+10% Essence per level",
      cost: 1,
      position: { x: 1, y: 1 }
    },
    {
      id: 2,
      name: "Combat Specialist",
      description: "Increases all character stats by 5%",
      level: 1,
      maxLevel: 5,
      icon: <Swords className="h-8 w-8 text-[#DC143C]" />,
      effect: "+5% Character Stats per level",
      cost: 1, 
      position: { x: 2, y: 1 }
    },
    {
      id: 3,
      name: "Forge Master",
      description: "Reduces Aura forging time by 10%",
      level: 0,
      maxLevel: 3,
      icon: <Flame className="h-8 w-8 text-[#FF9D00]" />,
      effect: "-10% Forging Time per level",
      cost: 1,
      position: { x: 3, y: 1 }
    },
    {
      id: 4,
      name: "Resilient Mind",
      description: "Increases Focus stat by 15%",
      level: 0,
      maxLevel: 3,
      icon: <BrainCircuit className="h-8 w-8 text-[#9C27B0]" />,
      effect: "+15% Focus per level",
      cost: 1,
      position: { x: 2, y: 2 }
    },
    {
      id: 5,
      name: "Vital Energies",
      description: "Increases Vitality stat by 15%",
      level: 0,
      maxLevel: 3,
      icon: <Activity className="h-8 w-8 text-[#F44336]" />,
      effect: "+15% Vitality per level",
      cost: 1,
      position: { x: 1, y: 2 }
    },
    {
      id: 6,
      name: "Strategic Mind",
      description: "Increases Defense stat by 15%",
      level: 0,
      maxLevel: 3,
      icon: <Shield className="h-8 w-8 text-[#2196F3]" />,
      effect: "+15% Defense per level",
      cost: 1,
      position: { x: 3, y: 2 }
    },
    {
      id: 7,
      name: "Enlightened Spirit",
      description: "Increases all resource gathering by 20%",
      level: 0,
      maxLevel: 2,
      icon: <Lightbulb className="h-8 w-8 text-[#FFD700]" />,
      effect: "+20% Resource Gathering per level",
      cost: 2,
      position: { x: 2, y: 3 }
    }
  ]);
  
  // Mock account power calculation
  const accountPower = 8750; // This would be calculated based on characters, auras and buildings
  const skillPoints = Math.floor(accountPower / 1000) - perks.reduce((total, perk) => total + perk.level, 0);
  
  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  // Mock aura collection data
  const auraCollection = [
    // Basic Collection - Fire, Water, Earth, Wind
    {
      id: 1,
      type: "Fire",
      discovered: true,
      icon: <Flame className="h-12 w-12 text-[#FF4500]" />,
      description: "Fiery auras enhance attack power and focus.",
      unlockMethod: "Automatically unlocked",
      collection: "basic"
    },
    {
      id: 2,
      type: "Water",
      discovered: true,
      icon: <Droplets className="h-12 w-12 text-[#1E90FF]" />,
      description: "Water auras enhance defense and resilience.",
      unlockMethod: "Automatically unlocked",
      collection: "basic"
    },
    {
      id: 3,
      type: "Earth",
      discovered: true,
      icon: <Mountain className="h-12 w-12 text-[#8B4513]" />,
      description: "Earth auras enhance vitality and defense.",
      unlockMethod: "Automatically unlocked",
      collection: "basic"
    },
    {
      id: 4,
      type: "Wind",
      discovered: true,
      icon: <Wind className="h-12 w-12 text-[#32CD32]" />,
      description: "Wind auras enhance speed and accuracy.",
      unlockMethod: "Automatically unlocked",
      collection: "basic"
    },
    
    // Rare Collection - Mystery Auras
    {
      id: 5,
      type: "Aura of Growth",
      discovered: false,
      icon: <Sparkles className="h-12 w-12 text-[#9C27B0]" />,
      description: "A mysterious aura that enhances growth and resource collection. 'From earth and sky, abundance flows, when patient hands plant what they know.'",
      unlockMethod: "Complete 20 farming tasks with Level 5+ Characters",
      collection: "rare"
    },
    {
      id: 6,
      type: "Wrath of Nature",
      discovered: false,
      icon: <Activity className="h-12 w-12 text-[#8BC34A]" />,
      description: "A powerful nature-based aura with devastating effects. 'When mountains tremble and waters part, nature's fury finds its mark.'",
      unlockMethod: "Clear 10 Elite Dungeons with Earth Aura-equipped Characters",
      collection: "rare"
    },
    {
      id: 7,
      type: "Ethereal Whisper",
      discovered: false,
      icon: <BrainCircuit className="h-12 w-12 text-[#7B68EE]" />,
      description: "A mystical aura that enhances magical abilities. 'Secrets whispered on ancient winds, heard only by the enlightened mind.'",
      unlockMethod: "Collect all basic elemental auras and reach Account Power 5000+",
      collection: "rare"
    }
  ];

  // Mock titles data
  const titles = [
    {
      id: 1,
      name: "The Collector",
      description: "Collect 50 unique items",
      progress: 70,
      icon: <Star className="h-8 w-8 text-[#FFD700]" />,
      requirements: "50/50 unique items collected",
      status: "Unlocked"
    },
    {
      id: 2,
      name: "Dungeon Conqueror",
      description: "Complete all legendary dungeons",
      progress: 25,
      icon: <Swords className="h-8 w-8 text-[#DC143C]" />,
      requirements: "2/8 legendary dungeons completed",
      status: "Locked"
    },
    {
      id: 3,
      name: "Forge Grandmaster",
      description: "Create 10 legendary Auras",
      progress: 40,
      icon: <Flame className="h-8 w-8 text-[#FF9D00]" />,
      requirements: "4/10 legendary Auras created",
      status: "Locked"
    }
  ];

  const handleUpgradePerk = (perkId: number) => {
    // API call to upgrade a perk would go here
    setPerks(perks.map(perk => {
      if (perk.id === perkId && perk.level < perk.maxLevel) {
        return { ...perk, level: perk.level + 1 };
      }
      return perk;
    }));
    
    toast({
      title: "Skill Allocated",
      description: "Your account-wide bonus has been increased.",
    });
  };
  
  const handleClaimReward = (collectionType: string) => {
    // In a real implementation, this would make an API call to claim the collection reward
    
    // Mock rewards based on collection type
    let rewardTitle = "";
    let rewardDescription = "";
    
    if (collectionType === "basic") {
      rewardTitle = "Basic Collection Reward Claimed!";
      rewardDescription = "You received 5 Basic Kleos Shards for completing the Basic Element collection.";
      setBasicRewardClaimed(true);
    } else if (collectionType === "rare") {
      rewardTitle = "Rare Collection Reward Claimed!";
      rewardDescription = "You received 10 Rare Kleos Shards and 500 Forge Tokens for completing the Rare collection.";
      setRareRewardClaimed(true);
    }
    
    toast({
      title: rewardTitle,
      description: rewardDescription,
    });
  };
  
  const handleEquipTitle = (titleId: number) => {
    // API call to equip a title would go here
    setEquippedTitle(titleId);
    const title = titles.find(t => t.id === titleId);
    
    toast({
      title: "Title Equipped",
      description: `You are now known as ${title?.name}.`,
    });
  };

  return (
    <>
      <div className="mb-6">
        <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] mb-2">Collections</h1>
        <p className="text-[#C8B8DB]/80">
          Discover elemental auras, unlock account-wide bonuses, and earn exclusive titles.
        </p>
      </div>
      
      {/* Account Power Display */}
      <div className="mb-8 bg-[#1A1A2E] border border-[#432874]/30 rounded-xl p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-cinzel font-bold text-[#FF9D00]">Account Power</h2>
          <div className="bg-[#432874]/30 px-4 py-2 rounded-lg">
            <span className="text-2xl font-bold text-[#FF9D00]">{accountPower}</span>
          </div>
        </div>
        
        <div className="flex justify-between items-center mb-2">
          <span className="text-[#C8B8DB]/80">Available Skill Points</span>
          <span className="text-[#00B9AE] font-semibold">{skillPoints}</span>
        </div>
        
        <div className="h-2 bg-[#1F1D36] rounded-full overflow-hidden mb-4">
          <div 
            className="h-full bg-[#FF9D00]" 
            style={{ width: `${((accountPower % 1000) / 1000) * 100}%` }}
          ></div>
        </div>
        
        <p className="text-[#C8B8DB]/80 text-sm">
          Account Power combines the total stats of all Characters with their Aura Stat Multipliers plus 100 points for each building Level. Earn 1 Skill Point for every 1,000 Account Power.
        </p>
      </div>
      
      {/* Collection Tabs */}
      <Tabs defaultValue="collections" value={selectedTab} onValueChange={setSelectedTab} className="w-full">
        <TabsList className="bg-[#432874]/20 mb-6">
          <TabsTrigger value="collections" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
            <Star className="h-4 w-4 mr-2" />
            Collections
          </TabsTrigger>
          <TabsTrigger value="perks" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
            <Sparkles className="h-4 w-4 mr-2" />
            Account Perks
          </TabsTrigger>
          <TabsTrigger value="titles" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
            <Shield className="h-4 w-4 mr-2" />
            Titles
          </TabsTrigger>
        </TabsList>
        
        {/* Collections Tab */}
        <TabsContent value="collections">
          <div className="mb-6">
            <h3 className="text-xl font-cinzel font-bold text-[#FF9D00] mb-4">Aura Collection</h3>
            <p className="text-[#C8B8DB]/80 mb-6">
              Discover and collect elemental auras to enhance your power and unlock special abilities.
            </p>
          </div>
          
          {/* Basic Collection Section */}
          <div className="mb-10">
            <div className="flex justify-between items-center mb-4">
              <h4 className="text-lg font-cinzel font-bold text-[#FF9D00]">Basic Collection</h4>
              
              {!basicRewardClaimed && (
                <Button 
                  className="bg-[#FFD700]/20 hover:bg-[#FFD700]/30 text-[#FFD700] border border-[#FFD700]/30"
                  size="sm"
                  onClick={() => handleClaimReward('basic')}
                >
                  <Star className="h-4 w-4 mr-2" />
                  Claim Reward
                </Button>
              )}
              
              {basicRewardClaimed && (
                <Badge className="bg-[#00B9AE]/20 text-[#00B9AE]">
                  <Sparkles className="h-4 w-4 mr-2" />
                  Reward Claimed
                </Badge>
              )}
            </div>
            
            <motion.div
              variants={container}
              initial="hidden"
              animate="show"
              className="grid gap-6 md:grid-cols-2"
            >
              {auraCollection.filter(aura => aura.collection === "basic").map(aura => (
                <motion.div
                  key={aura.id}
                  variants={item}
                  className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl overflow-hidden"
                >
                  <div className="flex items-stretch">
                    <div className="bg-[#1F1D36] p-6 flex items-center justify-center">
                      <div className="bg-[#432874]/30 p-4 rounded-full">
                        {aura.icon}
                      </div>
                    </div>
                    
                    <div className="p-6 flex-1">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="text-lg font-cinzel font-bold text-[#FF9D00]">{aura.type} Aura</h4>
                        <Badge className={`${aura.discovered ? 'bg-[#432874]/30 text-[#C8B8DB]' : 'bg-[#FF9D00]/30 text-[#FF9D00]'} border-[#432874]/50`}>
                          {aura.discovered ? 'Discovered' : 'Locked'}
                        </Badge>
                      </div>
                      
                      <p className="text-[#C8B8DB]/80 mb-4 text-sm">
                        {aura.description}
                      </p>
                      
                      {aura.discovered && (
                        <div className="bg-[#432874]/20 p-3 rounded-lg">
                          <div className="flex items-center">
                            <Star className="h-4 w-4 text-[#FFD700] mr-2 flex-shrink-0" />
                            <p className="text-sm text-[#C8B8DB]/90">
                              Collection Reward: Collect all 4 elemental auras to earn 5 Basic Kleos Shards
                            </p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </motion.div>
              ))}
            </motion.div>
          </div>
          
          {/* Rare Collection Section */}
          <div>
            <div className="flex justify-between items-center mb-4">
              <h4 className="text-lg font-cinzel font-bold text-[#FF9D00]">Rare Collection</h4>
              
              {!rareRewardClaimed && auraCollection.filter(a => a.collection === "rare" && a.discovered).length === auraCollection.filter(a => a.collection === "rare").length && (
                <Button 
                  className="bg-[#FFD700]/20 hover:bg-[#FFD700]/30 text-[#FFD700] border border-[#FFD700]/30"
                  size="sm"
                  onClick={() => handleClaimReward('rare')}
                >
                  <Star className="h-4 w-4 mr-2" />
                  Claim Reward
                </Button>
              )}
              
              {rareRewardClaimed && (
                <Badge className="bg-[#00B9AE]/20 text-[#00B9AE]">
                  <Sparkles className="h-4 w-4 mr-2" />
                  Reward Claimed
                </Badge>
              )}
            </div>
            
            <motion.div
              variants={container}
              initial="hidden"
              animate="show"
              className="grid gap-6 md:grid-cols-2"
            >
              {auraCollection.filter(aura => aura.collection === "rare").map(aura => (
                <motion.div
                  key={aura.id}
                  variants={item}
                  className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl overflow-hidden"
                >
                  <div className="flex items-stretch">
                    <div className="bg-[#1F1D36] p-6 flex items-center justify-center">
                      <div className="bg-[#432874]/30 p-4 rounded-full">
                        {aura.icon}
                      </div>
                    </div>
                    
                    <div className="p-6 flex-1">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="text-lg font-cinzel font-bold text-[#FF9D00]">
                          {aura.discovered ? `${aura.type} Aura` : "Mystery Aura"}
                        </h4>
                        <Badge className={`${aura.discovered ? 'bg-[#432874]/30 text-[#C8B8DB]' : 'bg-[#FF9D00]/30 text-[#FF9D00]'} border-[#432874]/50`}>
                          {aura.discovered ? 'Discovered' : 'Locked'}
                        </Badge>
                      </div>
                      
                      <p className="text-[#C8B8DB]/80 mb-4 text-sm">
                        {aura.discovered 
                          ? aura.description 
                          : aura.description.match(/'([^']+)'/)?.[1] + "..." || "A mysterious aura waiting to be discovered..."}
                      </p>
                      
                      <div className="bg-[#432874]/20 p-3 rounded-lg">
                        <div className="flex items-center">
                          {aura.discovered ? (
                            <>
                              <Star className="h-4 w-4 text-[#FFD700] mr-2 flex-shrink-0" />
                              <p className="text-sm text-[#C8B8DB]/90">
                                Special Aura with unique abilities
                              </p>
                            </>
                          ) : (
                            <>
                              <Sparkles className="h-4 w-4 text-[#FF9D00] mr-2 flex-shrink-0" />
                              <p className="text-sm text-[#C8B8DB]/90">
                                Complete specific in-game challenges to unlock this aura
                              </p>
                            </>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </motion.div>
          </div>
        </TabsContent>
        
        {/* Account Perks Tab - Skill Tree */}
        <TabsContent value="perks">
          <div className="mb-6">
            <h3 className="text-xl font-cinzel font-bold text-[#FF9D00] mb-2">Account Perks</h3>
            <p className="text-[#C8B8DB]/80 mb-2">
              Allocate your Skill Points to enhance your account-wide abilities.
            </p>
            <div className="flex justify-between items-center bg-[#1F1D36] p-3 rounded-lg">
              <span className="text-[#C8B8DB]">Available Skill Points:</span>
              <span className="text-[#00B9AE] font-bold">{skillPoints}</span>
            </div>
          </div>
          
          {/* Skill Tree Grid */}
          <div className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl p-6 mb-6">
            <div className="relative" style={{ minHeight: '500px' }}>
              {/* Skill connections (lines) */}
              <svg className="absolute inset-0 w-full h-full" style={{ zIndex: 0 }}>
                {/* Tier 1 to Tier 2 connections */}
                <line x1="25%" y1="25%" x2="25%" y2="50%" stroke="#432874" strokeWidth="2" />
                <line x1="50%" y1="25%" x2="25%" y2="50%" stroke="#432874" strokeWidth="2" />
                <line x1="50%" y1="25%" x2="50%" y2="50%" stroke="#432874" strokeWidth="2" />
                <line x1="50%" y1="25%" x2="75%" y2="50%" stroke="#432874" strokeWidth="2" />
                <line x1="75%" y1="25%" x2="75%" y2="50%" stroke="#432874" strokeWidth="2" />
                
                {/* Tier 2 to Tier 3 connections */}
                <line x1="25%" y1="50%" x2="50%" y2="75%" stroke="#432874" strokeWidth="2" />
                <line x1="50%" y1="50%" x2="50%" y2="75%" stroke="#432874" strokeWidth="2" />
                <line x1="75%" y1="50%" x2="50%" y2="75%" stroke="#432874" strokeWidth="2" />
              </svg>
              
              {/* Skill Nodes */}
              <div className="grid grid-rows-3 gap-8" style={{ position: 'relative', zIndex: 1 }}>
                {/* Row 1 */}
                <div className="flex justify-around">
                  {perks.filter(p => p.position.y === 1).map(perk => (
                    <motion.div
                      key={perk.id}
                      whileHover={{ scale: 1.05 }}
                      className="bg-[#1F1D36] border border-[#432874]/50 rounded-xl p-4 shadow-lg w-64"
                    >
                      <div className="flex justify-between items-start mb-2">
                        <div className="flex items-center">
                          <div className="bg-[#432874]/30 p-2 rounded-full">
                            {perk.icon}
                          </div>
                          <div className="ml-3">
                            <h4 className="text-md font-cinzel font-semibold text-[#FF9D00]">{perk.name}</h4>
                            <p className="text-xs text-[#C8B8DB]/70">{perk.description}</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="mt-2">
                        <div className="flex justify-between text-xs mb-1">
                          <span className="text-[#C8B8DB]/80">Level</span>
                          <span className="text-[#FF9D00]">{perk.level}/{perk.maxLevel}</span>
                        </div>
                        <div className="h-1.5 bg-[#1A1A2E] rounded-full overflow-hidden">
                          <div 
                            className="h-full bg-[#FF9D00]" 
                            style={{ width: `${(perk.level / perk.maxLevel) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                      
                      <div className="mt-3">
                        {perk.level < perk.maxLevel ? (
                          <Button
                            size="sm"
                            className="w-full bg-[#432874] hover:bg-[#432874]/80 text-xs"
                            onClick={() => handleUpgradePerk(perk.id)}
                            disabled={skillPoints < perk.cost}
                          >
                            <Star className="h-3 w-3 mr-1" />
                            Upgrade ({perk.cost})
                          </Button>
                        ) : (
                          <div className="w-full flex items-center justify-center bg-[#00B9AE]/20 py-1.5 rounded-lg text-xs text-[#00B9AE]">
                            <Sparkles className="h-3 w-3 mr-1" />
                            Maximum Level
                          </div>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </div>
                
                {/* Row 2 */}
                <div className="flex justify-around">
                  {perks.filter(p => p.position.y === 2).map(perk => (
                    <motion.div
                      key={perk.id}
                      whileHover={{ scale: 1.05 }}
                      className="bg-[#1F1D36] border border-[#432874]/50 rounded-xl p-4 shadow-lg w-64"
                    >
                      <div className="flex justify-between items-start mb-2">
                        <div className="flex items-center">
                          <div className="bg-[#432874]/30 p-2 rounded-full">
                            {perk.icon}
                          </div>
                          <div className="ml-3">
                            <h4 className="text-md font-cinzel font-semibold text-[#FF9D00]">{perk.name}</h4>
                            <p className="text-xs text-[#C8B8DB]/70">{perk.description}</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="mt-2">
                        <div className="flex justify-between text-xs mb-1">
                          <span className="text-[#C8B8DB]/80">Level</span>
                          <span className="text-[#FF9D00]">{perk.level}/{perk.maxLevel}</span>
                        </div>
                        <div className="h-1.5 bg-[#1A1A2E] rounded-full overflow-hidden">
                          <div 
                            className="h-full bg-[#FF9D00]" 
                            style={{ width: `${(perk.level / perk.maxLevel) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                      
                      <div className="mt-3">
                        {perk.level < perk.maxLevel ? (
                          <Button
                            size="sm"
                            className="w-full bg-[#432874] hover:bg-[#432874]/80 text-xs"
                            onClick={() => handleUpgradePerk(perk.id)}
                            disabled={skillPoints < perk.cost}
                          >
                            <Star className="h-3 w-3 mr-1" />
                            Upgrade ({perk.cost})
                          </Button>
                        ) : (
                          <div className="w-full flex items-center justify-center bg-[#00B9AE]/20 py-1.5 rounded-lg text-xs text-[#00B9AE]">
                            <Sparkles className="h-3 w-3 mr-1" />
                            Maximum Level
                          </div>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </div>
                
                {/* Row 3 */}
                <div className="flex justify-center">
                  {perks.filter(p => p.position.y === 3).map(perk => (
                    <motion.div
                      key={perk.id}
                      whileHover={{ scale: 1.05 }}
                      className="bg-[#1F1D36] border border-[#432874]/50 rounded-xl p-4 shadow-lg w-64"
                    >
                      <div className="flex justify-between items-start mb-2">
                        <div className="flex items-center">
                          <div className="bg-[#432874]/30 p-2 rounded-full">
                            {perk.icon}
                          </div>
                          <div className="ml-3">
                            <h4 className="text-md font-cinzel font-semibold text-[#FF9D00]">{perk.name}</h4>
                            <p className="text-xs text-[#C8B8DB]/70">{perk.description}</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="mt-2">
                        <div className="flex justify-between text-xs mb-1">
                          <span className="text-[#C8B8DB]/80">Level</span>
                          <span className="text-[#FF9D00]">{perk.level}/{perk.maxLevel}</span>
                        </div>
                        <div className="h-1.5 bg-[#1A1A2E] rounded-full overflow-hidden">
                          <div 
                            className="h-full bg-[#FF9D00]" 
                            style={{ width: `${(perk.level / perk.maxLevel) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                      
                      <div className="mt-3">
                        {perk.level < perk.maxLevel ? (
                          <Button
                            size="sm"
                            className="w-full bg-[#432874] hover:bg-[#432874]/80 text-xs"
                            onClick={() => handleUpgradePerk(perk.id)}
                            disabled={skillPoints < perk.cost}
                          >
                            <Star className="h-3 w-3 mr-1" />
                            Upgrade ({perk.cost})
                          </Button>
                        ) : (
                          <div className="w-full flex items-center justify-center bg-[#00B9AE]/20 py-1.5 rounded-lg text-xs text-[#00B9AE]">
                            <Sparkles className="h-3 w-3 mr-1" />
                            Maximum Level
                          </div>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </div>
          </div>
          
        </TabsContent>
        
        {/* Titles Tab */}
        <TabsContent value="titles">
          <motion.div
            variants={container}
            initial="hidden"
            animate="show"
            className="grid gap-6 md:grid-cols-2 lg:grid-cols-1"
          >
            {titles.map(title => (
              <motion.div
                key={title.id}
                variants={item}
                className={`bg-[#1A1A2E] border ${
                  title.status === 'Unlocked' 
                    ? equippedTitle === title.id 
                      ? 'border-[#00B9AE]/50' 
                      : 'border-[#FFD700]/50' 
                    : 'border-[#432874]/30'
                } rounded-xl overflow-hidden`}
              >
                <div className="flex flex-col md:flex-row">
                  <div className="p-6 flex items-center justify-center md:w-1/4 bg-[#1F1D36]">
                    <div className={`${
                      equippedTitle === title.id 
                        ? 'bg-[#00B9AE]/30' 
                        : 'bg-[#432874]/30'
                    } p-4 rounded-full`}>
                      {title.icon}
                    </div>
                  </div>
                  
                  <div className="flex-1 p-6">
                    <div className="flex justify-between items-start mb-2">
                      <h3 className="text-xl font-cinzel font-bold text-[#FF9D00]">{title.name}</h3>
                      {equippedTitle === title.id ? (
                        <Badge className="bg-[#00B9AE]/20 text-[#00B9AE] border-[#00B9AE]/30">
                          Equipped
                        </Badge>
                      ) : (
                        <Badge className={`${title.status === 'Unlocked' ? 'bg-[#FFD700]/20 text-[#FFD700] border-[#FFD700]/30' : 'bg-[#432874]/30 text-[#C8B8DB] border-[#432874]/50'}`}>
                          {title.status}
                        </Badge>
                      )}
                    </div>
                    
                    <p className="text-[#C8B8DB]/80 mb-4">{title.description}</p>
                    
                    <div className="mb-4">
                      <div className="flex justify-between text-sm mb-1">
                        <span className="text-[#C8B8DB]/80">Progress</span>
                        <span className="text-[#FF9D00]">{title.progress}%</span>
                      </div>
                      <Progress 
                        value={title.progress} 
                        className="h-2 bg-[#1F1D36] border-[#432874]/20" 
                      />
                    </div>
                    
                    <div className="bg-[#432874]/20 p-3 rounded-lg">
                      <div className="flex items-center">
                        <Star className="h-4 w-4 text-[#FFD700] mr-2 flex-shrink-0" />
                        <p className="text-sm text-[#C8B8DB]/90">
                          {title.requirements}
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-6 flex items-center justify-center md:w-1/5">
                    {title.status === 'Unlocked' ? (
                      <Button
                        className={`w-full ${
                          equippedTitle === title.id
                            ? 'bg-[#00B9AE]/20 hover:bg-[#00B9AE]/30 text-[#00B9AE] border border-[#00B9AE]/30'
                            : 'bg-[#FFD700]/20 hover:bg-[#FFD700]/30 text-[#FFD700] border border-[#FFD700]/30'
                        }`}
                        disabled={equippedTitle === title.id}
                        onClick={() => handleEquipTitle(title.id)}
                      >
                        <Sparkles className="h-4 w-4 mr-2" />
                        {equippedTitle === title.id ? 'Equipped' : 'Equip Title'}
                      </Button>
                    ) : (
                      <div className="w-full text-center text-[#C8B8DB]/60">
                        <p className="text-sm">Complete requirements to unlock</p>
                      </div>
                    )}
                  </div>
                </div>
              </motion.div>
            ))}
          </motion.div>
        </TabsContent>
      </Tabs>
    </>
  );
};

export default CollectionsView;

=== client/src/components/inventory/InventoryView.tsx ===
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useGameStore } from '@/lib/zustandStore';
import { useDiscordAuth } from '@/lib/discordAuth';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { 
  Search, Filter, ShoppingBag, User, Sparkles, Gem, Box, Plus,
  Info, Users, Zap, ArrowUpToLine, Activity, Sword, Droplets, Shield, 
  Heart, Footprints, Eye, CircleOff, Target
} from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Badge } from '@/components/ui/badge';
import CharacterCard from '../characters/CharacterCard';
import type { Character, Aura, Resource } from '@shared/schema';

const InventoryView = () => {
  const { toast } = useToast();
  const [selectedTab, setSelectedTab] = useState('characters');
  const [searchTerm, setSearchTerm] = useState('');
  const [filter, setFilter] = useState('all');
  const [showRecruitDialog, setShowRecruitDialog] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  
  const { 
    characters = [], 
    auras = [], 
    resources = [],
    fetchCharacters,
    fetchAuras,
    fetchResources
  } = useGameStore();
  
  // Load inventory data
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      await Promise.all([
        fetchCharacters(),
        fetchAuras(),
        fetchResources()
      ]);
      setIsLoading(false);
    };
    
    loadData();
  }, [fetchCharacters, fetchAuras, fetchResources]);

  // Define character shards - now specific to each character and persistent
  const [characterShards, setCharacterShards] = useState<Array<{
    id: number,
    name: string,
    quantity: number,
    required: number,
    characterClass: string,
    characterName: string,
    type: string,
    avatarUrl?: string
  }>>([]);
  
  // Generate persistent shards based on characters with localStorage persistence
  useEffect(() => {
    // Try to load saved shards from localStorage
    const savedShards = localStorage.getItem('characterShards');
    
    if (savedShards) {
      // Use saved shards if available
      setCharacterShards(JSON.parse(savedShards));
    } else if (characters.length > 0 && characterShards.length === 0) {
      // Generate new shards if none are saved
      const shards = characters.map(character => ({
        id: character.id,
        name: `${character.name} Shard`,
        quantity: Math.floor(Math.random() * 80) + 10, // Random quantity, but will be saved
        required: 100,
        characterClass: character.class,
        characterName: character.name,
        type: "rare", // Default type since we've removed rarity from characters
        avatarUrl: character.avatarUrl
      }));
      setCharacterShards(shards);
      
      // Save to localStorage
      localStorage.setItem('characterShards', JSON.stringify(shards));
    }
  }, [characters, characterShards.length]);

  // State for selected aura detail
  const [selectedAura, setSelectedAura] = useState<Aura | null>(null);
  
  // Filter functions for each tab
  const filteredCharacters = characters.filter(character => {
    const matchesSearch = character.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = 
      filter === 'all' ||
      (filter === 'active' && character.isActive) ||
      (filter === 'idle' && !character.isActive) ||
      (filter === filter && character.class.toLowerCase() === filter);
    
    return matchesSearch && matchesFilter;
  });

  const filteredAuras = auras.filter(aura => {
    const matchesSearch = aura.element.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = 
      filter === 'all' ||
      (filter === 'equipped' && aura.equippedByCharacterId) ||
      (filter === 'available' && !aura.equippedByCharacterId) ||
      (filter === filter && aura.element.toLowerCase() === filter);
    
    return matchesSearch && matchesFilter;
  });

  const filteredResources = resources.filter(resource => {
    const matchesSearch = resource.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = 
      filter === 'all' ||
      (filter === 'materials' && resource.type === 'material') ||
      (filter === 'essences' && resource.type === 'essence') ||
      (filter === 'currencies' && resource.type === 'currency');
    
    return matchesSearch && matchesFilter;
  });

  const filteredShards = characterShards.filter(shard => {
    const matchesSearch = shard.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = 
      filter === 'all' ||
      (filter === filter && shard.characterClass.toLowerCase() === filter);
    
    return matchesSearch && matchesFilter;
  });

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  // Handle shard actions (collect more or summon character)
  // Handle leveling up a character
  const handleLevelUpCharacter = async (characterId: number) => {
    try {
      // Find the character
      const character = characters.find(c => c.id === characterId);
      
      if (!character) {
        throw new Error('Character not found');
      }
      
      // API call to level up character
      const response = await apiRequest('POST', `/api/characters/${characterId}/level-up`, {
        levelIncrease: 1
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to level up character');
      }
      
      // Success message
      toast({
        title: "Character Leveled Up!",
        description: `${character.name} has reached level ${character.level + 1}!`
      });
      
      // Refresh character data
      fetchCharacters();
    } catch (error: any) {
      console.error('Error leveling up character:', error);
      toast({
        title: "Level Up Failed",
        description: error.message || "Unable to level up character at this time.",
        variant: "destructive"
      });
    }
  };

  const handleShardAction = (shard: {
    id: number,
    name: string,
    quantity: number,
    required: number,
    characterClass: string,
    characterName: string,
    type: string,
    avatarUrl?: string
  }) => {
    if (shard.quantity >= shard.required) {
      // Find the character
      const character = characters.find(c => c.id === shard.id);
      
      if (!character) {
        toast({
          title: "Error",
          description: "Character not found for these shards.",
          variant: "destructive"
        });
        return;
      }
      
      // Level up character
      toast({
        title: "Character Level Up!",
        description: `Leveling up ${character.name} using ${shard.characterName} shards!`
      });
      
      // Update shard quantity (reset to 0)
      const updatedShards = characterShards.map(s => {
        if (s.id === shard.id) {
          return { ...s, quantity: 0 };
        }
        return s;
      });
      
      // Update state and save to localStorage
      setCharacterShards(updatedShards);
      localStorage.setItem('characterShards', JSON.stringify(updatedShards));
      
      // Level up the character
      handleLevelUpCharacter(shard.id);
    } else {
      // Collect more shards
      const randomAmount = Math.floor(Math.random() * 5) + 1;
      
      // Update shard quantity
      const updatedShards = characterShards.map(s => {
        if (s.id === shard.id) {
          return { ...s, quantity: s.quantity + randomAmount };
        }
        return s;
      });
      
      // Update state and save to localStorage
      setCharacterShards(updatedShards);
      localStorage.setItem('characterShards', JSON.stringify(updatedShards));
      
      toast({
        title: "Shards Collected!",
        description: `You collected ${randomAmount} ${shard.characterName} shards!`
      });
    }
  };

  // Handle recruiting a new character
  const handleRecruitCharacter = async (characterClass?: string, type?: string) => {
    try {
      // Generate a random character for demonstration
      const randomNames = ["Eldrin", "Lyra", "Thorne", "Seraphina", "Gideon", "Isolde"];
      const randomClasses = ["Warrior", "Mage", "Rogue", "Cleric"];
      const randomAvatars = [
        "https://images.unsplash.com/photo-1577095972620-2f389ca3abcd?w=150&h=150&fit=crop",
        "https://images.unsplash.com/photo-1613477564751-fc2a7c5bbb7a?w=150&h=150&fit=crop",
        "https://images.unsplash.com/photo-1578336134673-1eef9c8c5e36?w=150&h=150&fit=crop"
      ];
      
      const newCharacter = {
        name: randomNames[Math.floor(Math.random() * randomNames.length)],
        class: characterClass || randomClasses[Math.floor(Math.random() * randomClasses.length)],
        level: 1,
        avatarUrl: randomAvatars[Math.floor(Math.random() * randomAvatars.length)],
        attack: 10 + Math.floor(Math.random() * 5),
        defense: 10 + Math.floor(Math.random() * 5),
        health: 100 + Math.floor(Math.random() * 20),
        speed: 10 + Math.floor(Math.random() * 5),
        vitality: 10 + Math.floor(Math.random() * 5),
        accuracy: 10 + Math.floor(Math.random() * 5),
        focus: 10 + Math.floor(Math.random() * 5),
        resilience: 10 + Math.floor(Math.random() * 5)
      };
      
      const response = await apiRequest('POST', '/api/characters', newCharacter);
      const data = await response.json();
      
      toast({
        title: "Character Recruited!",
        description: `${data.name} has joined your roster.`
      });
      
      fetchCharacters();
      setShowRecruitDialog(false);
    } catch (error) {
      console.error('Error recruiting character:', error);
      toast({
        title: "Recruitment Failed",
        description: "Unable to recruit a new character at this time.",
        variant: "destructive"
      });
    }
  };

  // Render loading state
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-[#FF9D00] text-xl animate-pulse">Loading inventory data...</div>
      </div>
    );
  }

  return (
    <>
      <div className="mb-6">
        <h1 className="text-3xl font-cinzel font-bold text-[#FF9D00] mb-2">Inventory</h1>
        <p className="text-[#C8B8DB]/80">
          Manage your characters, auras, materials, resources, and character shards.
        </p>
      </div>
      
      {/* Inventory Tabs */}
      <Tabs defaultValue="characters" value={selectedTab} onValueChange={setSelectedTab} className="w-full mb-6">
        <TabsList className="bg-[#432874]/20 mb-6">
          <TabsTrigger value="characters" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
            <User className="h-4 w-4 mr-2" />
            Characters
          </TabsTrigger>
          <TabsTrigger value="auras" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
            <Sparkles className="h-4 w-4 mr-2" />
            Auras
          </TabsTrigger>
          <TabsTrigger value="materials" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
            <Box className="h-4 w-4 mr-2" />
            Materials
          </TabsTrigger>
          <TabsTrigger value="resources" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
            <Gem className="h-4 w-4 mr-2" />
            Resources
          </TabsTrigger>
          <TabsTrigger value="shards" className="data-[state=active]:bg-[#FF9D00] data-[state=active]:text-[#1A1A2E]">
            <ShoppingBag className="h-4 w-4 mr-2" />
            Character Shards
          </TabsTrigger>
        </TabsList>
        
        {/* Search & Filter Controls */}
        <div className="flex flex-wrap gap-4 mb-6">
          <div className="relative flex-grow max-w-md">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-[#C8B8DB]/50 h-4 w-4" />
            <input
              type="text"
              placeholder={`Search ${selectedTab}...`}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 w-full bg-[#1F1D36]/80 border border-[#432874]/30 rounded-lg px-3 py-2 text-sm focus:outline-none focus:border-[#FF9D00]"
            />
          </div>
          
          <div className="flex items-center gap-2">
            <Filter className="text-[#C8B8DB]/70 h-4 w-4" />
            <Select value={filter} onValueChange={setFilter}>
              <SelectTrigger className="bg-[#1F1D36]/80 border-[#432874]/30 focus:border-[#FF9D00] focus:ring-0 w-32">
                <SelectValue placeholder="Filter" />
              </SelectTrigger>
              <SelectContent className="bg-[#1A1A2E] border-[#432874]/30">
                <SelectItem value="all">All</SelectItem>
                {selectedTab === 'characters' && (
                  <>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="idle">Idle</SelectItem>
                    <SelectItem value="warrior">Warrior</SelectItem>
                    <SelectItem value="mage">Mage</SelectItem>
                    <SelectItem value="rogue">Rogue</SelectItem>
                    <SelectItem value="cleric">Cleric</SelectItem>
                  </>
                )}
                {selectedTab === 'auras' && (
                  <>
                    <SelectItem value="equipped">Equipped</SelectItem>
                    <SelectItem value="available">Available</SelectItem>
                    <SelectItem value="fire">Fire</SelectItem>
                    <SelectItem value="water">Water</SelectItem>
                    <SelectItem value="earth">Earth</SelectItem>
                    <SelectItem value="wind">Wind</SelectItem>
                  </>
                )}
                {selectedTab === 'materials' && (
                  <>
                    <SelectItem value="common">Common</SelectItem>
                    <SelectItem value="rare">Rare</SelectItem>
                    <SelectItem value="epic">Epic</SelectItem>
                  </>
                )}
                {selectedTab === 'resources' && (
                  <>
                    <SelectItem value="materials">Materials</SelectItem>
                    <SelectItem value="essences">Essences</SelectItem>
                    <SelectItem value="currencies">Currencies</SelectItem>
                  </>
                )}
                {selectedTab === 'shards' && (
                  <>
                    <SelectItem value="warrior">Warrior</SelectItem>
                    <SelectItem value="mage">Mage</SelectItem>
                    <SelectItem value="rogue">Rogue</SelectItem>
                    <SelectItem value="cleric">Cleric</SelectItem>
                  </>
                )}
              </SelectContent>
            </Select>
          </div>
          
          {selectedTab === 'characters' && (
            <Dialog open={showRecruitDialog} onOpenChange={setShowRecruitDialog}>
              <DialogTrigger asChild>
                <Button className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]">
                  <Plus className="h-4 w-4 mr-2" /> Recruit
                </Button>
              </DialogTrigger>
              <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB]">
                <DialogHeader>
                  <DialogTitle className="text-[#FF9D00] font-cinzel text-xl">Recruit a New Character</DialogTitle>
                </DialogHeader>
                
                <div className="py-4">
                  <div className="bg-[#432874]/20 rounded-lg p-4 text-center mb-4">
                    <img
                      src="https://images.unsplash.com/photo-1578336134673-1eef9c8c5e36?w=250&h=250&fit=crop"
                      alt="New Character"
                      className="w-20 h-20 rounded-full border-2 border-[#FF9D00] mx-auto mb-2"
                    />
                    <p className="text-[#C8B8DB]">
                      Recruiting a new character costs <span className="text-[#FFD700] font-bold">500</span> Rogue Credits.
                    </p>
                  </div>
                  
                  <Button 
                    className="w-full bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                    onClick={() => handleRecruitCharacter()}
                  >
                    Recruit Random Character
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          )}
        </div>
        
        {/* Characters Tab */}
        <TabsContent value="characters">
          {filteredCharacters.length === 0 ? (
            <div className="bg-[#1A1A2E] rounded-xl p-8 text-center">
              <p className="text-[#C8B8DB]/80 mb-4">
                {searchTerm 
                  ? `No characters found matching "${searchTerm}"` 
                  : "You don't have any characters yet."}
              </p>
              <Button 
                className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                onClick={() => setShowRecruitDialog(true)}
              >
                <Plus className="h-4 w-4 mr-2" /> Recruit Your First Character
              </Button>
            </div>
          ) : (
            <motion.div 
              className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"
              variants={container}
              initial="hidden"
              animate="show"
            >
              {filteredCharacters.map((character) => (
                <CharacterCard key={character.id} character={character} />
              ))}
            </motion.div>
          )}
        </TabsContent>
        
        {/* Auras Tab */}
        <TabsContent value="auras">
          {filteredAuras.length === 0 ? (
            <div className="bg-[#1A1A2E] rounded-xl p-8 text-center">
              <p className="text-[#C8B8DB]/80 mb-4">
                {searchTerm 
                  ? `No auras found matching "${searchTerm}"` 
                  : "You don't have any auras yet."}
              </p>
              <Button 
                className="bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]"
                onClick={() => window.location.href = "/forge"}
              >
                <Sparkles className="h-4 w-4 mr-2" /> Craft Your First Aura
              </Button>
            </div>
          ) : (
            <motion.div 
              className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"
              variants={container}
              initial="hidden"
              animate="show"
            >
              {/* Aura Detail Dialog */}
              <Dialog open={!!selectedAura} onOpenChange={(open) => !open && setSelectedAura(null)}>
                <DialogContent className="bg-[#1A1A2E] border border-[#432874] text-[#C8B8DB] max-w-2xl">
                  {selectedAura && (
                    <>
                      <DialogHeader>
                        <DialogTitle className="text-[#FF9D00] font-cinzel text-xl flex items-center">
                          <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3
                            ${selectedAura.element === 'Fire' ? 'bg-red-500/20' : 
                              selectedAura.element === 'Water' ? 'bg-blue-500/20' : 
                              selectedAura.element === 'Earth' ? 'bg-amber-800/20' : 
                              'bg-green-500/20'}`
                          }>
                            {selectedAura.element === 'Fire' ? (
                              <div className="text-red-500">🔥</div>
                            ) : selectedAura.element === 'Water' ? (
                              <div className="text-blue-500">💧</div>
                            ) : selectedAura.element === 'Earth' ? (
                              <div className="text-amber-800">🏔️</div>
                            ) : (
                              <div className="text-green-500">🌪️</div>
                            )}
                          </div>
                          {selectedAura.name || `${selectedAura.element || 'Mysterious'} Aura`}
                        </DialogTitle>
                      </DialogHeader>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 py-4">
                        {/* Left Column - Stats */}
                        <div>
                          <h3 className="font-semibold text-[#FF9D00] mb-3">Stats</h3>
                          <div className="bg-[#1F1D36]/80 p-4 rounded-lg">
                            <div className="grid grid-cols-2 gap-x-4 gap-y-2">
                              <div className="flex justify-between">
                                <div className="flex items-center">
                                  <Sword className="h-3 w-3 mr-1 text-red-400" />
                                  <span>Attack</span>
                                </div>
                                <span className={`${selectedAura.attack && selectedAura.attack > 0 ? 'text-green-400' : selectedAura.attack && selectedAura.attack < 0 ? 'text-red-400' : 'text-[#00B9AE]'}`}>
                                  {typeof selectedAura.attack === 'number' ? `${selectedAura.attack}%` : '0%'}
                                </span>
                              </div>
                              <div className="flex justify-between">
                                <div className="flex items-center">
                                  <Target className="h-3 w-3 mr-1 text-blue-400" />
                                  <span>Accuracy</span>
                                </div>
                                <span className={`${selectedAura.accuracy && selectedAura.accuracy > 0 ? 'text-green-400' : selectedAura.accuracy && selectedAura.accuracy < 0 ? 'text-red-400' : 'text-[#00B9AE]'}`}>
                                  {typeof selectedAura.accuracy === 'number' ? `${selectedAura.accuracy}%` : '0%'}
                                </span>
                              </div>
                              <div className="flex justify-between">
                                <div className="flex items-center">
                                  <Shield className="h-3 w-3 mr-1 text-amber-400" />
                                  <span>Defense</span>
                                </div>
                                <span className={`${selectedAura.defense && selectedAura.defense > 0 ? 'text-green-400' : selectedAura.defense && selectedAura.defense < 0 ? 'text-red-400' : 'text-[#00B9AE]'}`}>
                                  {typeof selectedAura.defense === 'number' ? `${selectedAura.defense}%` : '0%'}
                                </span>
                              </div>
                              <div className="flex justify-between">
                                <div className="flex items-center">
                                  <Heart className="h-3 w-3 mr-1 text-green-400" />
                                  <span>Vitality</span>
                                </div>
                                <span className={`${selectedAura.vitality && selectedAura.vitality > 0 ? 'text-green-400' : selectedAura.vitality && selectedAura.vitality < 0 ? 'text-red-400' : 'text-[#00B9AE]'}`}>
                                  {typeof selectedAura.vitality === 'number' ? `${selectedAura.vitality}%` : '0%'}
                                </span>
                              </div>
                              <div className="flex justify-between">
                                <div className="flex items-center">
                                  <Footprints className="h-3 w-3 mr-1 text-cyan-400" />
                                  <span>Speed</span>
                                </div>
                                <span className={`${selectedAura.speed && selectedAura.speed > 0 ? 'text-green-400' : selectedAura.speed && selectedAura.speed < 0 ? 'text-red-400' : 'text-[#00B9AE]'}`}>
                                  {typeof selectedAura.speed === 'number' ? `${selectedAura.speed}%` : '0%'}
                                </span>
                              </div>
                              <div className="flex justify-between">
                                <div className="flex items-center">
                                  <Eye className="h-3 w-3 mr-1 text-yellow-400" />
                                  <span>Focus</span>
                                </div>
                                <span className={`${selectedAura.focus && selectedAura.focus > 0 ? 'text-green-400' : selectedAura.focus && selectedAura.focus < 0 ? 'text-red-400' : 'text-[#00B9AE]'}`}>
                                  {typeof selectedAura.focus === 'number' ? `${selectedAura.focus}%` : '0%'}
                                </span>
                              </div>
                              <div className="flex justify-between">
                                <div className="flex items-center">
                                  <CircleOff className="h-3 w-3 mr-1 text-purple-400" />
                                  <span>Resilience</span>
                                </div>
                                <span className={`${selectedAura.resilience && selectedAura.resilience > 0 ? 'text-green-400' : selectedAura.resilience && selectedAura.resilience < 0 ? 'text-red-400' : 'text-[#00B9AE]'}`}>
                                  {typeof selectedAura.resilience === 'number' ? `${selectedAura.resilience}%` : '0%'}
                                </span>
                              </div>
                            </div>
                            
                            {/* Display Skills if any */}
                            {selectedAura.skills && Array.isArray(selectedAura.skills) && selectedAura.skills.length > 0 && (
                              <>
                                <div className="text-[#00B9AE] text-xs mt-4 mb-1">Skills:</div>
                                <div className="mt-1 space-y-2">
                                  {selectedAura.skills.map((skill: any, index: number) => (
                                    <div key={index} className="bg-[#432874]/20 p-2 rounded-lg">
                                      <div className="flex items-center justify-between">
                                        <div className="flex items-center">
                                          <Sparkles className="h-3 w-3 mr-1 text-yellow-400 flex-shrink-0" />
                                          <span className="font-semibold text-xs">{skill.name}</span>
                                        </div>
                                        {skill.type && (
                                          <Badge className={`
                                            ${skill.type === 'Ultimate' ? 'bg-[#FF9D00]/20 text-[#FF9D00]' : 
                                              skill.type === 'Advanced' ? 'bg-[#00B9AE]/20 text-[#00B9AE]' : 
                                              'bg-[#C8B8DB]/20 text-[#C8B8DB]'}
                                          `}>
                                            {skill.type}
                                          </Badge>
                                        )}
                                      </div>
                                      
                                      {skill.description && (
                                        <div className="ml-4 mt-1 text-xs text-[#C8B8DB]/80">
                                          {skill.description}
                                        </div>
                                      )}
                                      
                                      <div className="grid grid-cols-2 gap-2 ml-4 mt-2">
                                        {/* Damage Multiplier */}
                                        {skill.damage !== undefined && (
                                          <div className="flex items-center">
                                            <Sword className="h-3 w-3 mr-1 text-red-400 flex-shrink-0" />
                                            <span className="text-xs">Damage: x{skill.damage}</span>
                                          </div>
                                        )}
                                        
                                        {/* Targets */}
                                        {skill.targets !== undefined && (
                                          <div className="flex items-center">
                                            <Target className="h-3 w-3 mr-1 text-blue-400 flex-shrink-0" />
                                            <span className="text-xs">Targets: {skill.targets}</span>
                                          </div>
                                        )}
                                      </div>
                                      
                                      {/* Special Effect */}
                                      {skill.effect && (
                                        <div className="flex items-start ml-4 mt-2">
                                          <Activity className="h-3 w-3 mr-1 text-purple-400 flex-shrink-0 mt-0.5" />
                                          <span className="text-xs text-[#00B9AE]">Effect: {skill.effect}</span>
                                        </div>
                                      )}
                                      
                                      {/* Cooldown if applicable */}
                                      {skill.cooldown && (
                                        <div className="flex items-center ml-4 mt-1">
                                          <Zap className="h-3 w-3 mr-1 text-yellow-400 flex-shrink-0" />
                                          <span className="text-xs">Cooldown: {skill.cooldown} turn{skill.cooldown !== 1 ? 's' : ''}</span>
                                        </div>
                                      )}
                                      
                                      {/* Level/Tier Info */}
                                      {skill.level && (
                                        <div className="flex items-center ml-4 mt-1">
                                          <ArrowUpToLine className="h-3 w-3 mr-1 text-green-400 flex-shrink-0" />
                                          <span className="text-xs">Required Level: {skill.level}</span>
                                        </div>
                                      )}
                                    </div>
                                  ))}
                                </div>
                              </>
                            )}
                          </div>
                        </div>
                        
                        {/* Right Column - Forge Information */}
                        <div>
                          <h3 className="font-semibold text-[#FF9D00] mb-3">Forge Information</h3>
                          <div className="bg-[#1F1D36]/80 p-4 rounded-lg">
                            <div className="mb-3">
                              <div className="text-sm font-semibold mb-1">Element</div>
                              <Badge className={`
                                ${selectedAura.element === 'Fire' ? 'bg-red-500/20 text-red-400' : 
                                  selectedAura.element === 'Water' ? 'bg-blue-500/20 text-blue-400' : 
                                  selectedAura.element === 'Earth' ? 'bg-amber-800/20 text-amber-600' : 
                                  'bg-green-500/20 text-green-400'}
                              `}>
                                {selectedAura.element || 'Unknown'}
                              </Badge>
                            </div>
                            
                            <div className="mb-3">
                              <div className="text-sm font-semibold mb-1">Level</div>
                              <div className="text-[#FF9D00]">{selectedAura.level || 1}</div>
                            </div>
                            
                            {selectedAura.equippedByCharacterId && (
                              <div className="mb-3">
                                <div className="text-sm font-semibold mb-1">Equipped By</div>
                                <div className="text-[#00B9AE]">
                                  {characters.find(c => c.id === selectedAura.equippedByCharacterId)?.name || 'Unknown Character'}
                                </div>
                              </div>
                            )}
                            
                            <div>
                              <div className="text-sm font-semibold mb-1">Forge Source</div>
                              <div className="text-[#C8B8DB]/90 text-sm">
                                {selectedAura.fusionSource ? (
                                  <div className="bg-[#432874]/20 p-2 rounded-lg">
                                    Created through fusion of multiple auras
                                  </div>
                                ) : (
                                  <div className="bg-[#432874]/20 p-2 rounded-lg">
                                    Basic elemental aura
                                  </div>
                                )}
                              </div>
                            </div>
                            
                            {/* Character Source */}
                            <div className="mt-3">
                              <div className="text-sm font-semibold mb-1">Character Source</div>
                              <div className="text-[#C8B8DB]/90 text-sm">
                                {selectedAura.creatorCharacterId ? (
                                  <div className="bg-[#432874]/20 p-2 rounded-lg">
                                    Created by {characters.find(c => c.id === selectedAura.creatorCharacterId)?.name || 'Unknown Character'}
                                  </div>
                                ) : (
                                  <div className="bg-[#432874]/20 p-2 rounded-lg">
                                    Origin unknown
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </>
                  )}
                </DialogContent>
              </Dialog>
              
              {filteredAuras.map((aura) => (
                <motion.div
                  key={aura.id}
                  variants={item}
                  onClick={() => setSelectedAura(aura)}
                  className="bg-[#1A1A2E] border border-[#432874]/30 rounded-xl overflow-hidden cursor-pointer hover:border-[#FF9D00]/50 hover:shadow-lg transition-all"
                >
                  <div className="p-4">
                    <div className="flex items-center mb-3">
                      <div className={`w-12 h-12 rounded-full flex items-center justify-center mr-3
                        ${aura.element?.toLowerCase() === 'fire' ? 'bg-red-500/20' : 
                          aura.element?.toLowerCase() === 'water' ? 'bg-blue-500/20' : 
                          aura.element?.toLowerCase() === 'earth' ? 'bg-amber-800/20' : 
                          aura.element?.toLowerCase() === 'wind' ? 'bg-cyan-500/20' :
                          'bg-green-500/20'}`
                      }>
                        {aura.element?.toLowerCase() === 'fire' ? (
                          <div className="text-red-500">🔥</div>
                        ) : aura.element?.toLowerCase() === 'water' ? (
                          <div className="text-blue-500">💧</div>
                        ) : aura.element?.toLowerCase() === 'earth' ? (
                          <div className="text-amber-800">🏔️</div>
                        ) : aura.element?.toLowerCase() === 'wind' ? (
                          <div className="text-cyan-500">🌪️</div>
                        ) : (
                          <div className="text-purple-500">✨</div>
                        )}
                      </div>
                      <div>
                        <h3 className="font-cinzel font-semibold text-[#FF9D00]">
                          {aura.name || `${aura.element || 'Mysterious'} Aura`}
                        </h3>
                        <div className="text-sm text-[#C8B8DB]/80">
                          Level {aura.level || 1}
                        </div>
                      </div>
                    </div>
                    
                    <div className="mt-2 bg-[#1F1D36]/80 p-3 rounded-lg text-sm">
                      <h4 className="font-semibold mb-1">Stat Multipliers:</h4>
                      <div className="grid grid-cols-2 gap-x-2 gap-y-1">
                        {/* Show all stats - show 0 if not present */}
                        <div className="flex justify-between">
                          <div className="flex items-center">
                            <Sword className="h-3 w-3 mr-1 text-red-400" />
                            <span>Attack</span>
                          </div>
                          <span className="text-[#00B9AE]">
                            {typeof aura.attack === 'number' ? `${aura.attack}%` : '0%'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <div className="flex items-center">
                            <Target className="h-3 w-3 mr-1 text-blue-400" />
                            <span>Accuracy</span>
                          </div>
                          <span className="text-[#00B9AE]">
                            {typeof aura.accuracy === 'number' ? `${aura.accuracy}%` : '0%'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <div className="flex items-center">
                            <Shield className="h-3 w-3 mr-1 text-amber-400" />
                            <span>Defense</span>
                          </div>
                          <span className="text-[#00B9AE]">
                            {typeof aura.defense === 'number' ? `${aura.defense}%` : '0%'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <div className="flex items-center">
                            <Heart className="h-3 w-3 mr-1 text-green-400" />
                            <span>Vitality</span>
                          </div>
                          <span className="text-[#00B9AE]">
                            {typeof aura.vitality === 'number' ? `${aura.vitality}%` : '0%'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <div className="flex items-center">
                            <Footprints className="h-3 w-3 mr-1 text-cyan-400" />
                            <span>Speed</span>
                          </div>
                          <span className="text-[#00B9AE]">
                            {typeof aura.speed === 'number' ? `${aura.speed}%` : '0%'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <div className="flex items-center">
                            <Eye className="h-3 w-3 mr-1 text-yellow-400" />
                            <span>Focus</span>
                          </div>
                          <span className="text-[#00B9AE]">
                            {typeof aura.focus === 'number' ? `${aura.focus}%` : '0%'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <div className="flex items-center">
                            <CircleOff className="h-3 w-3 mr-1 text-purple-400" />
                            <span>Resilience</span>
                          </div>
                          <span className="text-[#00B9AE]">
                            {typeof aura.resilience === 'number' ? `${aura.resilience}%` : '0%'}
                          </span>
                        </div>
                      </div>
                      
                      {/* Note: Stat bonuses are now displayed directly in the attributes above */}
                      
                      {/* Forge information - showing which character classes were used */}
                      {(() => {
                        // Use safer type checking for sourceCharacterIds
                        const sourceIds = aura.sourceCharacterIds as number[] | undefined;
                        
                        if (!sourceIds || !Array.isArray(sourceIds) || sourceIds.length === 0) {
                          return (
                            <div className="mt-3 pt-3 border-t border-[#432874]/30">
                              <h4 className="text-xs font-semibold mb-1 text-[#00B9AE]">Power Source:</h4>
                              <div className="text-xs text-[#C8B8DB]/80">
                                Crafted with elemental essence
                              </div>
                            </div>
                          );
                        }
                        
                        // Find the source characters
                        const sourceChars = characters.filter(c => sourceIds.includes(c.id));
                        
                        return (
                          <div className="mt-3 pt-3 border-t border-[#432874]/30">
                            <h4 className="text-xs font-semibold mb-1 text-[#00B9AE]">Forged Using:</h4>
                            <div className="text-xs text-[#C8B8DB]/80">
                              {sourceChars.length === 0 
                                ? 'Unknown characters' 
                                : sourceChars.map(char => `${char.name} (${char.class})`).join(', ')
                              }
                            </div>
                          </div>
                        );
                      })()}
                      
                      {/* Skills list */}
                      {aura.skills && (typeof aura.skills === 'object' || typeof aura.skills === 'string') && (
                        <div className="mt-3 pt-3 border-t border-[#432874]/30">
                          <h4 className="text-xs font-semibold mb-1 text-[#00B9AE]">Active Skills:</h4>
                          <div className="text-xs">
                            {(() => {
                              let skills = [];
                              try {
                                skills = typeof aura.skills === 'string' 
                                  ? JSON.parse(aura.skills) 
                                  : aura.skills;
                              } catch (e) {
                                return 'No active skills';
                              }
                              
                              if (!Array.isArray(skills) || skills.length === 0) {
                                return 'No active skills';
                              }
                              
                              return (
                                <ul className="list-disc list-inside">
                                  {skills.map((skill, idx) => (
                                    <li key={idx}>
                                      <span className="font-semibold">{skill.name}</span>: {skill.description}
                                    </li>
                                  ))}
                                </ul>
                              );
                            })()}
                          </div>
                        </div>
                      )}
                    </div>
                    
                    <div className="mt-3 text-center">
                      {aura.equippedByCharacterId ? (
                        <div className="bg-[#00B9AE]/20 text-[#00B9AE] py-1 px-2 rounded text-sm">
                          Equipped by {(() => {
                            const char = characters.find(c => c.id === aura.equippedByCharacterId);
                            return char ? char.name : 'a character';
                          })()}
                        </div>
                      ) : (
                        <Button 
                          size="sm" 
                          className="w-full bg-[#432874] hover:bg-[#432874]/80 text-xs"
                        >
                          Equip to Character
                        </Button>
                      )}
                    </div>
                  </div>
                </motion.div>
              ))}
            </motion.div>
          )}
        </TabsContent>
        
        {/* Materials Tab */}
        <TabsContent value="materials">
          <motion.div 
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"
            variants={container}
            initial="hidden"
            animate="show"
          >
            {resources.filter(r => r.type === 'material').map((material) => (
              <motion.div
                key={material.id}
                variants={item}
                className="bg-[#1A1A2E] border border-[#432874]/30 rounded-lg p-4"
              >
                <div className="flex items-center">
                  <div className="w-10 h-10 rounded-full bg-[#432874]/30 flex items-center justify-center mr-3">
                    <Box className="h-5 w-5 text-[#C8B8DB]" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-[#FF9D00]">{material.name}</h3>
                    <div className="text-sm text-[#C8B8DB]/80">Material</div>
                  </div>
                  <div className="ml-auto bg-[#432874]/30 px-3 py-1 rounded-full">
                    <span className="text-[#C8B8DB]">{material.quantity}</span>
                  </div>
                </div>
                <div className="mt-3 text-sm text-[#C8B8DB]/70">
                  {material.description || "Used for crafting and upgrading items."}
                </div>
              </motion.div>
            ))}
          </motion.div>
        </TabsContent>
        
        {/* Resources Tab */}
        <TabsContent value="resources">
          <motion.div 
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"
            variants={container}
            initial="hidden"
            animate="show"
          >
            {filteredResources.map((resource) => (
              <motion.div
                key={resource.id}
                variants={item}
                className="bg-[#1A1A2E] border border-[#432874]/30 rounded-lg p-4"
              >
                <div className="flex items-center">
                  <div className="w-10 h-10 rounded-full bg-[#432874]/30 flex items-center justify-center mr-3">
                    {resource.type === 'essence' ? (
                      <Sparkles className="h-5 w-5 text-[#FF9D00]" />
                    ) : resource.type === 'currency' ? (
                      <Gem className="h-5 w-5 text-[#FFD700]" />
                    ) : (
                      <Box className="h-5 w-5 text-[#C8B8DB]" />
                    )}
                  </div>
                  <div>
                    <h3 className="font-semibold text-[#FF9D00]">{resource.name}</h3>
                    <div className="text-sm text-[#C8B8DB]/80 capitalize">{resource.type}</div>
                  </div>
                  <div className="ml-auto bg-[#432874]/30 px-3 py-1 rounded-full">
                    <span className="text-[#C8B8DB]">{resource.quantity}</span>
                  </div>
                </div>
                <div className="mt-3 text-sm text-[#C8B8DB]/70">
                  {resource.description || `Used for ${resource.type === 'essence' ? 'crafting auras' : 
                    resource.type === 'currency' ? 'purchasing items and upgrades' : 
                    'crafting and upgrading'}.`}
                </div>
              </motion.div>
            ))}
          </motion.div>
        </TabsContent>
        
        {/* Character Shards Tab */}
        <TabsContent value="shards">
          <motion.div 
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"
            variants={container}
            initial="hidden"
            animate="show"
          >
            {filteredShards.map((shard) => (
              <motion.div
                key={shard.id}
                variants={item}
                className="bg-[#1A1A2E] border border-[#432874]/30 rounded-lg p-4"
              >
                <div className="flex items-center">
                  <div className={`w-10 h-10 rounded-full flex items-center justify-center mr-3
                    ${shard.type === 'common' ? 'bg-gray-600/30' : 
                      shard.type === 'rare' ? 'bg-blue-600/30' : 
                      shard.type === 'epic' ? 'bg-purple-600/30' : 
                      'bg-yellow-600/30'}`
                  }>
                    <ShoppingBag className={`h-5 w-5 
                      ${shard.type === 'common' ? 'text-gray-300' : 
                        shard.type === 'rare' ? 'text-blue-300' : 
                        shard.type === 'epic' ? 'text-purple-300' : 
                        'text-yellow-300'}`
                    } />
                  </div>
                  <div>
                    <h3 className="font-semibold text-[#FF9D00]">{shard.name}</h3>
                    <div className={`text-sm capitalize
                      ${shard.type === 'common' ? 'text-gray-300' : 
                        shard.type === 'rare' ? 'text-blue-300' : 
                        shard.type === 'epic' ? 'text-purple-300' : 
                        'text-yellow-300'}`
                    }>
                      {shard.type} • {shard.characterClass}
                    </div>
                  </div>
                </div>
                
                <div className="mt-3">
                  <div className="flex justify-between text-xs mb-1">
                    <span className="text-[#C8B8DB]/80">Progress</span>
                    <span className="text-[#C8B8DB]">{shard.quantity}/{shard.required}</span>
                  </div>
                  <div className="h-2 bg-[#1F1D36] rounded-full overflow-hidden">
                    <div 
                      className={`h-full ${shard.type === 'common' ? 'bg-gray-600' : 
                        shard.type === 'rare' ? 'bg-blue-600' : 
                        shard.type === 'epic' ? 'bg-purple-600' : 
                        'bg-yellow-600'}`
                      } 
                      style={{ width: `${(shard.quantity / shard.required) * 100}%` }}
                    ></div>
                  </div>
                </div>
                
                <div className="mt-3 text-sm text-[#C8B8DB]/70">
                  Collect {shard.required} shards to summon a {shard.type} {shard.characterClass} character.
                </div>
                
                <Button 
                  size="sm" 
                  className={`w-full mt-3 text-xs ${shard.quantity >= shard.required ? 
                    'bg-[#FF9D00] hover:bg-[#FF9D00]/80 text-[#1A1A2E]' : 
                    'bg-[#432874] hover:bg-[#432874]/80'}`}
                  onClick={() => handleShardAction(shard)}
                >
                  {shard.quantity >= shard.required ? 'Level Up Character' : `Collect Shards (${shard.quantity}/${shard.required})`}
                </Button>
              </motion.div>
            ))}
          </motion.div>
        </TabsContent>
      </Tabs>
    </>
  );
};

export default InventoryView;

=== client/src/components/battles/BattleLog.tsx ===
import { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { motion } from 'framer-motion';
import { Shield, Swords, Heart, Zap } from 'lucide-react';

interface BattleUnit {
  id: string;
  name: string;
  hp: number;
  maxHp: number;
  speed: number;
  attackMeter: number;
  stats: {
    attack: number;
    vitality: number;
    speed: number;
  };
  skills: {
    basic: { name: string; damage: number };
    advanced?: { name: string; damage: number; cooldown: number };
    ultimate?: { name: string; damage: number; cooldown: number };
  };
  lastSkillUse: number;
  totalDamageDealt: number;
  totalDamageReceived: number;
  totalHealingDone: number;
  totalHealingReceived: number;
}

interface BattleLogProps {
  isOpen: boolean;
  onClose: () => void;
  battleLog: any[];
  runId: number | null;
  onCompleteDungeon?: (runId: number) => void;
}

const BattleLog = ({ isOpen, onClose, battleLog, runId, onCompleteDungeon }: BattleLogProps) => {
  const [playbackSpeed, setPlaybackSpeed] = useState(1);
  const [isPaused, setIsPaused] = useState(false);
  const [currentStage, setCurrentStage] = useState(0);
  const [units, setUnits] = useState<BattleUnit[]>([]);
  const [actionLog, setActionLog] = useState<string[]>([]);
  const [isComplete, setIsComplete] = useState(false);

  // Initialize battle units
  useEffect(() => {
    if (battleLog && battleLog.length > 0) {
      const initialUnits = [...battleLog[0].allies, ...battleLog[0].enemies].map(unit => ({
        ...unit,
        attackMeter: 0,
        lastSkillUse: 0,
        totalDamageDealt: 0,
        totalDamageReceived: 0,
        totalHealingDone: 0,
        totalHealingReceived: 0,
        hp: unit.stats.vitality * 8,
        maxHp: unit.stats.vitality * 8
      }));
      setUnits(initialUnits);
    }
  }, [battleLog]);

  // Battle simulation loop
  useEffect(() => {
    if (!isPaused && !isComplete) {
      const interval = setInterval(() => {
        setUnits(prevUnits => {
          const updatedUnits = [...prevUnits];
          
          // Process each unit's turn
          for (let i = 0; i < updatedUnits.length; i++) {
            const unit = updatedUnits[i];
            if (unit.hp <= 0) continue;

            // Update attack meter based on speed (120 speed = 3x faster than 40 speed)
            const meterIncrease = (unit.stats.speed / 40) * playbackSpeed;
            let newMeter = unit.attackMeter + meterIncrease;

            if (newMeter >= 100) {
              // Reset meter and perform attack
              newMeter = 0;
              const target = selectTarget(unit, updatedUnits);
              if (target) {
                // Select skill based on cooldowns
                const availableSkills = [unit.skills.basic];
                if (unit.skills.advanced) availableSkills.push(unit.skills.advanced);
                if (unit.skills.ultimate) availableSkills.push(unit.skills.ultimate);
                
                const selectedSkill = availableSkills[Math.floor(Math.random() * availableSkills.length)];
                const damage = Math.floor(selectedSkill.damage * (unit.stats.attack / 100));
                
                target.hp = Math.max(0, target.hp - damage);
                unit.totalDamageDealt += damage;
                target.totalDamageReceived += damage;

                const actionMessage = `${unit.name} used ${selectedSkill.name} on ${target.name} for ${damage} damage!`;
                setActionLog(prev => [...prev, actionMessage]);

                if (target.hp <= 0) {
                  setActionLog(prev => [...prev, `${target.name} has been defeated!`]);
                  checkBattleEnd();
                }
              }
            }

            updatedUnits[i] = {
              ...unit,
              attackMeter: newMeter
            };
          }
          return updatedUnits;
        });
      }, 100);

      return () => clearInterval(interval);
    }
  }, [isPaused, playbackSpeed, isComplete]);

  const selectTarget = (attacker: BattleUnit, allUnits: BattleUnit[]) => {
    // Get first log entry that has allies defined
    const battleEntry = battleLog.find(log => log.allies && Array.isArray(log.allies));
    const isAlly = battleEntry?.allies?.some(a => a.id === attacker.id) || false;

    const possibleTargets = allUnits.filter(u =>
      u.hp > 0 &&
      (isAlly ? battleEntry?.enemies?.some(e => e.id === u.id) : battleEntry?.allies?.some(a => a.id === u.id))
    );
    return possibleTargets[Math.floor(Math.random() * possibleTargets.length)];
  };

  const performAction = (attacker: BattleUnit, target: BattleUnit) => {
    const attackCount = attacker.lastSkillUse + 1;
    let skill = attacker.skills.basic;
    let skillType = 'basic';

    // Check for ultimate/advanced skill usage based on cooldown
    if (attacker.skills.ultimate && attackCount % attacker.skills.ultimate.cooldown === 0) {
      skill = attacker.skills.ultimate;
      skillType = 'ultimate';
    } else if (attacker.skills.advanced && attackCount % attacker.skills.advanced.cooldown === 0) {
      skill = attacker.skills.advanced;
      skillType = 'advanced';
    }

    // Calculate damage based on attacker's attack stat
    const damage = Math.floor(skill.damage * (attacker.stats.attack / 100));
    const actionMessage = `${attacker.name} used ${skill.name} (${skillType}) on ${target.name} for ${damage} damage!`;

    setActionLog(prev => [...prev, actionMessage]);

    setUnits(prevUnits =>
      prevUnits.map(u => {
        if (u.id === target.id) {
          const newHp = Math.max(0, u.hp - damage);
          return {
            ...u,
            hp: newHp,
            totalDamageReceived: u.totalDamageReceived + damage
          };
        }
        if (u.id === attacker.id) {
          return {
            ...u,
            lastSkillUse: attackCount,
            totalDamageDealt: u.totalDamageDealt + damage
          };
        }
        return u;
      })
    );

    checkBattleEnd();
  };

  const checkBattleEnd = () => {
    const battleEntry = battleLog.find(log => log.allies && Array.isArray(log.allies));
    const allies = units.filter(u => battleEntry?.allies.some(a => a.id === u.id));
    const enemies = units.filter(u => battleEntry?.enemies.some(e => e.id === u.id));

    const allAlliesDefeated = allies.every(a => a.hp <= 0);
    const allEnemiesDefeated = enemies.every(e => e.hp <= 0);

    if (allAlliesDefeated || allEnemiesDefeated) {
      setIsComplete(true);
      setActionLog(prev => [
        ...prev,
        `Battle ended! ${allAlliesDefeated ? 'Enemies' : 'Allies'} are victorious!`
      ]);
    }
  };

  const renderUnitStats = (unit: BattleUnit) => (
    <div className="grid grid-cols-2 gap-2 mt-2 text-xs">
      <div className="flex items-center">
        <Swords className="h-3 w-3 mr-1 text-red-400" />
        <span>ATK: {unit.stats.attack}</span>
      </div>
      <div className="flex items-center">
        <Heart className="h-3 w-3 mr-1 text-red-500" />
        <span>VIT: {unit.stats.vitality}</span>
      </div>
      <div className="flex items-center">
        <Shield className="h-3 w-3 mr-1 text-blue-400" />
        <span>DEF: {unit.stats.vitality * 8}</span>
      </div>
      <div className="flex items-center">
        <Zap className="h-3 w-3 mr-1 text-yellow-400" />
        <span>SPD: {unit.stats.speed}</span>
      </div>
    </div>
  );

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="bg-[#1A1A2E] border-[#432874] text-[#C8B8DB] max-w-4xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-[#FF9D00] font-cinzel">
            Battle Log - Stage {currentStage + 1}
          </DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="live" className="w-full">
          <TabsList>
            <TabsTrigger value="live">Live Battle</TabsTrigger>
            <TabsTrigger value="summary">Summary</TabsTrigger>
            <TabsTrigger value="log">Action Log</TabsTrigger>
          </TabsList>

          <TabsContent value="live" className="space-y-4">
            <div className="flex justify-between items-center">
              <div className="space-x-2">
                <Button
                  variant="outline"
                  onClick={() => setIsPaused(!isPaused)}
                  className="w-24"
                >
                  {isPaused ? 'Resume' : 'Pause'}
                </Button>
                <Button
                  variant="outline"
                  onClick={() => handleSpeedChange(playbackSpeed === 1 ? 2 : playbackSpeed === 2 ? 4 : 1)}
                  className="w-24"
                >
                  {playbackSpeed}x Speed
                </Button>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <h3 className="font-semibold">Allies</h3>
                {units.filter(u => battleLog[0]?.allies?.some(a => a.id === u.id)).map(unit => (
                  <div key={unit.id} className="bg-[#432874]/20 p-2 rounded">
                    <div className="flex justify-between">
                      <span>{unit.name}</span>
                      <span>{Math.ceil(unit.hp)}/{unit.maxHp} HP</span>
                    </div>
                    <div className="w-full bg-[#432874]/30 h-2 rounded">
                      <motion.div
                        className="bg-[#00B9AE] h-full rounded"
                        style={{ width: `${(unit.hp / unit.maxHp) * 100}%` }}
                      />
                    </div>
                    <div className="w-full bg-[#432874]/30 h-1 rounded mt-1">
                      <motion.div
                        className="bg-[#FF9D00] h-full rounded"
                        style={{ width: `${unit.attackMeter}%` }}
                      />
                    </div>
                    {renderUnitStats(unit)}
                  </div>
                ))}
              </div>

              <div className="space-y-2">
                <h3 className="font-semibold">Enemies</h3>
                {units.filter(u => battleLog[0]?.enemies?.some(e => e.id === u.id)).map(unit => (
                  <div key={unit.id} className="bg-[#432874]/20 p-2 rounded">
                    <div className="flex justify-between">
                      <span>{unit.name}</span>
                      <span>{Math.ceil(unit.hp)}/{unit.maxHp} HP</span>
                    </div>
                    <div className="w-full bg-[#432874]/30 h-2 rounded">
                      <motion.div
                        className="bg-[#DC143C] h-full rounded"
                        style={{ width: `${(unit.hp / unit.maxHp) * 100}%` }}
                      />
                    </div>
                    <div className="w-full bg-[#432874]/30 h-1 rounded mt-1">
                      <motion.div
                        className="bg-[#FF9D00] h-full rounded"
                        style={{ width: `${unit.attackMeter}%` }}
                      />
                    </div>
                    {renderUnitStats(unit)}
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="summary">
            <div className="space-y-4">
              <h3 className="font-semibold">Battle Statistics</h3>
              {units.map(unit => (
                <div key={unit.id} className="bg-[#432874]/20 p-3 rounded">
                  <h4 className="font-medium mb-2">{unit.name}</h4>
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div>Damage Dealt: {unit.totalDamageDealt}</div>
                    <div>Damage Received: {unit.totalDamageReceived}</div>
                    <div>Healing Done: {unit.totalHealingDone}</div>
                    <div>Healing Received: {unit.totalHealingReceived}</div>
                  </div>
                </div>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="log">
            <div className="h-[400px] overflow-y-auto space-y-1">
              {actionLog.map((log, index) => (
                <div key={index} className="text-sm py-1 border-b border-[#432874]/20">
                  {log}
                </div>
              ))}
            </div>
          </TabsContent>
        </Tabs>

        <DialogFooter>
          {isComplete ? (
            <Button
              className="bg-[#FF9D00] hover:bg-[#FF9D00]/80"
              onClick={() => {
                if (runId && onCompleteDungeon) {
                  onCompleteDungeon(runId);
                }
                onClose();
              }}
            >
              Complete Battle
            </Button>
          ) : (
            <Button
              variant="outline"
              onClick={() => setIsPaused(!isPaused)}
            >
              {isPaused ? 'Resume Battle' : 'Pause Battle'}
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default BattleLog;

=== client/src/hooks/use-mobile.tsx ===
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


=== client/src/hooks/use-toast.ts ===
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


=== client/src/lib/queryClient.ts ===
import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey[0] as string, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});


=== client/src/lib/utils.ts ===
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


=== client/src/lib/discordAuth.ts ===
import { useAuthStore } from './zustandStore';

/**
 * Handles the Discord OAuth2 authentication flow.
 */
export const discordAuth = {
  /**
   * Redirects the user to Discord's authorization endpoint.
   */
  login: () => {
    useAuthStore.getState().loginWithDiscord();
  },
  
  /**
   * Logs the user out by clearing their session.
   */
  logout: async () => {
    await useAuthStore.getState().logout();
  },
  
  /**
   * Checks if the user is authenticated.
   */
  isAuthenticated: (): boolean => {
    return useAuthStore.getState().isAuthenticated;
  },
  
  /**
   * Gets the current authenticated user.
   */
  getUser: () => {
    return useAuthStore.getState().user;
  },
  
  /**
   * Refreshes the user information from the server.
   */
  refreshUser: async () => {
    return await useAuthStore.getState().fetchUser();
  }
};

/**
 * Custom hook for using Discord auth in components
 */
export const useDiscordAuth = () => {
  const { user, isAuthenticated, isLoading, loginWithDiscord, logout, fetchUser } = useAuthStore();
  
  return {
    user,
    isAuthenticated,
    isLoading,
    login: loginWithDiscord,
    logout,
    fetchUser
  };
};


=== client/src/lib/zustandStore.ts ===
import { create } from 'zustand';
import { apiRequest } from './queryClient';
import type { User, Character, Aura, Resource, FarmingTask, DungeonRun, ForgingTask, BlackMarketListing, BountyQuest } from '@shared/schema';

interface AuthState {
  user: User | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  loginWithDiscord: () => void;
  logout: () => void;
  fetchUser: () => Promise<User | null>;
}

interface GameState {
  // Resources
  forgeTokens: number;
  rogueCredits: number;
  soulShards: number;
  resources: Resource[];
  
  // Game Settings
  speedBoostActive: boolean;
  speedBoostMultiplier: number;
  
  // Collections
  characters: Character[];
  auras: Aura[];
  
  // Active tasks
  farmingTasks: FarmingTask[];
  dungeonRuns: DungeonRun[];
  forgingTasks: ForgingTask[];
  
  // Marketplace
  blackMarketListings: BlackMarketListing[];
  
  // Bounties
  bountyQuests: BountyQuest[];
  
  // Discord chat
  discordMessages: { id: string; username: string; content: string; timestamp: Date }[];
  
  // Functions
  updateCurrencies: (forgeTokens: number, rogueCredits: number, soulShards: number) => void;
  fetchResources: () => Promise<void>;
  fetchCharacters: () => Promise<void>;
  fetchAuras: () => Promise<void>;
  fetchFarmingTasks: () => Promise<void>;
  fetchDungeonRuns: () => Promise<void>;
  fetchForgingTasks: () => Promise<void>;
  fetchBlackMarketListings: () => Promise<void>;
  fetchBountyQuests: () => Promise<void>;
  
  addDiscordMessage: (username: string, content: string) => void;
}

// Auth store
export const useAuthStore = create<AuthState>((set, get) => ({
  user: null,
  isLoading: true,
  isAuthenticated: false,
  
  loginWithDiscord: () => {
    // In development mode, we can use the dev-login endpoint
    const isLocal = window.location.hostname === 'localhost' || window.location.hostname.includes('replit');
    
    if (isLocal) {
      console.log('Using dev login route for local/replit development');
      window.location.href = '/api/auth/dev-login';
    } else {
      // Use real Discord auth in production
      window.location.href = '/api/auth/discord';
    }
  },
  
  logout: async () => {
    try {
      await apiRequest('GET', '/api/auth/logout', undefined);
      set({ user: null, isAuthenticated: false });
    } catch (error) {
      console.error('Logout failed:', error);
    }
  },
  
  fetchUser: async () => {
    set({ isLoading: true });
    try {
      const res = await fetch('/api/auth/user', { credentials: 'include' });
      if (res.ok) {
        const user = await res.json();
        set({ user, isAuthenticated: true, isLoading: false });
        
        // Update game store with user's currencies
        const gameStore = useGameStore.getState();
        gameStore.updateCurrencies(user.forgeTokens || 0, user.rogueCredits || 0, user.soulShards || 0);
        
        return user;
      } else {
        set({ user: null, isAuthenticated: false, isLoading: false });
        return null;
      }
    } catch (error) {
      console.error('Error fetching user:', error);
      set({ user: null, isAuthenticated: false, isLoading: false });
      return null;
    }
  }
}));

// Game store
export const useGameStore = create<GameState>((set, get) => ({
  // Resources
  forgeTokens: 0,
  rogueCredits: 0,
  soulShards: 0,
  resources: [],
  
  // Game Settings
  speedBoostActive: true,
  speedBoostMultiplier: 10,
  
  // Collections
  characters: [],
  auras: [],
  
  // Active tasks
  farmingTasks: [],
  dungeonRuns: [],
  forgingTasks: [],
  
  // Marketplace
  blackMarketListings: [],
  
  // Bounties
  bountyQuests: [],
  
  // Discord chat
  discordMessages: [
    { id: '1', username: 'GuildMaster', content: 'Anyone want to try the new dungeon?', timestamp: new Date() },
    { id: '2', username: 'AuraCollector', content: 'I got a rare Fire Aura from fusion!', timestamp: new Date() },
    { id: '3', username: 'ForgeHero', content: "I'll join the dungeon run in 5", timestamp: new Date() }
  ],
  
  // Update currencies
  updateCurrencies: (forgeTokens, rogueCredits, soulShards) => {
    set({ forgeTokens, rogueCredits, soulShards });
  },
  
  // Functions
  fetchResources: async () => {
    try {
      const res = await fetch('/api/resources', { credentials: 'include' });
      if (res.ok) {
        const resources = await res.json();
        set({ resources });
      }
    } catch (error) {
      console.error('Error fetching resources:', error);
    }
  },
  
  fetchCharacters: async () => {
    try {
      const res = await fetch('/api/characters', { credentials: 'include' });
      if (res.ok) {
        const characters = await res.json();
        set({ characters });
      }
    } catch (error) {
      console.error('Error fetching characters:', error);
    }
  },
  
  fetchAuras: async () => {
    try {
      const res = await fetch('/api/auras', { credentials: 'include' });
      if (res.ok) {
        const auras = await res.json();
        set({ auras });
      }
    } catch (error) {
      console.error('Error fetching auras:', error);
    }
  },
  
  fetchFarmingTasks: async () => {
    try {
      const res = await fetch('/api/farming/tasks', { credentials: 'include' });
      if (res.ok) {
        const farmingTasks = await res.json();
        set({ farmingTasks });
      }
    } catch (error) {
      console.error('Error fetching farming tasks:', error);
    }
  },
  
  fetchDungeonRuns: async () => {
    try {
      const res = await fetch('/api/dungeons/runs', { credentials: 'include' });
      if (res.ok) {
        const dungeonRuns = await res.json();
        set({ dungeonRuns });
      }
    } catch (error) {
      console.error('Error fetching dungeon runs:', error);
    }
  },
  
  fetchForgingTasks: async () => {
    try {
      const res = await fetch('/api/forge/tasks', { credentials: 'include' });
      if (res.ok) {
        const forgingTasks = await res.json();
        set({ forgingTasks });
      }
    } catch (error) {
      console.error('Error fetching forging tasks:', error);
    }
  },
  
  fetchBlackMarketListings: async () => {
    try {
      const res = await fetch('/api/blackmarket/listings', { credentials: 'include' });
      if (res.ok) {
        const blackMarketListings = await res.json();
        set({ blackMarketListings });
      }
    } catch (error) {
      console.error('Error fetching black market listings:', error);
    }
  },
  
  fetchBountyQuests: async () => {
    try {
      const res = await fetch('/api/bounty/quests', { credentials: 'include' });
      if (res.ok) {
        const bountyQuests = await res.json();
        set({ bountyQuests });
      }
    } catch (error) {
      console.error('Error fetching bounty quests:', error);
    }
  },
  
  addDiscordMessage: (username: string, content: string) => {
    const newMessage = {
      id: Date.now().toString(),
      username,
      content,
      timestamp: new Date()
    };
    set((state) => ({
      discordMessages: [...state.discordMessages, newMessage].slice(-100) // Keep only latest 100 messages
    }));
  }
}));


=== client/src/pages/not-found.tsx ===
import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}


=== client/src/pages/dashboard.tsx ===
import DashboardView from "@/components/dashboard/DashboardView";

const Dashboard = () => {
  return <DashboardView />;
};

export default Dashboard;


=== client/src/pages/characters.tsx ===
import CharactersView from "@/components/characters/CharactersView";

const Characters = () => {
  return <CharactersView />;
};

export default Characters;


=== client/src/pages/dungeons.tsx ===
import DungeonView from "@/components/dungeons/DungeonView";

const Dungeons = () => {
  return <DungeonView />;
};

export default Dungeons;


=== client/src/pages/farming.tsx ===
import FarmingView from "@/components/farming/FarmingView";

const Farming = () => {
  return <FarmingView />;
};

export default Farming;


=== client/src/pages/forge.tsx ===
import ForgeView from "@/components/forge/ForgeView";

const Forge = () => {
  return <ForgeView />;
};

export default Forge;


=== client/src/pages/blackmarket.tsx ===
import BlackMarketView from "@/components/blackmarket/BlackMarketView";

const BlackMarket = () => {
  return <BlackMarketView />;
};

export default BlackMarket;


=== client/src/pages/buildings.tsx ===
import BuildingsView from "@/components/buildings/BuildingsView";

const Buildings = () => {
  return <BuildingsView />;
};

export default Buildings;


=== client/src/pages/bounty.tsx ===
import BountyBoardView from "@/components/bounty/BountyBoardView";

const Bounty = () => {
  return <BountyBoardView />;
};

export default Bounty;


=== client/src/pages/collections.tsx ===
import { useEffect } from 'react';
import CollectionsView from '@/components/collections/CollectionsView';
import { useDiscordAuth } from '@/lib/discordAuth';
import { Redirect } from 'wouter';

export default function Collections() {
  const { user } = useDiscordAuth();

  // Redirect unauthenticated users
  if (!user) {
    return <Redirect to="/" />;
  }

  return (
    <div className="container mx-auto p-4">
      <CollectionsView />
    </div>
  );
}

=== client/src/pages/inventory.tsx ===
import InventoryView from '@/components/inventory/InventoryView';

export default function InventoryPage() {
  return <InventoryView />;
}

=== client/src/main.tsx ===
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

const meta = document.createElement('meta');
meta.name = 'description';
meta.content = 'The Forge - Aura Forge management platform for crafting, fusion, farming, and dungeon exploration.';
document.head.appendChild(meta);

const title = document.createElement('title');
title.textContent = 'The Forge - Fantasy RPG Management Platform';
document.head.appendChild(title);

// Import fonts
const fontLink = document.createElement('link');
fontLink.rel = 'stylesheet';
fontLink.href = 'https://fonts.googleapis.com/css2?family=Cinzel:wght@400;600;700&family=Nunito:wght@300;400;600;700&family=Metamorphous&display=swap';
document.head.appendChild(fontLink);

createRoot(document.getElementById("root")!).render(<App />);


=== client/src/index.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 240 35% 11%;
    --foreground: 263 30% 85%;

    --card: 240 35% 13%;
    --card-foreground: 263 30% 85%;

    --popover: 240 38% 13%;
    --popover-foreground: 263 30% 85%;

    --primary: 263 48% 30%;
    --primary-foreground: 26 100% 50%;

    --secondary: 26 100% 50%;
    --secondary-foreground: 240 38% 13%;

    --muted: 263 15% 25%;
    --muted-foreground: 263 20% 70%;

    --accent: 174 100% 36%;
    --accent-foreground: 240 38% 13%;

    --destructive: 0 84% 60%;
    --destructive-foreground: 210 20% 98%;

    --border: 263 30% 30%;
    --input: 263 30% 20%;
    --ring: 263 50% 45%;

    --radius: 0.5rem;

    --chart-1: 263 48% 30%;
    --chart-2: 26 100% 50%;
    --chart-3: 174 100% 36%;
    --chart-4: 184 80% 50%;
    --chart-5: 330 80% 50%;

    --sidebar-background: 240 35% 13%;
    --sidebar-foreground: 263 30% 85%;
    --sidebar-primary: 263 48% 30%;
    --sidebar-primary-foreground: 26 100% 50%;
    --sidebar-accent: 174 100% 36%;
    --sidebar-accent-foreground: 240 38% 13%;
    --sidebar-border: 263 30% 30%;
    --sidebar-ring: 263 50% 45%;
  }
  
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
}

/* Custom font families */
.font-cinzel {
  font-family: 'Cinzel', serif;
}

.font-nunito {
  font-family: 'Nunito', sans-serif;
}

.font-metamorphous {
  font-family: 'Metamorphous', cursive;
}


=== client/src/App.tsx ===
import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import NotFound from "@/pages/not-found";
import MainLayout from "@/components/layout/MainLayout";
import Dashboard from "@/pages/dashboard";
import Inventory from "@/pages/inventory";
import Dungeons from "@/pages/dungeons";
import Farming from "@/pages/farming";
import Forge from "@/pages/forge";
import BlackMarket from "@/pages/blackmarket";
import Buildings from "@/pages/buildings";
import Bounty from "@/pages/bounty";
import Collections from "@/pages/collections";

function Router() {
  return (
    <Switch>
      <Route path="/" component={Dashboard} />
      <Route path="/inventory" component={Inventory} />
      <Route path="/dungeons" component={Dungeons} />
      <Route path="/farming" component={Farming} />
      <Route path="/forge" component={Forge} />
      <Route path="/blackmarket" component={BlackMarket} />
      <Route path="/buildings" component={Buildings} />
      <Route path="/bounty" component={Bounty} />
      <Route path="/collections" component={Collections} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <MainLayout>
        <Router />
      </MainLayout>
      <Toaster />
    </QueryClientProvider>
  );
}

export default App;


=== client/index.html ===
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
    <link rel="icon" type="image/svg+xml" href="https://cdn-icons-png.flaticon.com/512/1156/1156897.png" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
    <!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment -->
    <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
  </body>
</html>


=== server/vite.ts ===
import express, { type Express } from "express";
import fs from "fs";
import path from "path";
import { createServer as createViteServer, createLogger } from "vite";
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(import.meta.dirname, "public");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`,
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  });
}


=== server/types.d.ts ===
// Extending express-session with custom session data
import 'express-session';

declare module 'express-session' {
  interface SessionData {
    userId: number;
  }
}

=== server/db.ts ===
import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from "ws";
import * as schema from "@shared/schema";

neonConfig.webSocketConstructor = ws;

if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}

export const pool = new Pool({ connectionString: process.env.DATABASE_URL });
export const db = drizzle(pool, { schema });

=== server/index.ts ===
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { registerAdminRoutes } from "./admin";
import { setupVite, serveStatic, log } from "./vite";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  const server = await registerRoutes(app);
  
  // Register admin routes
  await registerAdminRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on port 5000
  // this serves both the API and the client.
  // It is the only port that is not firewalled.
  const port = 5000;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`serving on port ${port}`);
  });
})();


=== server/admin.ts ===
import { Express, Request, Response } from 'express';
import { storage } from './storage';

export async function registerAdminRoutes(app: Express) {
  // Admin endpoint to add 15,000 Essence
  app.post('/api/admin/add-essence', async (req: Request, res: Response) => {
    try {
      // Get user ID (using ID 1 for development)
      const userId = 1;
      
      // Check if Essence resource exists
      let essence = await storage.getResourceByNameAndUserId('Essence', userId);
      
      if (essence) {
        // Update existing resource
        const updatedEssence = await storage.updateResource(essence.id, {
          quantity: (essence.quantity || 0) + 15000
        });
        res.json(updatedEssence);
      } else {
        // Create new Essence resource
        const newEssence = await storage.createResource({
          userId,
          name: 'Essence',
          description: 'Magical essence used for crafting and upgrading',
          type: 'crafting',
          iconUrl: 'https://images.unsplash.com/photo-1614728263952-84ea256f9679?w=150&h=150&fit=crop',
          quantity: 15000
        });
        res.json(newEssence);
      }
      
      // Log activity
      await storage.createActivityLog({
        userId,
        activityType: 'resource_added',
        description: 'Added 15,000 Essence',
        relatedIds: {}
      });
      
      console.log('Added 15,000 Essence to user account');
      
    } catch (error) {
      console.error('Error adding essence:', error);
      res.status(500).json({ message: 'Failed to add essence' });
    }
  });
  
  // Admin endpoint to add 5,000 Rogue Credits and 5,000 Forge Tokens
  app.post('/api/admin/add-currency', async (req: Request, res: Response) => {
    try {
      // Get user ID (using ID 1 for development)
      const userId = 1;
      
      // Get the user
      const user = await storage.getUserById(userId);
      
      if (user) {
        // Update user with additional currency
        const updatedUser = await storage.updateUser(userId, {
          rogueCredits: (user.rogueCredits || 0) + 5000,
          forgeTokens: (user.forgeTokens || 0) + 5000
        });
        
        // Log activity
        await storage.createActivityLog({
          userId,
          activityType: 'currency_added',
          description: 'Added 5,000 Rogue Credits and 5,000 Forge Tokens',
          relatedIds: {}
        });
        
        console.log('Added currency to user account', updatedUser);
        res.json({ success: true, user: updatedUser });
      } else {
        res.status(404).json({ message: 'User not found' });
      }
    } catch (error) {
      console.error('Error adding currency:', error);
      res.status(500).json({ message: 'Failed to add currency' });
    }
  });
  
  // Add more admin routes here as needed
}

=== server/townhallSkills.ts ===
// Townhall skill tree structure
export const townhallSkillTree = [
  // Main Townhall skills
  {
    id: 'resource_production',
    name: 'Resource Production',
    description: 'Increases resource gain by 5% per level',
    maxLevel: 5
  },
  {
    id: 'experience_boost',
    name: 'Experience Boost',
    description: 'Increases XP gain by 5% per level',
    maxLevel: 5
  },
  {
    id: 'construction_speed',
    name: 'Construction Speed',
    description: 'Reduces building upgrade time by 5% per level',
    maxLevel: 5
  },
  {
    id: 'extra_farming_slot',
    name: 'Extra Farming Slot',
    description: 'Unlocks an additional farming slot',
    maxLevel: 5
  },

  // Farm Plot unlocks
  { 
    id: 'th_farm_plot_1', 
    name: 'Farm Plot #1', 
    description: 'Unlocks farm plot #1 (requires Building Plans)', 
    maxLevel: 1 
  },
  { 
    id: 'th_farm_plot_2', 
    name: 'Farm Plot #2', 
    description: 'Unlocks farm plot #2 (requires Building Plans)', 
    maxLevel: 1 
  },
  { 
    id: 'th_farm_plot_3', 
    name: 'Farm Plot #3', 
    description: 'Unlocks farm plot #3 (requires Building Plans)', 
    maxLevel: 1 
  },
  { 
    id: 'th_farm_plot_4', 
    name: 'Farm Plot #4', 
    description: 'Unlocks farm plot #4 (requires Building Plans)', 
    maxLevel: 1 
  },
  { 
    id: 'th_farm_plot_5', 
    name: 'Farm Plot #5', 
    description: 'Unlocks farm plot #5 (requires Building Plans)', 
    maxLevel: 1 
  },
  
  // Forge Crafting Slot unlocks
  { 
    id: 'th_forge_slot_1', 
    name: 'Forge Crafting Slot #1', 
    description: 'Unlocks forge crafting slot #1 (requires Building Plans)', 
    maxLevel: 1 
  },
  { 
    id: 'th_forge_slot_2', 
    name: 'Forge Crafting Slot #2', 
    description: 'Unlocks forge crafting slot #2 (requires Building Plans)', 
    maxLevel: 1 
  },
  { 
    id: 'th_forge_slot_3', 
    name: 'Forge Crafting Slot #3', 
    description: 'Unlocks forge crafting slot #3 (requires Building Plans)', 
    maxLevel: 1 
  },
  { 
    id: 'th_forge_slot_4', 
    name: 'Forge Crafting Slot #4', 
    description: 'Unlocks forge crafting slot #4 (requires Building Plans)', 
    maxLevel: 1 
  },
  { 
    id: 'th_forge_slot_5', 
    name: 'Forge Crafting Slot #5', 
    description: 'Unlocks forge crafting slot #5 (requires Building Plans)', 
    maxLevel: 1 
  },
  
  // Special unlocks (every 5th level)
  { 
    id: 'th_crafting_station_1', 
    name: 'Crafting Station #1', 
    description: 'Unlocks crafting station #1 (available at Townhall level 5)', 
    maxLevel: 1, 
    requires: { townhall_level: 5 } 
  },
  { 
    id: 'th_crafting_station_2', 
    name: 'Crafting Station #2', 
    description: 'Unlocks crafting station #2 (available at Townhall level 10)', 
    maxLevel: 1, 
    requires: { townhall_level: 10 } 
  },
  { 
    id: 'th_farm_expansion_1', 
    name: 'Farm Expansion #1', 
    description: 'Unlocks an extra farm expansion (available at Townhall level 5)', 
    maxLevel: 1, 
    requires: { townhall_level: 5 } 
  },
  { 
    id: 'th_farm_expansion_2', 
    name: 'Farm Expansion #2', 
    description: 'Unlocks an extra farm expansion (available at Townhall level 10)', 
    maxLevel: 1, 
    requires: { townhall_level: 10 } 
  },
];

/**
 * Checks if a player has the required Building Plans resource
 * @param userId The user ID to check
 * @param storage The storage interface to use
 * @returns True if the player has Building Plans, false otherwise
 */
export async function hasBuildingPlans(userId: number, storage: any): Promise<boolean> {
  try {
    const resource = await storage.getResourceByNameAndUserId('Building Plans', userId);
    return resource && resource.quantity && resource.quantity >= 1;
  } catch (error) {
    console.error('Error checking for Building Plans:', error);
    return false;
  }
}

/**
 * Consumes a Building Plan resource from the player's inventory
 * @param userId The user ID to consume from
 * @param storage The storage interface to use
 * @returns True if successful, false otherwise
 */
export async function consumeBuildingPlan(userId: number, storage: any): Promise<boolean> {
  try {
    const resource = await storage.getResourceByNameAndUserId('Building Plans', userId);
    if (!resource || !resource.quantity || resource.quantity < 1) {
      return false;
    }
    
    await storage.updateResource(resource.id, {
      quantity: resource.quantity - 1
    });
    
    return true;
  } catch (error) {
    console.error('Error consuming Building Plan:', error);
    return false;
  }
}

/**
 * Gets the total available farming plots based on unlocked skills
 * @param unlockedSkills Array of unlocked skill IDs
 * @returns The number of available farming plots
 */
export function getAvailableFarmingPlots(unlockedSkills: string[]): number {
  return unlockedSkills.filter(skill => skill.startsWith('th_farm_plot_')).length;
}

/**
 * Gets the total available forge slots based on unlocked skills
 * @param unlockedSkills Array of unlocked skill IDs
 * @returns The number of available forge slots
 */
export function getAvailableForgeSlots(unlockedSkills: string[]): number {
  return unlockedSkills.filter(skill => skill.startsWith('th_forge_slot_')).length;
}

/**
 * Checks if the player needs to make a special upgrade choice
 * @param currentLevel The current Townhall level
 * @param unlockedSkills Array of unlocked skill IDs
 * @returns True if a special choice is available, false otherwise
 */
export function hasSpecialUpgradeChoice(currentLevel: number, unlockedSkills: string[]): boolean {
  if (currentLevel % 5 !== 0) return false;
  
  const levelSpecificUpgrades = townhallSkillTree.filter(skill => 
    skill.requires && skill.requires.townhall_level === currentLevel
  );
  
  // Check if any of these upgrades haven't been unlocked yet
  return levelSpecificUpgrades.some(skill => !unlockedSkills.includes(skill.id));
}

=== server/storage.ts ===
import { db } from './db';
import {
  users, characters, auras, resources, farmingTasks, dungeonTypes, dungeonRuns,
  forgingTasks, blackMarketListings, bountyQuests, buildingUpgrades, activityLogs,
  type User, type InsertUser, type Character, type InsertCharacter,
  type Aura, type InsertAura, type Resource, type InsertResource,
  type FarmingTask, type InsertFarmingTask, 
  type DungeonType, type InsertDungeonType, type DungeonRun, type InsertDungeonRun,
  type ForgingTask, type InsertForgingTask, type BlackMarketListing, type InsertBlackMarketListing,
  type BountyQuest, type InsertBountyQuest, type BuildingUpgrade, type InsertBuildingUpgrade,
  type ActivityLog, type InsertActivityLog
} from '@shared/schema';
import { eq, and, desc, sql } from 'drizzle-orm';

export interface IStorage {
  // User methods
  getUserById(id: number): Promise<User | undefined>;
  getUserByDiscordId(discordId: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  updateUser(id: number, updates: Partial<User>): Promise<User | undefined>;

  // Character methods
  getCharacters(userId: number): Promise<Character[]>;
  getCharacterById(id: number): Promise<Character | undefined>;
  createCharacter(character: InsertCharacter): Promise<Character>;
  updateCharacter(id: number, updates: Partial<Character>): Promise<Character | undefined>;
  deleteCharacter(id: number): Promise<boolean>;
  getActiveCharacterTasks(characterId: number): Promise<(FarmingTask | ForgingTask)[]>;
  
  // Aura methods
  getAuras(userId: number): Promise<Aura[]>;
  getAuraById(id: number): Promise<Aura | undefined>;
  createAura(aura: InsertAura): Promise<Aura>;
  updateAura(id: number, updates: Partial<Aura>): Promise<Aura | undefined>;
  deleteAura(id: number): Promise<boolean>;
  
  // Resource methods
  getResources(userId: number): Promise<Resource[]>;
  getResourceByNameAndUserId(name: string, userId: number): Promise<Resource | undefined>;
  createResource(resource: InsertResource): Promise<Resource>;
  updateResource(id: number, updates: Partial<Resource>): Promise<Resource | undefined>;
  
  // Farming Task methods
  getFarmingTasks(userId: number): Promise<FarmingTask[]>;
  getFarmingTaskById(id: number): Promise<FarmingTask | undefined>;
  createFarmingTask(task: InsertFarmingTask): Promise<FarmingTask>;
  updateFarmingTask(id: number, updates: Partial<FarmingTask>): Promise<FarmingTask | undefined>;
  deleteFarmingTask(id: number): Promise<boolean>;
  
  // Dungeon Type methods
  getDungeonTypes(): Promise<DungeonType[]>;
  getDungeonTypeById(id: number): Promise<DungeonType | undefined>;
  getDungeonTypesByElement(elementalType: string): Promise<DungeonType[]>;
  getDungeonTypesByDifficulty(difficulty: string): Promise<DungeonType[]>;
  createDungeonType(dungeonType: InsertDungeonType): Promise<DungeonType>;
  updateDungeonType(id: number, updates: Partial<DungeonType>): Promise<DungeonType | undefined>;
  
  // Dungeon Run methods
  getDungeonRuns(userId: number): Promise<DungeonRun[]>;
  getDungeonRunById(id: number): Promise<DungeonRun | undefined>;
  createDungeonRun(run: InsertDungeonRun): Promise<DungeonRun>;
  updateDungeonRun(id: number, updates: Partial<DungeonRun>): Promise<DungeonRun | undefined>;
  
  // Forging Task methods
  getForgingTasks(userId: number): Promise<ForgingTask[]>;
  getForgingTaskById(id: number): Promise<ForgingTask | undefined>;
  createForgingTask(task: InsertForgingTask): Promise<ForgingTask>;
  updateForgingTask(id: number, updates: Partial<ForgingTask>): Promise<ForgingTask | undefined>;
  
  // Black Market methods
  getBlackMarketListings(userId?: number): Promise<BlackMarketListing[]>;
  getBlackMarketListingById(id: number): Promise<BlackMarketListing | undefined>;
  createBlackMarketListing(listing: InsertBlackMarketListing): Promise<BlackMarketListing>;
  updateBlackMarketListing(id: number, updates: Partial<BlackMarketListing>): Promise<BlackMarketListing | undefined>;
  deleteBlackMarketListing(id: number): Promise<boolean>;
  
  // Bounty Quest methods
  getBountyQuests(userId: number): Promise<BountyQuest[]>;
  getBountyQuestById(id: number): Promise<BountyQuest | undefined>;
  createBountyQuest(quest: InsertBountyQuest): Promise<BountyQuest>;
  updateBountyQuest(id: number, updates: Partial<BountyQuest>): Promise<BountyQuest | undefined>;
  
  // Building Upgrade methods
  getBuildingUpgrades(userId: number): Promise<BuildingUpgrade[]>;
  getBuildingUpgradeByTypeAndUserId(buildingType: string, userId: number): Promise<BuildingUpgrade | undefined>;
  createBuildingUpgrade(upgrade: InsertBuildingUpgrade): Promise<BuildingUpgrade>;
  updateBuildingUpgrade(id: number, updates: Partial<BuildingUpgrade>): Promise<BuildingUpgrade | undefined>;
  
  // Activity Log methods
  getActivityLogs(userId: number, limit?: number): Promise<ActivityLog[]>;
  createActivityLog(log: InsertActivityLog): Promise<ActivityLog>;
}

export class DatabaseStorage implements IStorage {
  async getUserById(id: number): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.id, id));
    return user;
  }

  async getUserByDiscordId(discordId: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.discordId, discordId));
    return user;
  }

  async createUser(user: InsertUser): Promise<User> {
    const [newUser] = await db.insert(users).values(user).returning();
    return newUser;
  }

  async updateUser(id: number, updates: Partial<User>): Promise<User | undefined> {
    const [updatedUser] = await db.update(users)
      .set(updates)
      .where(eq(users.id, id))
      .returning();
    return updatedUser;
  }

  async getCharacters(userId: number): Promise<Character[]> {
    return db.select().from(characters).where(eq(characters.userId, userId));
  }

  async getCharacterById(id: number): Promise<Character | undefined> {
    const [character] = await db.select().from(characters).where(eq(characters.id, id));
    return character;
  }

  async createCharacter(character: InsertCharacter): Promise<Character> {
    const [newCharacter] = await db.insert(characters).values(character).returning();
    return newCharacter;
  }

  async updateCharacter(id: number, updates: Partial<Character>): Promise<Character | undefined> {
    const [updatedCharacter] = await db.update(characters)
      .set(updates)
      .where(eq(characters.id, id))
      .returning();
    return updatedCharacter;
  }

  async deleteCharacter(id: number): Promise<boolean> {
    const result = await db.delete(characters).where(eq(characters.id, id));
    return !!result.rowCount;
  }
  
  async getActiveCharacterTasks(characterId: number): Promise<(FarmingTask | ForgingTask)[]> {
    // Get active farming tasks
    const activeFarmingTasks = await db.select()
      .from(farmingTasks)
      .where(
        and(
          eq(farmingTasks.characterId, characterId),
          eq(farmingTasks.completed, false)
        )
      );
    
    // Get active forging tasks
    const activeForgingTasks = await db.select()
      .from(forgingTasks)
      .where(
        and(
          eq(forgingTasks.characterId, characterId),
          eq(forgingTasks.completed, false)
        )
      );
    
    // Combine both task types
    return [...activeFarmingTasks, ...activeForgingTasks];
  }

  async getAuras(userId: number): Promise<Aura[]> {
    return db.select().from(auras).where(eq(auras.userId, userId));
  }

  async getAuraById(id: number): Promise<Aura | undefined> {
    const [aura] = await db.select().from(auras).where(eq(auras.id, id));
    return aura;
  }

  async createAura(aura: InsertAura): Promise<Aura> {
    const [newAura] = await db.insert(auras).values(aura).returning();
    return newAura;
  }

  async updateAura(id: number, updates: Partial<Aura>): Promise<Aura | undefined> {
    const [updatedAura] = await db.update(auras)
      .set(updates)
      .where(eq(auras.id, id))
      .returning();
    return updatedAura;
  }

  async deleteAura(id: number): Promise<boolean> {
    const result = await db.delete(auras).where(eq(auras.id, id));
    return !!result.rowCount;
  }

  async getResources(userId: number): Promise<Resource[]> {
    return db.select().from(resources).where(eq(resources.userId, userId));
  }

  async getResourceByNameAndUserId(name: string, userId: number): Promise<Resource | undefined> {
    const [resource] = await db.select().from(resources)
      .where(and(eq(resources.name, name), eq(resources.userId, userId)));
    return resource;
  }

  async createResource(resource: InsertResource): Promise<Resource> {
    const [newResource] = await db.insert(resources).values(resource).returning();
    return newResource;
  }

  async updateResource(id: number, updates: Partial<Resource>): Promise<Resource | undefined> {
    const [updatedResource] = await db.update(resources)
      .set(updates)
      .where(eq(resources.id, id))
      .returning();
    return updatedResource;
  }

  async getFarmingTasks(userId: number): Promise<FarmingTask[]> {
    return db.select().from(farmingTasks).where(eq(farmingTasks.userId, userId));
  }

  async getFarmingTaskById(id: number): Promise<FarmingTask | undefined> {
    const [task] = await db.select().from(farmingTasks).where(eq(farmingTasks.id, id));
    return task;
  }

  async createFarmingTask(task: InsertFarmingTask): Promise<FarmingTask> {
    const [newTask] = await db.insert(farmingTasks).values(task).returning();
    return newTask;
  }

  async updateFarmingTask(id: number, updates: Partial<FarmingTask>): Promise<FarmingTask | undefined> {
    const [updatedTask] = await db.update(farmingTasks)
      .set(updates)
      .where(eq(farmingTasks.id, id))
      .returning();
    return updatedTask;
  }

  async deleteFarmingTask(id: number): Promise<boolean> {
    const result = await db.delete(farmingTasks).where(eq(farmingTasks.id, id));
    return !!result.rowCount;
  }

  async getDungeonTypes(): Promise<DungeonType[]> {
    return db.select().from(dungeonTypes);
  }

  async getDungeonTypeById(id: number): Promise<DungeonType | undefined> {
    const [dungeonType] = await db.select().from(dungeonTypes).where(eq(dungeonTypes.id, id));
    return dungeonType;
  }

  async getDungeonTypesByElement(elementalType: string): Promise<DungeonType[]> {
    return db.select().from(dungeonTypes).where(eq(dungeonTypes.elementalType, elementalType));
  }

  async getDungeonTypesByDifficulty(difficulty: string): Promise<DungeonType[]> {
    return db.select().from(dungeonTypes).where(eq(dungeonTypes.difficulty, difficulty));
  }

  async createDungeonType(dungeonType: InsertDungeonType): Promise<DungeonType> {
    const [newDungeonType] = await db.insert(dungeonTypes).values(dungeonType).returning();
    return newDungeonType;
  }

  async updateDungeonType(id: number, updates: Partial<DungeonType>): Promise<DungeonType | undefined> {
    const [updatedDungeonType] = await db.update(dungeonTypes)
      .set(updates)
      .where(eq(dungeonTypes.id, id))
      .returning();
    return updatedDungeonType;
  }

  async getDungeonRuns(userId: number): Promise<DungeonRun[]> {
    return db.select().from(dungeonRuns).where(eq(dungeonRuns.userId, userId));
  }

  async getDungeonRunById(id: number): Promise<DungeonRun | undefined> {
    const [run] = await db.select().from(dungeonRuns).where(eq(dungeonRuns.id, id));
    return run;
  }

  async createDungeonRun(run: InsertDungeonRun): Promise<DungeonRun> {
    const [newRun] = await db.insert(dungeonRuns).values(run).returning();
    return newRun;
  }

  async updateDungeonRun(id: number, updates: Partial<DungeonRun>): Promise<DungeonRun | undefined> {
    const [updatedRun] = await db.update(dungeonRuns)
      .set(updates)
      .where(eq(dungeonRuns.id, id))
      .returning();
    return updatedRun;
  }

  async getForgingTasks(userId: number): Promise<ForgingTask[]> {
    return db.select().from(forgingTasks).where(eq(forgingTasks.userId, userId));
  }

  async getForgingTaskById(id: number): Promise<ForgingTask | undefined> {
    const [task] = await db.select().from(forgingTasks).where(eq(forgingTasks.id, id));
    return task;
  }

  async createForgingTask(task: InsertForgingTask): Promise<ForgingTask> {
    const [newTask] = await db.insert(forgingTasks).values(task).returning();
    return newTask;
  }

  async updateForgingTask(id: number, updates: Partial<ForgingTask>): Promise<ForgingTask | undefined> {
    const [updatedTask] = await db.update(forgingTasks)
      .set(updates)
      .where(eq(forgingTasks.id, id))
      .returning();
    return updatedTask;
  }

  async getBlackMarketListings(userId?: number): Promise<BlackMarketListing[]> {
    if (userId) {
      return db.select().from(blackMarketListings).where(eq(blackMarketListings.userId, userId));
    }
    return db.select().from(blackMarketListings);
  }

  async getBlackMarketListingById(id: number): Promise<BlackMarketListing | undefined> {
    const [listing] = await db.select().from(blackMarketListings).where(eq(blackMarketListings.id, id));
    return listing;
  }

  async createBlackMarketListing(listing: InsertBlackMarketListing): Promise<BlackMarketListing> {
    const [newListing] = await db.insert(blackMarketListings).values(listing).returning();
    return newListing;
  }

  async updateBlackMarketListing(id: number, updates: Partial<BlackMarketListing>): Promise<BlackMarketListing | undefined> {
    const [updatedListing] = await db.update(blackMarketListings)
      .set(updates)
      .where(eq(blackMarketListings.id, id))
      .returning();
    return updatedListing;
  }

  async deleteBlackMarketListing(id: number): Promise<boolean> {
    const result = await db.delete(blackMarketListings).where(eq(blackMarketListings.id, id));
    return !!result.rowCount;
  }

  async getBountyQuests(userId: number): Promise<BountyQuest[]> {
    return db.select().from(bountyQuests).where(eq(bountyQuests.userId, userId));
  }

  async getBountyQuestById(id: number): Promise<BountyQuest | undefined> {
    const [quest] = await db.select().from(bountyQuests).where(eq(bountyQuests.id, id));
    return quest;
  }

  async createBountyQuest(quest: InsertBountyQuest): Promise<BountyQuest> {
    const [newQuest] = await db.insert(bountyQuests).values(quest).returning();
    return newQuest;
  }

  async updateBountyQuest(id: number, updates: Partial<BountyQuest>): Promise<BountyQuest | undefined> {
    const [updatedQuest] = await db.update(bountyQuests)
      .set(updates)
      .where(eq(bountyQuests.id, id))
      .returning();
    return updatedQuest;
  }

  async getBuildingUpgrades(userId: number): Promise<BuildingUpgrade[]> {
    return db.select().from(buildingUpgrades).where(eq(buildingUpgrades.userId, userId));
  }

  async getBuildingUpgradeByTypeAndUserId(buildingType: string, userId: number): Promise<BuildingUpgrade | undefined> {
    const [upgrade] = await db.select().from(buildingUpgrades)
      .where(and(eq(buildingUpgrades.buildingType, buildingType), eq(buildingUpgrades.userId, userId)));
    return upgrade;
  }

  async createBuildingUpgrade(upgrade: InsertBuildingUpgrade): Promise<BuildingUpgrade> {
    const [newUpgrade] = await db.insert(buildingUpgrades).values(upgrade).returning();
    return newUpgrade;
  }

  async updateBuildingUpgrade(id: number, updates: Partial<BuildingUpgrade>): Promise<BuildingUpgrade | undefined> {
    const [updatedUpgrade] = await db.update(buildingUpgrades)
      .set(updates)
      .where(eq(buildingUpgrades.id, id))
      .returning();
    return updatedUpgrade;
  }

  async getActivityLogs(userId: number, limit?: number): Promise<ActivityLog[]> {
    const baseQuery = db.select()
      .from(activityLogs)
      .where(eq(activityLogs.userId, userId))
      .orderBy(desc(activityLogs.timestamp));

    if (limit) {
      return baseQuery.limit(limit);
    }

    return baseQuery;
  }

  async createActivityLog(log: InsertActivityLog): Promise<ActivityLog> {
    const [newLog] = await db.insert(activityLogs).values(log).returning();
    return newLog;
  }
}

export const storage = new DatabaseStorage();

=== server/routes.ts ===
import type { Express, Request, Response, NextFunction } from "express";
import session from "express-session";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { ZodError } from "zod";
import { fromZodError } from "zod-validation-error";
import { townhallSkillTree, hasBuildingPlans, consumeBuildingPlan } from './townhallSkills';
import {
  insertUserSchema,
  insertCharacterSchema,
  insertAuraSchema,
  insertResourceSchema,
  insertFarmingTaskSchema,
  insertDungeonRunSchema,
  insertForgingTaskSchema,
  insertBlackMarketListingSchema,
  insertBountyQuestSchema,
  insertBuildingUpgradeSchema,
  insertActivityLogSchema
} from "@shared/schema";

// Global speed boost settings for faster gameplay
const SPEED_BOOST_ACTIVE = true;
const SPEED_BOOST_MULTIPLIER = 10; // 10x speed

// Helper function to apply speed boost to durations
function applySpeedBoost(durationMs: number): number {
  if (SPEED_BOOST_ACTIVE) {
    return Math.floor(durationMs / SPEED_BOOST_MULTIPLIER);
  }
  return durationMs;
}

// Configure session middleware for authentication
const configureSession = (app: Express) => {
  app.use(session({
    secret: process.env.SESSION_SECRET || 'forge-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { 
      secure: process.env.NODE_ENV === 'production',
      maxAge: 1000 * 60 * 60 * 24 // 24 hours
    }
  }));
};

// Authentication middleware
const authenticateUser = async (req: Request, res: Response, next: Function) => {
  if (!req.session.userId) {
    return res.status(401).json({ message: 'Unauthorized. Please log in.' });
  }
  
  const user = await storage.getUserById(req.session.userId);
  if (!user) {
    req.session.destroy(() => {});
    return res.status(401).json({ message: 'User not found. Please log in again.' });
  }
  
  next();
};

// Error handling middleware
const handleErrors = (err: any, req: Request, res: Response, next: Function) => {
  if (err instanceof ZodError) {
    const validationError = fromZodError(err);
    return res.status(400).json({ message: validationError.message });
  }
  
  console.error('Error:', err);
  res.status(500).json({ message: 'Internal server error' });
};

export async function registerRoutes(app: Express): Promise<Server> {
  configureSession(app);
  const httpServer = createServer(app);
  
  // WebSocket functionality temporarily removed to fix startup issues
  
  // Discord OAuth routes
  app.get('/api/auth/discord', (req, res) => {
    // In a real implementation, you would redirect to Discord OAuth
    // For this MVP, we'll simulate a successful login
    res.redirect('/api/auth/discord/callback?code=mock_code');
  });
  
  // Direct login route for development
  app.get('/api/auth/dev-login', async (req, res) => {
    try {
      console.log('Starting dev login process');
      
      // Define a default dev user
      const devUserId = 'dev123456';
      
      let user;
      
      // First try to find an existing user
      try {
        user = await storage.getUserByDiscordId(devUserId);
        console.log('User exists check result:', user ? 'Found existing user' : 'No user found, creating new one');
      } catch (findError) {
        console.error('Error checking for existing user:', findError);
        user = null;
      }
      
      if (!user) {
        try {
          // Create new dev user with fixed details
          const mockUser = {
            discordId: devUserId,
            username: 'DevUser',
            avatarUrl: 'https://cdn.pixabay.com/photo/2021/03/02/12/03/avatar-6062252_1280.png',
            roles: ['member'],
            forgeTokens: 5000,
            rogueCredits: 2000,
            soulShards: 25,
            lastLogin: new Date(),
            isAdmin: true
          };
          
          // Create new dev user
          user = await storage.createUser(mockUser);
          console.log('Created new dev user with ID:', user.id);
          
          // Create initial resources
          await storage.createResource({
            userId: user.id,
            name: 'Celestial Ore',
            type: 'material',
            quantity: 100,
            description: 'A rare material used in crafting Auras',
            iconUrl: 'https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop'
          });
          
          // Add more starter resources
          await storage.createResource({
            userId: user.id,
            name: 'Abyssal Pearl',
            type: 'material',
            quantity: 50,
            description: 'A rare material from the ocean depths',
            iconUrl: 'https://images.unsplash.com/photo-1576566588028-4147f3842f27?w=150&h=150&fit=crop'
          });
          
          // Create a starter character
          await storage.createCharacter({
            userId: user.id,
            name: 'Dragonslayer',
            class: 'Warrior',
            level: 15,
            attack: 25,
            defense: 30,
            vitality: 150,
            speed: 20,
            focus: 15,
            accuracy: 22,
            resilience: 28,
            avatarUrl: 'https://images.unsplash.com/photo-1580519542036-c47de6d5f458?w=250&h=250&fit=crop'
          });
          
          console.log('Created initial resources and starter character');
        } catch (createError) {
          console.error('Error creating dev user or starter content:', createError);
          return res.status(500).json({ 
            message: 'Dev login failed - Could not create user', 
            error: String(createError) 
          });
        }
      } else {
        console.log('Using existing dev user with ID:', user.id);
        
        // Update login time
        try {
          user = await storage.updateUser(user.id, { lastLogin: new Date() });
          console.log('Updated user login time');
        } catch (updateError) {
          console.error('Failed to update login time:', updateError);
          // Continue anyway as this is not critical
        }
      }
      
      if (!user || !user.id) {
        throw new Error('Failed to get a valid user object');
      }
      
      // Set session
      req.session.userId = user.id;
      console.log('Set session userId to:', user.id);
      
      // Redirect to client
      res.redirect('/?dev=true');
    } catch (error) {
      console.error('Dev login error:', error);
      res.status(500).json({ 
        message: 'Dev login failed', 
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  
  app.get('/api/auth/discord/callback', async (req, res) => {
    try {
      // Simulate getting user from Discord
      const mockDiscordUser = {
        id: '123456789',
        username: 'ForgeHero',
        avatar: 'https://cdn.pixabay.com/photo/2021/03/02/12/03/avatar-6062252_1280.png',
        roles: ['member']
      };
      
      console.log('In Discord callback route with mock user:', mockDiscordUser);
      
      // Declare the user variable outside the try/catch block so it's accessible throughout the function
      let userData = null;
      
      try {
        // Check if user exists
        userData = await storage.getUserByDiscordId(mockDiscordUser.id);
        console.log('Retrieved user from database:', userData ? 'User found' : 'User not found');
        
        if (!userData) {
          // Create new user
          console.log('Creating new user');
          userData = await storage.createUser({
            discordId: mockDiscordUser.id,
            username: mockDiscordUser.username,
            avatarUrl: mockDiscordUser.avatar,
            roles: mockDiscordUser.roles,
            forgeTokens: 6200,
            rogueCredits: 2450,
            soulShards: 34,
            lastLogin: new Date(),
            isAdmin: false // Explicitly set isAdmin field for new users
          });
          console.log('New user created with ID:', userData.id);
          
          // Create initial resources for new user
          await storage.createResource({
            userId: userData.id,
            name: 'Celestial Ore',
            type: 'material',
            quantity: 156,
            description: 'A rare material used in crafting Auras',
            iconUrl: 'https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop'
          });
          console.log('Initial resources created for new user');
        } else {
          // Update existing user's login time
          console.log('Updating existing user login time, ID:', userData.id);
          userData = await storage.updateUser(userData.id, { lastLogin: new Date() });
        }
      } catch (dbError) {
        console.error('Database error during user lookup/creation:', dbError);
        // Create a temporary user to continue with the auth flow for debugging
        const tempUser = {
          id: 1,
          discordId: mockDiscordUser.id,
          username: mockDiscordUser.username,
          avatarUrl: mockDiscordUser.avatar,
          roles: mockDiscordUser.roles,
          lastLogin: new Date(),
          forgeTokens: 1000,
          rogueCredits: 500,
          soulShards: 10,
          isAdmin: true
        };
        console.log('Created temporary user for debugging:', tempUser);
        
        // Set session with temp user
        req.session.userId = tempUser.id;
        return res.redirect('/?debug=true');
      }
      
      // If we get here, we should check the userData object
      if (!userData || !userData.id) {
        return res.status(500).json({ message: 'Failed to create or retrieve user' });
      }
      
      // Set session
      req.session.userId = userData.id;
      console.log('Setting session userId to:', userData.id);
      
      // Redirect to client
      res.redirect('/');
    } catch (error) {
      console.error('Auth error:', error);
      res.status(500).json({ message: 'Authentication failed' });
    }
  });
  
  app.get('/api/auth/logout', (req, res) => {
    req.session.destroy(() => {
      res.redirect('/');
    });
  });
  
  app.get('/api/auth/user', async (req, res) => {
    if (!req.session.userId) {
      return res.status(401).json({ message: 'Not authenticated' });
    }
    
    try {
      const user = await storage.getUserById(req.session.userId);
      if (!user) {
        req.session.destroy(() => {});
        return res.status(401).json({ message: 'User not found' });
      }
      
      return res.json(user);
    } catch (error) {
      console.error('Error fetching user:', error);
      res.status(500).json({ message: 'Failed to fetch user data' });
    }
  });
  
  // Character routes
  app.get('/api/characters', authenticateUser, async (req, res) => {
    try {
      const characters = await storage.getCharacters(req.session.userId!);
      res.json(characters);
    } catch (error) {
      console.error('Error fetching characters:', error);
      res.status(500).json({ message: 'Failed to fetch characters' });
    }
  });
  
  app.post('/api/characters', authenticateUser, async (req, res) => {
    try {
      const characterData = insertCharacterSchema.parse({
        ...req.body,
        userId: req.session.userId
      });
      
      const character = await storage.createCharacter(characterData);
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'character_created',
        description: `Added new character: ${character.name}`,
        relatedIds: { characterId: character.id }
      });
      
      res.status(201).json(character);
    } catch (error) {
      handleErrors(error, req, res, () => {});
    }
  });
  
  // Character level-up route
  app.post('/api/characters/:id/level-up', authenticateUser, async (req, res) => {
    try {
      const characterId = parseInt(req.params.id);
      const { levelIncrease = 1 } = req.body;
      
      // Get the character
      const character = await storage.getCharacterById(characterId);
      
      if (!character) {
        return res.status(404).json({ message: 'Character not found' });
      }
      
      if (character.userId !== req.session.userId) {
        return res.status(403).json({ message: 'Not authorized to level up this character' });
      }
      
      // Calculate new level
      const currentLevel = character.level || 1;
      const newLevel = currentLevel + levelIncrease;
      
      // Update character level and stats
      const updatedCharacter = await storage.updateCharacter(characterId, {
        level: newLevel,
        // Increase stats proportionally (approximately 3-5% per level)
        attack: Math.floor((character.attack || 10) * (1 + 0.04 * levelIncrease)),
        defense: Math.floor((character.defense || 10) * (1 + 0.04 * levelIncrease)),
        vitality: Math.floor((character.vitality || 100) * (1 + 0.03 * levelIncrease)),
        speed: Math.floor((character.speed || 10) * (1 + 0.05 * levelIncrease)),
        focus: Math.floor((character.focus || 10) * (1 + 0.04 * levelIncrease)),
        accuracy: Math.floor((character.accuracy || 10) * (1 + 0.03 * levelIncrease)),
        resilience: Math.floor((character.resilience || 10) * (1 + 0.03 * levelIncrease))
      });
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'character_leveled',
        description: `${character.name} reached level ${newLevel}`,
        relatedIds: { characterId }
      });
      
      res.json(updatedCharacter);
    } catch (error) {
      console.error('Error leveling up character:', error);
      res.status(500).json({ message: 'Failed to level up character' });
    }
  });
  
  // Aura routes
  app.get('/api/auras', authenticateUser, async (req, res) => {
    try {
      const auras = await storage.getAuras(req.session.userId!);
      res.json(auras);
    } catch (error) {
      console.error('Error fetching auras:', error);
      res.status(500).json({ message: 'Failed to fetch auras' });
    }
  });
  
  app.post('/api/auras', authenticateUser, async (req, res) => {
    try {
      const auraData = insertAuraSchema.parse({
        ...req.body,
        userId: req.session.userId
      });
      
      const aura = await storage.createAura(auraData);
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'aura_created',
        description: `Created new ${aura.element} Aura: ${aura.name}`,
        relatedIds: { auraId: aura.id }
      });
      
      res.status(201).json(aura);
    } catch (error) {
      handleErrors(error, req, res, () => {});
    }
  });
  
  app.get('/api/auras/:id', authenticateUser, async (req, res) => {
    try {
      const auraId = parseInt(req.params.id);
      const aura = await storage.getAuraById(auraId);
      
      if (!aura) {
        return res.status(404).json({ message: 'Aura not found' });
      }
      
      if (aura.userId !== req.session.userId) {
        return res.status(403).json({ message: 'Not authorized to access this aura' });
      }
      
      res.json(aura);
    } catch (error) {
      console.error('Error fetching aura:', error);
      res.status(500).json({ message: 'Failed to fetch aura' });
    }
  });
  
  // Equip Aura to Character endpoint
  app.post('/api/characters/:characterId/equip-aura/:auraId', authenticateUser, async (req, res) => {
    try {
      const characterId = parseInt(req.params.characterId);
      const auraId = parseInt(req.params.auraId);
      
      // Check if character and aura exist and belong to the user
      const character = await storage.getCharacterById(characterId);
      const aura = await storage.getAuraById(auraId);
      
      if (!character || !aura) {
        return res.status(404).json({ message: 'Character or Aura not found' });
      }
      
      if (character.userId !== req.session.userId || aura.userId !== req.session.userId) {
        return res.status(403).json({ message: 'Not authorized to use this character or aura' });
      }
      
      if (character.isActive) {
        return res.status(400).json({ message: 'Cannot equip aura to an active character' });
      }
      
      if (aura.isFusing) {
        return res.status(400).json({ message: 'Cannot equip an aura that is currently fusing' });
      }
      
      if (aura.equippedByCharacterId) {
        return res.status(400).json({ message: 'Aura is already equipped by another character' });
      }
      
      // If character already has an aura, unequip it first
      if (character.equippedAuraId) {
        const oldAura = await storage.getAuraById(character.equippedAuraId);
        if (oldAura) {
          await storage.updateAura(oldAura.id, { equippedByCharacterId: null });
        }
      }
      
      // Update character with new aura
      await storage.updateCharacter(characterId, { equippedAuraId: auraId });
      
      // Update aura with character reference
      await storage.updateAura(auraId, { equippedByCharacterId: characterId });
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'aura_equipped',
        description: `Equipped ${aura.name} to ${character.name}`,
        relatedIds: { characterId, auraId }
      });
      
      res.json({ success: true, message: 'Aura equipped successfully' });
    } catch (error) {
      console.error('Error equipping aura:', error);
      res.status(500).json({ message: 'Failed to equip aura' });
    }
  });
  
  // Resource routes
  app.get('/api/resources', authenticateUser, async (req, res) => {
    try {
      const resources = await storage.getResources(req.session.userId!);
      res.json(resources);
    } catch (error) {
      console.error('Error fetching resources:', error);
      res.status(500).json({ message: 'Failed to fetch resources' });
    }
  });
  
  // Update resource - administrative endpoint
  app.post('/api/resources/update', authenticateUser, async (req, res) => {
    try {
      const { resourceName, amount } = req.body;
      
      if (!resourceName || typeof amount !== 'number') {
        return res.status(400).json({ message: 'Resource name and amount are required' });
      }
      
      // Find the resource
      let resource = await storage.getResourceByNameAndUserId(resourceName, req.session.userId!);
      
      // If resource doesn't exist, create it
      if (!resource) {
        resource = await storage.createResource({
          userId: req.session.userId!,
          name: resourceName,
          description: `${resourceName} resource`,
          quantity: amount,
          type: 'material'
        });
      } else {
        // Update existing resource
        resource = await storage.updateResource(resource.id, {
          quantity: resource.quantity + amount
        });
      }
      
      res.json(resource);
    } catch (error) {
      console.error('Error updating resource:', error);
      res.status(500).json({ message: 'Failed to update resource' });
    }
  });
  
  // Farming routes
  app.get('/api/farming/tasks', authenticateUser, async (req, res) => {
    try {
      const tasks = await storage.getFarmingTasks(req.session.userId!);
      res.json(tasks);
    } catch (error) {
      console.error('Error fetching farming tasks:', error);
      res.status(500).json({ message: 'Failed to fetch farming tasks' });
    }
  });
  
  app.post('/api/farming/tasks', authenticateUser, async (req, res) => {
    try {
      console.log('Farming task request body:', JSON.stringify(req.body));
      
      // If endTime is provided as an ISO string, convert it to Date
      let processedBody = {...req.body};
      if (typeof processedBody.endTime === 'string') {
        try {
          processedBody.endTime = new Date(processedBody.endTime);
          console.log('Converted farming endTime to Date object');
        } catch (e) {
          console.error('Failed to convert farming endTime string to Date:', e);
        }
      }
      
      // Apply speed boost to farming task duration
      if (processedBody.endTime) {
        const farmStartTime = new Date();
        const farmDuration = new Date(processedBody.endTime).getTime() - farmStartTime.getTime();
        const boostedDuration = applySpeedBoost(farmDuration);
        const boostedEndTime = new Date(farmStartTime.getTime() + boostedDuration);
        console.log(`Applied speed boost: Original farm duration ${farmDuration}ms, boosted ${boostedDuration}ms`);
        processedBody.endTime = boostedEndTime;
      }
      
      const taskData = insertFarmingTaskSchema.parse({
        ...processedBody,
        userId: req.session.userId
      });
      
      console.log('Parsed farming task data:', JSON.stringify(taskData));
      
      // Check if character is available
      const character = await storage.getCharacterById(taskData.characterId);
      if (!character) {
        return res.status(404).json({ message: 'Character not found' });
      }
      
      if (character.isActive) {
        return res.status(400).json({ message: 'Character is already active in another task' });
      }
      
      // Characters must have an aura equipped to start farming
      if (!character.equippedAuraId) {
        return res.status(400).json({ message: 'Character must have an aura equipped to start farming' });
      }
      
      // Mark character as active in farming
      await storage.updateCharacter(character.id, {
        isActive: true,
        activityType: 'farming',
        activityEndTime: taskData.endTime
      });
      
      const task = await storage.createFarmingTask(taskData);
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'farming_started',
        description: `Started farming ${task.resourceName}`,
        relatedIds: { characterId: character.id, taskId: task.id }
      });
      
      console.log('Farming task created successfully:', task.id);
      res.status(201).json(task);
    } catch (error) {
      console.error('Error starting farming task:', error);
      handleErrors(error, req, res, () => {});
    }
  });
  
  app.post('/api/farming/complete/:id', authenticateUser, async (req, res) => {
    try {
      const taskId = parseInt(req.params.id);
      const task = await storage.getFarmingTaskById(taskId);
      
      if (!task) {
        return res.status(404).json({ message: 'Farming task not found' });
      }
      
      if (task.userId !== req.session.userId) {
        return res.status(403).json({ message: 'Not authorized to access this task' });
      }
      
      if (task.completed) {
        return res.status(400).json({ message: 'Task already completed' });
      }
      
      // Mark task as completed
      await storage.updateFarmingTask(taskId, { completed: true });
      
      // Free up the character
      await storage.updateCharacter(task.characterId, {
        isActive: false,
        activityType: null,
        activityEndTime: null
      });
      
      // Add resources to user inventory
      const resource = await storage.getResourceByNameAndUserId(task.resourceName, req.session.userId!);
      
      if (resource) {
        // Random amount between 10-30
        const gainedAmount = Math.floor(Math.random() * 21) + 10;
        await storage.updateResource(resource.id, { quantity: resource.quantity + gainedAmount });
        
        // Log activity
        await storage.createActivityLog({
          userId: req.session.userId!,
          activityType: 'farming_completed',
          description: `Completed farming and gained ${gainedAmount} ${task.resourceName}`,
          relatedIds: { characterId: task.characterId, taskId: task.id }
        });
        
        return res.json({
          success: true,
          resource: task.resourceName,
          amount: gainedAmount
        });
      } else {
        // Create new resource if it doesn't exist
        const gainedAmount = Math.floor(Math.random() * 21) + 10;
        await storage.createResource({
          userId: req.session.userId!,
          name: task.resourceName,
          type: 'material',
          quantity: gainedAmount,
          description: `A material obtained from farming`,
          iconUrl: 'https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop'
        });
        
        return res.json({
          success: true,
          resource: task.resourceName,
          amount: gainedAmount
        });
      }
    } catch (error) {
      console.error('Error completing farming task:', error);
      res.status(500).json({ message: 'Failed to complete farming task' });
    }
  });
  
  // Dungeon routes
  app.get('/api/dungeons/types', authenticateUser, async (req, res) => {
    try {
      let dungeonTypes;
      const { element, difficulty } = req.query;
      
      if (element) {
        dungeonTypes = await storage.getDungeonTypesByElement(element as string);
      } else if (difficulty) {
        dungeonTypes = await storage.getDungeonTypesByDifficulty(difficulty as string);
      } else {
        dungeonTypes = await storage.getDungeonTypes();
      }
      
      res.json(dungeonTypes);
    } catch (error) {
      console.error('Error fetching dungeon types:', error);
      res.status(500).json({ message: 'Failed to fetch dungeon types' });
    }
  });

  app.get('/api/dungeons/types/:id', authenticateUser, async (req, res) => {
    try {
      const dungeonType = await storage.getDungeonTypeById(parseInt(req.params.id));
      
      if (!dungeonType) {
        return res.status(404).json({ message: 'Dungeon type not found' });
      }
      
      res.json(dungeonType);
    } catch (error) {
      console.error('Error fetching dungeon type:', error);
      res.status(500).json({ message: 'Failed to fetch dungeon type' });
    }
  });
  
  app.post('/api/dungeons/types', authenticateUser, async (req, res) => {
    try {
      // Only admins can create dungeon types
      const user = await storage.getUserById(req.session.userId!);
      if (!user?.isAdmin) {
        return res.status(403).json({ message: 'Unauthorized to create dungeon types' });
      }
      
      const dungeonType = await storage.createDungeonType(req.body);
      res.status(201).json(dungeonType);
    } catch (error) {
      console.error('Error creating dungeon type:', error);
      res.status(500).json({ message: 'Failed to create dungeon type' });
    }
  });
  
  app.patch('/api/dungeons/types/:id', authenticateUser, async (req, res) => {
    try {
      // Only admins can update dungeon types
      const user = await storage.getUserById(req.session.userId!);
      if (!user?.isAdmin) {
        return res.status(403).json({ message: 'Unauthorized to update dungeon types' });
      }
      
      const dungeonType = await storage.updateDungeonType(parseInt(req.params.id), req.body);
      
      if (!dungeonType) {
        return res.status(404).json({ message: 'Dungeon type not found' });
      }
      
      res.json(dungeonType);
    } catch (error) {
      console.error('Error updating dungeon type:', error);
      res.status(500).json({ message: 'Failed to update dungeon type' });
    }
  });

  app.get('/api/dungeons/runs', authenticateUser, async (req, res) => {
    try {
      const runs = await storage.getDungeonRuns(req.session.userId!);
      res.json(runs);
    } catch (error) {
      console.error('Error fetching dungeon runs:', error);
      res.status(500).json({ message: 'Failed to fetch dungeon runs' });
    }
  });
  
  app.post('/api/dungeons/start', authenticateUser, async (req, res) => {
    try {
      // Convert the endTime string to a Date object if it's a string
      let endTimeData = req.body.endTime;
      if (typeof endTimeData === 'string') {
        endTimeData = new Date(endTimeData);
        console.log('Converted dungeon endTime to Date object');
      }
      
      // Apply speed boost to dungeon run time if needed
      // We need to preserve the original end time from client but boost it server-side
      const dungeonEndTime = new Date();
      const duration = new Date(endTimeData).getTime() - dungeonEndTime.getTime();
      const boostedDuration = applySpeedBoost(duration);
      const boostedEndTime = new Date(dungeonEndTime.getTime() + boostedDuration);
      console.log(`Applied speed boost: Original duration ${duration}ms, boosted ${boostedDuration}ms`);
      endTimeData = boostedEndTime;
      
      const runData = insertDungeonRunSchema.parse({
        ...req.body,
        userId: req.session.userId,
        startTime: new Date(),
        endTime: endTimeData,
        completed: false
      });
      
      // Check if all characters are available
      for (const charId of runData.characterIds) {
        const character = await storage.getCharacterById(charId);
        if (!character) {
          return res.status(404).json({ message: `Character ${charId} not found` });
        }
        
        if (character.isActive) {
          return res.status(400).json({
            message: `Character ${character.name} is already active in another task`
          });
        }
        
        // Check if character has an aura equipped
        if (!character.equippedAuraId) {
          return res.status(400).json({ 
            message: `Character ${character.name} must have an aura equipped to enter dungeons` 
          });
        }
      }
      
      // Mark all characters as active
      for (const charId of runData.characterIds) {
        await storage.updateCharacter(charId, {
          isActive: true,
          activityType: 'dungeon',
          activityEndTime: runData.endTime
        });
      }
      
      const run = await storage.createDungeonRun(runData);
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'dungeon_started',
        description: `Started dungeon: ${run.dungeonName} (Level ${run.dungeonLevel})`,
        relatedIds: { runId: run.id, characterIds: runData.characterIds }
      });
      
      res.status(201).json(run);
    } catch (error) {
      handleErrors(error, req, res, () => {});
    }
  });
  
  app.post('/api/dungeons/complete/:id', authenticateUser, async (req, res) => {
    try {
      const runId = parseInt(req.params.id);
      const run = await storage.getDungeonRunById(runId);
      
      if (!run) {
        return res.status(404).json({ message: 'Dungeon run not found' });
      }
      
      if (run.userId !== req.session.userId) {
        return res.status(403).json({ message: 'Not authorized to access this run' });
      }
      
      if (run.completed) {
        return res.status(400).json({ message: 'Run already completed' });
      }
      
      // Determine success (70% chance for simplicity)
      const success = Math.random() < 0.7;
      
      // Generate battle log and rewards
      const battleLog = await generateMockBattleLog(run, success);
      
      // Generate rewards if successful
      let rewards = null;
      if (success) {
        rewards = {
          rogueCredits: Math.floor(Math.random() * 101) + 50,
          soulShards: Math.floor(Math.random() * 3) + 1,
          materials: [
            { name: 'Celestial Ore', amount: Math.floor(Math.random() * 11) + 5 }
          ]
        };
        
        // Update user resources
        const user = await storage.getUserById(req.session.userId!);
        if (user) {
          await storage.updateUser(user.id, {
            rogueCredits: user.rogueCredits + rewards.rogueCredits,
            soulShards: user.soulShards + rewards.soulShards
          });
        }
        
        // Update material resources
        for (const material of rewards.materials) {
          const resource = await storage.getResourceByNameAndUserId(material.name, req.session.userId!);
          if (resource) {
            await storage.updateResource(resource.id, {
              quantity: resource.quantity + material.amount
            });
          } else {
            await storage.createResource({
              userId: req.session.userId!,
              name: material.name,
              type: 'material',
              quantity: material.amount,
              description: 'A valuable material found in dungeons',
              iconUrl: 'https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop'
            });
          }
        }
      }
      
      // Mark run as completed
      await storage.updateDungeonRun(runId, {
        completed: true,
        success,
        battleLog,
        rewards
      });
      
      // Free up the characters
      for (const charId of run.characterIds) {
        await storage.updateCharacter(charId, {
          isActive: false,
          activityType: null,
          activityEndTime: null
        });
      }
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'dungeon_completed',
        description: `${success ? 'Successfully' : 'Failed to'} complete dungeon: ${run.dungeonName}`,
        relatedIds: { runId: run.id }
      });
      
      res.json({
        success,
        battleLog,
        rewards
      });
    } catch (error) {
      console.error('Error completing dungeon run:', error);
      res.status(500).json({ message: 'Failed to complete dungeon run' });
    }
  });
  
  // Forge routes
  app.get('/api/forge/tasks', authenticateUser, async (req, res) => {
    try {
      const tasks = await storage.getForgingTasks(req.session.userId!);
      res.json(tasks);
    } catch (error) {
      console.error('Error fetching forging tasks:', error);
      res.status(500).json({ message: 'Failed to fetch forging tasks' });
    }
  });
  
  app.post('/api/forge/craft', authenticateUser, async (req, res) => {
    try {
      console.log('Forge craft request body:', JSON.stringify(req.body));
      
      // Validate character selection
      const characterId = req.body.characterId;
      if (!characterId) {
        return res.status(400).json({ message: 'Character ID is required for crafting' });
      }
      
      // Check if character exists and belongs to the user
      const character = await storage.getCharacterById(characterId);
      if (!character || character.userId !== req.session.userId) {
        return res.status(404).json({ message: 'Character not found or not owned by you' });
      }
      
      // Check if character is available (not assigned to another task)
      const activeCharacterTasks = await storage.getActiveCharacterTasks(characterId);
      if (activeCharacterTasks.length > 0) {
        return res.status(400).json({ message: 'Character is already assigned to another task' });
      }
      
      // If endTime is provided as an ISO string, convert it to Date
      let processedBody = {...req.body};
      if (typeof processedBody.endTime === 'string') {
        try {
          processedBody.endTime = new Date(processedBody.endTime);
          console.log('Converted endTime to Date object');
        } catch (e) {
          console.error('Failed to convert endTime string to Date:', e);
        }
      }
      
      // Apply speed boost to crafting duration
      if (processedBody.endTime) {
        const craftStartTime = new Date();
        const craftDuration = new Date(processedBody.endTime).getTime() - craftStartTime.getTime();
        const boostedDuration = applySpeedBoost(craftDuration);
        const boostedEndTime = new Date(craftStartTime.getTime() + boostedDuration);
        console.log(`Applied speed boost: Original craft duration ${craftDuration}ms, boosted ${boostedDuration}ms`);
        processedBody.endTime = boostedEndTime;
      }
      
      const taskData = insertForgingTaskSchema.parse({
        ...processedBody,
        userId: req.session.userId,
        taskType: 'craft',
        startTime: new Date(),
        completed: false
      });
      
      console.log('Parsed task data:', JSON.stringify(taskData));
      
      // Verify user has the required materials
      if (taskData.requiredMaterials) {
        for (const [materialName, amount] of Object.entries(taskData.requiredMaterials)) {
          const resource = await storage.getResourceByNameAndUserId(materialName, req.session.userId!);
          if (!resource || resource.quantity < amount) {
            return res.status(400).json({
              message: `Insufficient ${materialName} for crafting`
            });
          }
          
          // Subtract materials
          await storage.updateResource(resource.id, {
            quantity: resource.quantity - amount
          });
        }
      }
      
      const task = await storage.createForgingTask(taskData);
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'aura_crafting_started',
        description: `Started crafting a ${taskData.targetElement} Aura`,
        relatedIds: { taskId: task.id }
      });
      
      console.log('Forge task created successfully:', task.id);
      res.status(201).json(task);
    } catch (error) {
      console.error('Error in forge/craft endpoint:', error);
      handleErrors(error, req, res, () => {});
    }
  });
  
  app.post('/api/forge/fusion', authenticateUser, async (req, res) => {
    try {
      const { primaryAuraId, secondaryAuraId } = req.body;
      
      // Check if auras exist and belong to the user
      const primaryAura = await storage.getAuraById(primaryAuraId);
      const secondaryAura = await storage.getAuraById(secondaryAuraId);
      
      if (!primaryAura || !secondaryAura) {
        return res.status(404).json({ message: 'One or both auras not found' });
      }
      
      if (primaryAura.userId !== req.session.userId || secondaryAura.userId !== req.session.userId) {
        return res.status(403).json({ message: 'Not authorized to use these auras' });
      }
      
      if (primaryAura.isFusing || secondaryAura.isFusing) {
        return res.status(400).json({ message: 'One or both auras are already in fusion' });
      }
      
      // Mark auras as fusing
      const fusionDuration = 60 * 1000; // 1 minute for demo
      const fusionEndTime = new Date(Date.now() + applySpeedBoost(fusionDuration)); // Apply speed boost
      await storage.updateAura(primaryAuraId, {
        isFusing: true,
        fusionEndTime
      });
      
      await storage.updateAura(secondaryAuraId, {
        isFusing: true,
        fusionEndTime
      });
      
      // Create fusion task
      const characterId = req.body.characterId;
      if (!characterId) {
        return res.status(400).json({ message: 'Character ID is required for fusion' });
      }
      
      // Check if character exists and belongs to the user
      const character = await storage.getCharacterById(characterId);
      if (!character || character.userId !== req.session.userId) {
        return res.status(404).json({ message: 'Character not found or not owned by you' });
      }
      
      // Check if character is available (not assigned to another task)
      const activeCharacterTasks = await storage.getActiveCharacterTasks(characterId);
      if (activeCharacterTasks.length > 0) {
        return res.status(400).json({ message: 'Character is already assigned to another task' });
      }
      
      const taskData = {
        userId: req.session.userId!,
        characterId: characterId,
        taskType: 'fusion',
        primaryAuraId,
        secondaryAuraId,
        startTime: new Date(),
        endTime: fusionEndTime,
        completed: false
      };
      
      const task = await storage.createForgingTask(taskData);
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'aura_fusion_started',
        description: `Started fusing ${primaryAura.name} with ${secondaryAura.name}`,
        relatedIds: { taskId: task.id, auraIds: [primaryAuraId, secondaryAuraId] }
      });
      
      res.status(201).json(task);
    } catch (error) {
      console.error('Error starting fusion:', error);
      res.status(500).json({ message: 'Failed to start fusion process' });
    }
  });
  
  app.post('/api/forge/complete/:id', authenticateUser, async (req, res) => {
    try {
      const taskId = parseInt(req.params.id);
      const task = await storage.getForgingTaskById(taskId);
      
      if (!task) {
        return res.status(404).json({ message: 'Forging task not found' });
      }
      
      if (task.userId !== req.session.userId) {
        return res.status(403).json({ message: 'Not authorized to access this task' });
      }
      
      if (task.completed) {
        return res.status(400).json({ message: 'Task already completed' });
      }
      
      // Different logic based on task type
      if (task.taskType === 'craft') {
        // Create new aura with stat bonuses ranging from -10% to +10%
        // Generate a value between -10 and +10 for each stat
        const generateStatBonus = () => Math.floor(Math.random() * 21) - 10; // -10 to +10
        
        // Default element if not specified (fire, water, earth, wind)
        const elementType = task.targetElement || ['fire', 'water', 'earth', 'wind'][Math.floor(Math.random() * 4)];
        
        // Get aura name based on element
        let auraName = '';
        switch(elementType) {
          case 'fire': 
            auraName = 'Inferno\'s Embrace';
            break;
          case 'water': 
            auraName = 'Ocean\'s Mercy';
            break;
          case 'earth': 
            auraName = 'Stoneguard\'s Pact';
            break;
          case 'wind': 
            auraName = 'Zephyr\'s Whisper';
            break;
          default:
            auraName = `${elementType.charAt(0).toUpperCase() + elementType.slice(1)} Aura`;
        }
        
        // Generate skills for the aura based on element
        // 50% chance of getting either basic skill for the element
        const skills = [];
        
        // Define the basic skills for each element
        const elementSkills = {
          fire: [
            {
              name: "Ember",
              type: "Basic",
              description: "A focused burst of flame latches onto the target, searing over time.",
              damage: 1.0,
              level: 1,
              effect: "10% chance to apply 1 Burn Stack for 1 Turn",
              targets: 1
            },
            {
              name: "Wildfire",
              type: "Basic",
              description: "Unpredictable flames leap across the battlefield in violent bursts.",
              damage: 0.8,
              level: 1,
              effect: "10% chance to hit 1 more target",
              targets: "2-3 Random"
            }
          ],
          water: [
            {
              name: "Soothing Current",
              type: "Basic",
              description: "A soft wave crashes through the enemy and flows into an ally.",
              damage: 0.8,
              level: 1,
              effect: "Heal lowest HP Ally for 5% of caster's Max HP",
              targets: 1
            },
            {
              name: "Cleansing Tide",
              type: "Basic",
              description: "Water surges over the battlefield, sweeping away ailing effects.",
              damage: 0.7,
              level: 1,
              effect: "10% chance to remove 1 Debuff from a Random Ally",
              targets: 1
            }
          ],
          earth: [
            {
              name: "Stone Slam",
              type: "Basic",
              description: "A hammering blow backed by earth essence dulls the target's edge.",
              damage: 1.0,
              level: 1,
              effect: "20% chance to apply Weakness (-10% Damage Dealt) for 1 Turn",
              targets: 1
            },
            {
              name: "Dust Spikes",
              type: "Basic",
              description: "Fragments of stone erupt from the ground and scatter outward.",
              damage: 0.9,
              level: 1,
              effect: "No special effect at Level 1",
              targets: "2 Random"
            }
          ],
          wind: [
            {
              name: "Gust",
              type: "Basic",
              description: "A sharp burst of wind knocks the enemy off balance.",
              damage: 0.8,
              level: 1,
              effect: "10% chance to apply Minor Slow (Speed -20%) for 1 Turn",
              targets: 1
            },
            {
              name: "Breeze",
              type: "Basic",
              description: "A disruptive current slips beneath the target, breaking their momentum.",
              damage: 0.7,
              level: 1,
              effect: "10% chance to reduce Turn Meter by 10%",
              targets: 1
            }
          ]
        };
        
        // 50% chance to get either skill, but only add ONE skill (not both)
        const skillIndex = Math.random() < 0.5 ? 0 : 1;
        // Use type assertion to handle the element type safely
        const elementTypeSafe = elementType as keyof typeof elementSkills;
        if (elementSkills[elementTypeSafe]) {
          // Only add one skill to the array (replacing any existing skills)
          skills[0] = elementSkills[elementTypeSafe][skillIndex];
        }
        
        const newAura = await storage.createAura({
          userId: req.session.userId!,
          name: auraName,
          level: 1,
          element: elementType,
          tier: 1,
          // Add stat bonuses in the range of -10% to +10%
          attack: generateStatBonus(),
          defense: generateStatBonus(),
          vitality: generateStatBonus(),
          speed: generateStatBonus(),
          focus: generateStatBonus(),
          resilience: generateStatBonus(), 
          accuracy: generateStatBonus(),
          fusionSource: false,
          creatorCharacterId: task.characterId,
          skills: skills
        });
        
        // Update task
        await storage.updateForgingTask(taskId, {
          completed: true,
          resultAuraId: newAura.id
        });
        
        // Free up the character
        if (task.characterId) {
          await storage.updateCharacter(task.characterId, {
            isActive: false,
            activityType: null,
            activityEndTime: null
          });
          
          const character = await storage.getCharacterById(task.characterId);
          if (character) {
            await storage.createActivityLog({
              userId: req.session.userId!,
              activityType: 'character_task_completed',
              description: `${character.name} has completed crafting a new aura`,
              relatedIds: { characterId: character.id, auraId: newAura.id }
            });
          }
        }
        
        // Log activity
        await storage.createActivityLog({
          userId: req.session.userId!,
          activityType: 'aura_crafted',
          description: `Crafted a new ${newAura.element} Aura (Level ${newAura.level})`,
          relatedIds: { auraId: newAura.id }
        });
        
        return res.json({
          success: true,
          aura: newAura
        });
      } else if (task.taskType === 'fusion') {
        // Get auras
        const primaryAura = await storage.getAuraById(task.primaryAuraId!);
        const secondaryAura = await storage.getAuraById(task.secondaryAuraId!);
        
        if (!primaryAura || !secondaryAura) {
          return res.status(404).json({ message: 'One or both fusion auras not found' });
        }
        
        // Create upgraded aura (level + 1)
        const newLevel = Math.min(primaryAura.level !== null ? primaryAura.level + 1 : 2, 5);
        
        // Enhance stat bonuses by 1-2 points, capping at +10
        const enhanceStat = (baseStat: number | null) => {
          if (baseStat === null) return Math.floor(Math.random() * 5); // Random 0-4 if null
          
          // Add 1-2 points, but cap at 10
          const enhancement = Math.floor(Math.random() * 2) + 1;
          return Math.min(baseStat + enhancement, 10);
        };
        
        // Apply secondary aura's best stat if it's higher
        const combineBestStat = (primaryStat: number | null, secondaryStat: number | null) => {
          const pStat = primaryStat !== null ? primaryStat : -5;
          const sStat = secondaryStat !== null ? secondaryStat : -5;
          return Math.max(pStat, sStat);
        };
        
        // Get aura name based on element (maintain core aura names)
        let auraName = '';
        switch(primaryAura.element) {
          case 'fire': 
            auraName = 'Inferno\'s Embrace';
            break;
          case 'water': 
            auraName = 'Ocean\'s Mercy';
            break;
          case 'earth': 
            auraName = 'Stoneguard\'s Pact';
            break;
          case 'wind': 
            auraName = 'Zephyr\'s Whisper';
            break;
          default:
            auraName = `Enhanced ${primaryAura.element} Aura`;
        }
        
        // Keep the primary aura's skills (no chance-based upgrades)
        // Just carry over the existing skills
        const processedSkills = [...(primaryAura.skills || [])];
        
        // When fusing to create a Tier 2 aura, add an Advanced skill
        // Check if this will be a Tier 2 aura based on the primary aura's tier and the new level
        if ((primaryAura.tier === 1 || !primaryAura.tier) && newLevel >= 2) {
          // Define advanced skills for each element
          const advancedSkills = {
            fire: [
              {
                name: "Flame Whip",
                type: "Advanced",
                description: "A cracking lash of fire that scorches in a line.",
                damage: 1.2,
                level: 2,
                effect: "25% chance to apply 1 Burn Stack for 2 Turns",
                targets: "2-3 in a row"
              },
              {
                name: "Combustion",
                type: "Advanced",
                description: "Focuses heat into a precise explosion that weakens all defenses.",
                damage: 1.3,
                level: 2,
                effect: "15% chance to apply Defense Down (-20%) for 1 Turn",
                targets: 1
              }
            ],
            water: [
              {
                name: "Tidal Wave",
                type: "Advanced",
                description: "A wall of rushing water crashes over multiple enemies.",
                damage: 1.1,
                level: 2,
                effect: "15% chance to Knockback (reduce Turn Meter by 20%)",
                targets: "2-3 Random"
              },
              {
                name: "Mist Veil",
                type: "Advanced",
                description: "A protective fog envelops allies, protecting them from harm.",
                damage: 0.7,
                level: 2,
                effect: "Apply Shield (10% of Caster's Max HP) to lowest HP Ally",
                targets: 1
              }
            ],
            earth: [
              {
                name: "Fissure",
                type: "Advanced",
                description: "The ground breaks open beneath the enemy, disrupting their stance.",
                damage: 1.3,
                level: 2,
                effect: "35% chance to apply Stagger (miss next turn)",
                targets: 1
              },
              {
                name: "Stone Armor",
                type: "Advanced",
                description: "Layers of rock form a protective coating around the caster.",
                damage: 0.6,
                level: 2,
                effect: "Self buff: Defense Up (+30%) for 2 Turns",
                targets: 1
              }
            ],
            wind: [
              {
                name: "Cyclone",
                type: "Advanced",
                description: "A spinning vortex pulls in multiple enemies and tosses them about.",
                damage: 1.0,
                level: 2,
                effect: "35% chance to apply Confusion (50% chance to attack ally) for 1 Turn",
                targets: "2 Random"
              },
              {
                name: "Tailwind",
                type: "Advanced",
                description: "Favorable winds increase party movement speed.",
                damage: 0.6,
                level: 2,
                effect: "Grant Speed Up (+20%) to all allies for 2 Turns",
                targets: "All Allies"
              }
            ]
          };
          
          // Safely get the element type
          const elementTypeSafe = primaryAura.element as keyof typeof advancedSkills;
          
          // Select a random Advanced skill to add
          if (advancedSkills[elementTypeSafe]) {
            const randomIndex = Math.floor(Math.random() * advancedSkills[elementTypeSafe].length);
            const advancedSkill = advancedSkills[elementTypeSafe][randomIndex];
            
            // Add the Advanced skill if one doesn't already exist
            if (!processedSkills.some(skill => skill.type === "Advanced")) {
              processedSkills.push(advancedSkill);
            }
          }
        }
        
        // When fusing to create a Tier 3 aura, add an Ultimate skill
        if ((primaryAura.tier === 2 || newLevel >= 3) && newLevel >= 3) {
          // Define ultimate skills for each element
          const ultimateSkills = {
            fire: {
              name: "Supernova",
              type: "Ultimate",
              description: "All surrounding matter ignites in a cataclysmic blast of energy.",
              damage: 1.8,
              level: 3,
              effect: "Apply Burn (5% HP damage per turn) to all enemies for 2 Turns",
              targets: "All Enemies"
            },
            water: {
              name: "Abyssal Depths",
              type: "Ultimate",
              description: "The crushing pressure of the deep ocean consumes all enemies.",
              damage: 1.5,
              level: 3,
              effect: "Apply Slow (speed -40%) to all enemies for 2 Turns",
              targets: "All Enemies"
            },
            earth: {
              name: "Tectonic Shift",
              type: "Ultimate",
              description: "The battlefield fractures as massive stone pillars erupt from below.",
              damage: 1.7,
              level: 3,
              effect: "50% chance to Stun each enemy for 1 Turn",
              targets: "All Enemies"
            },
            wind: {
              name: "Hurricane",
              type: "Ultimate",
              description: "A devastating storm tears through the battlefield with unmatched fury.",
              damage: 1.6,
              level: 3,
              effect: "Reduce Turn Meter of all enemies by 30%",
              targets: "All Enemies"
            }
          };
          
          // Safely get the element type
          const elementTypeSafe = primaryAura.element as keyof typeof ultimateSkills;
          
          // Add the Ultimate skill if one doesn't already exist
          if (!processedSkills.some(skill => skill.type === "Ultimate") && 
              ultimateSkills[elementTypeSafe]) {
            processedSkills.push(ultimateSkills[elementTypeSafe]);
          }
        }
        
        const resultAura = await storage.createAura({
          userId: req.session.userId!,
          name: auraName,
          level: newLevel,
          element: primaryAura.element,
          tier: primaryAura.tier !== null ? primaryAura.tier + 1 : 2,
          // Enhance stat bonuses, capping at +10%
          attack: combineBestStat(enhanceStat(primaryAura.attack), secondaryAura.attack),
          defense: combineBestStat(enhanceStat(primaryAura.defense), secondaryAura.defense),
          vitality: combineBestStat(enhanceStat(primaryAura.vitality), secondaryAura.vitality),
          speed: combineBestStat(enhanceStat(primaryAura.speed), secondaryAura.speed),
          focus: combineBestStat(enhanceStat(primaryAura.focus), secondaryAura.focus),
          resilience: combineBestStat(enhanceStat(primaryAura.resilience), secondaryAura.resilience),
          accuracy: combineBestStat(enhanceStat(primaryAura.accuracy), secondaryAura.accuracy),
          // Record fusion source for display in aura details
          fusionSource: true,
          creatorCharacterId: task.characterId,
          skills: processedSkills
        });
        
        // 30% chance to transfer a skill from secondary aura if they're not the same skills
        if (secondaryAura.skills && secondaryAura.skills.length > 0 && Math.random() < 0.3) {
          // Find a skill from the secondary aura that isn't already in the result aura
          const availableSkills = secondaryAura.skills.filter(secondarySkill => 
            !resultAura.skills.some(resultSkill => resultSkill.name === secondarySkill.name)
          );
          
          if (availableSkills.length > 0) {
            const randomSkill = availableSkills[Math.floor(Math.random() * availableSkills.length)];
            resultAura.skills = [...resultAura.skills, randomSkill];
            await storage.updateAura(resultAura.id, { skills: resultAura.skills });
          }
        }
        
        // Delete source auras
        await storage.deleteAura(primaryAura.id);
        await storage.deleteAura(secondaryAura.id);
        
        // Update task
        await storage.updateForgingTask(taskId, {
          completed: true,
          resultAuraId: resultAura.id
        });
        
        // Free up the character
        if (task.characterId) {
          await storage.updateCharacter(task.characterId, {
            isActive: false,
            activityType: null,
            activityEndTime: null
          });
          
          const character = await storage.getCharacterById(task.characterId);
          if (character) {
            await storage.createActivityLog({
              userId: req.session.userId!,
              activityType: 'character_task_completed',
              description: `${character.name} has completed fusing auras to create a stronger one`,
              relatedIds: { characterId: character.id, auraId: resultAura.id }
            });
          }
        }
        
        // Log activity
        await storage.createActivityLog({
          userId: req.session.userId!,
          activityType: 'aura_fusion_completed',
          description: `Fused auras to create enhanced Level ${resultAura.level} ${resultAura.element} Aura`,
          relatedIds: { auraId: resultAura.id }
        });
        
        return res.json({
          success: true,
          aura: resultAura
        });
      } else {
        return res.status(400).json({ message: 'Unknown task type' });
      }
    } catch (error) {
      console.error('Error completing forging task:', error);
      res.status(500).json({ message: 'Failed to complete forging task' });
    }
  });
  
  // Black Market routes
  app.get('/api/blackmarket/listings', authenticateUser, async (req, res) => {
    try {
      // Get all listings
      let listings = await storage.getBlackMarketListings();
      
      // If no listings exist, create some sample listings
      if (listings.length === 0) {
        const systemId = 0; // System listings created by ID 0
        
        // Helper function to create premium listings (Forge Tokens)
        const createPremiumListing = (type, data, price, featured = false) => ({
          userId: systemId,
          itemType: type,
          itemId: Math.floor(Math.random() * 1000000) + 1, // Generate a placeholder ID
          itemData: data,
          price,
          currencyType: 'forgeTokens',
          sold: false,
          listedAt: new Date(),
          expiresAt: new Date(Date.now() + applySpeedBoost(86400000)), // Apply speed boost
          featured
        });
        
        // Helper function to create standard listings (Rogue Credits)
        const createStandardListing = (type, data, price) => ({
          userId: systemId,
          itemType: type,
          itemId: Math.floor(Math.random() * 1000000) + 1, // Generate a placeholder ID
          itemData: data,
          price,
          currencyType: 'rogueCredits', 
          sold: false,
          listedAt: new Date(),
          expiresAt: new Date(Date.now() + applySpeedBoost(86400000)) // Apply speed boost
        });
        
        // Sample premium character listings (forge tokens)
        const premiumCharacters = [
          createPremiumListing('character', {
            name: 'Shadow Rogue',
            level: 25,
            class: 'Rogue',
            stats: {
              strength: 52,
              agility: 85,
              intelligence: 60,
              vitality: 70
            },
            equippedAuraIds: [],
            passiveSkills: [
              { name: 'Shadowstep', description: 'Can teleport behind enemies once per battle' },
              { name: 'Critical Mastery', description: '15% increased critical hit chance' }
            ]
          }, 750, true),
          
          createPremiumListing('character', {
            name: 'Arcane Scholar',
            level: 20,
            class: 'Mage',
            stats: {
              strength: 30,
              agility: 45,
              intelligence: 90,
              vitality: 55
            },
            equippedAuraIds: [],
            passiveSkills: [
              { name: 'Spell Mastery', description: 'Spells cost 10% less mana' },
              { name: 'Arcane Shield', description: 'Automatically blocks first spell damage in battle' }
            ]
          }, 550)
        ];
        
        // Sample standard character listings (rogue credits)
        const standardCharacters = [
          createStandardListing('character', {
            name: 'Veteran Warrior',
            level: 15,
            class: 'Warrior',
            stats: {
              strength: 70,
              agility: 40,
              intelligence: 30,
              vitality: 65
            },
            equippedAuraIds: [],
            passiveSkills: [
              { name: 'Battle Hardened', description: 'Takes 5% less damage from physical attacks' }
            ]
          }, 2500)
        ];
        
        // Sample premium aura listings
        const premiumAuras = [
          createPremiumListing('aura', {
            name: 'Flame Emperor\'s Might',
            element: 'Fire',
            level: 3,
            attack: 8,
            defense: 6,
            vitality: 7,
            speed: 7,
            focus: 8,
            resilience: 5,
            accuracy: 6,
            skills: [
              { name: 'Inferno', description: 'Deals massive fire damage to all enemies', tier: 'Ultimate' },
              { name: 'Burning Aura', description: 'Enemies take burn damage when attacking the wearer', tier: 'Advanced' },
              { name: 'Fire Resistance', description: '25% resistance to fire damage', tier: 'Basic' }
            ]
          }, 900, true),
          
          createPremiumListing('aura', {
            name: 'Tidal Mastery',
            element: 'Water',
            level: 2,
            attack: 5,
            defense: 7,
            vitality: 6,
            speed: 9,
            focus: 8,
            resilience: 4,
            accuracy: 7,
            skills: [
              { name: 'Healing Tide', description: 'Restores health to all allies', tier: 'Advanced' },
              { name: 'Water Shield', description: 'Creates a barrier that absorbs damage', tier: 'Basic' }
            ]
          }, 600)
        ];
        
        // Sample standard aura listings
        const standardAuras = [
          createStandardListing('aura', {
            name: 'Earthen Protection',
            element: 'Earth',
            level: 1,
            attack: 4,
            defense: 9,
            vitality: 7,
            speed: 3,
            focus: 5,
            resilience: 8,
            accuracy: 4,
            skills: [
              { name: 'Stone Skin', description: 'Reduces physical damage by 10%', tier: 'Basic' }
            ]
          }, 1800)
        ];
        
        // Sample resource listings
        const resources = [
          createPremiumListing('resource', {
            name: 'Celestial Ore',
            type: 'material',
            quantity: 50,
            description: 'Rare material used for crafting high-level auras',
            iconUrl: 'https://images.unsplash.com/photo-1618221118493-9bce6d4b04cd?w=150&h=150&fit=crop'
          }, 300),
          
          createStandardListing('resource', {
            name: 'Aether Crystal',
            type: 'material',
            quantity: 20,
            description: 'Magical crystal that enhances aura crafting success rates',
            iconUrl: 'https://images.unsplash.com/photo-1566792368824-44a7882c53e5?w=150&h=150&fit=crop'
          }, 1200),
          
          createPremiumListing('resource', {
            name: 'Soul Shard Bundle',
            type: 'currency',
            quantity: 10,
            description: 'Bundle of soul shards used for advanced crafting',
            iconUrl: 'https://images.unsplash.com/photo-1518563071562-1e3a85d4523d?w=150&h=150&fit=crop'
          }, 450)
        ];
        
        // Create all the listings
        const allListings = [
          ...premiumCharacters,
          ...standardCharacters,
          ...premiumAuras,
          ...standardAuras,
          ...resources
        ];
        
        for (const listing of allListings) {
          await storage.createBlackMarketListing(listing);
        }
        
        // Fetch the newly created listings
        listings = await storage.getBlackMarketListings();
      }
      
      res.json(listings);
    } catch (error) {
      console.error('Error fetching market listings:', error);
      res.status(500).json({ message: 'Failed to fetch market listings' });
    }
  });
  
  app.post('/api/blackmarket/buy/:id', authenticateUser, async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const listing = await storage.getBlackMarketListingById(listingId);
      
      if (!listing) {
        return res.status(404).json({ message: 'Listing not found' });
      }
      
      if (listing.sold) {
        return res.status(400).json({ message: 'Item already sold' });
      }
      
      // Check if user has enough currency
      const user = await storage.getUserById(req.session.userId!);
      if (!user) {
        return res.status(404).json({ message: 'User not found' });
      }
      
      // Validate currency for purchase
      if (listing.currencyType === 'forgeTokens') {
        if (user.forgeTokens === null || user.forgeTokens < listing.price) {
          return res.status(400).json({ message: 'Not enough Forge Tokens' });
        }
        // Deduct forge tokens from user
        await storage.updateUser(user.id, {
          forgeTokens: user.forgeTokens - listing.price
        });
      } else if (listing.currencyType === 'rogueCredits') {
        if (user.rogueCredits === null || user.rogueCredits < listing.price) {
          return res.status(400).json({ message: 'Not enough Rogue Credits' });
        }
        // Deduct rogue credits from user
        await storage.updateUser(user.id, {
          rogueCredits: user.rogueCredits - listing.price
        });
      } else {
        return res.status(400).json({ message: 'Invalid currency type' });
      }
      
      // Mark as sold
      await storage.updateBlackMarketListing(listingId, { sold: true });
      
      // Transfer the item to the user
      let purchasedItem;
      if (listing.itemType === 'character') {
        // Get character details (for MVP, generate a new character with passiveSkills)
        purchasedItem = await storage.createCharacter({
          userId: user.id,
          name: `Market Hero ${Math.floor(Math.random() * 1000)}`,
          class: ['Warrior', 'Mage', 'Rogue', 'Cleric'][Math.floor(Math.random() * 4)],
          level: Math.floor(Math.random() * 5) + 1,
          avatarUrl: [
            'https://images.unsplash.com/photo-1577095972620-2f389ca3abcd?w=150&h=150&fit=crop',
            'https://images.unsplash.com/photo-1613477564751-fc2a7c5bbb7a?w=150&h=150&fit=crop',
            'https://images.unsplash.com/photo-1578336134673-1eef9c8c5e36?w=150&h=150&fit=crop'
          ][Math.floor(Math.random() * 3)],
          attack: Math.floor(Math.random() * 10) + 10,
          defense: Math.floor(Math.random() * 10) + 10,
          health: Math.floor(Math.random() * 50) + 100,
          speed: Math.floor(Math.random() * 10) + 10,
          vitality: Math.floor(Math.random() * 10) + 10,
          intelligence: Math.floor(Math.random() * 10) + 10,
          luck: Math.floor(Math.random() * 10) + 10,
          // Add passiveSkills array with random skills based on character class
          passiveSkills: [
            {
              name: ['Strength Boost', 'Quick Reflexes', 'Magical Aptitude', 'Divine Grace'][Math.floor(Math.random() * 4)],
              description: 'A special ability gained through market purchase'
            }
          ]
        });
      } else if (listing.itemType === 'aura') {
        // Create a new aura with stat values
        purchasedItem = await storage.createAura({
          userId: user.id,
          name: `Market Aura ${Math.floor(Math.random() * 1000)}`,
          level: Math.floor(Math.random() * 3) + 1,
          element: ['fire', 'water', 'earth', 'air'][Math.floor(Math.random() * 4)],
          tier: 1,
          // Add individual stat values
          attack: Math.floor(Math.random() * 15) + 5,
          defense: Math.floor(Math.random() * 15) + 5,
          vitality: Math.floor(Math.random() * 15) + 5,
          speed: Math.floor(Math.random() * 15) + 5,
          focus: Math.floor(Math.random() * 15) + 5,
          resilience: Math.floor(Math.random() * 15) + 5,
          accuracy: Math.floor(Math.random() * 15) + 5,
          // Market purchased aura
          fusionSource: false,
          skills: []
        });
      } else if (listing.itemType === 'resource') {
        // Add resources to inventory
        const resourceName = ['Celestial Ore', 'Moonsilver', 'Dragon Scale', 'Phoenix Feather'][Math.floor(Math.random() * 4)];
        const quantity = Math.floor(Math.random() * 41) + 10;
        
        const existingResource = await storage.getResourceByNameAndUserId(resourceName, user.id);
        if (existingResource) {
          purchasedItem = await storage.updateResource(existingResource.id, {
            quantity: existingResource.quantity + quantity
          });
        } else {
          purchasedItem = await storage.createResource({
            userId: user.id,
            name: resourceName,
            type: 'material',
            quantity: quantity,
            description: 'A valuable material from the Black Market',
            iconUrl: 'https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop'
          });
        }
      }
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'item_purchased',
        description: `Purchased ${listing.itemType} from the Black Market for ${listing.price} ${listing.currencyType}`,
        relatedIds: { listingId: listing.id }
      });
      
      res.json({
        success: true,
        item: purchasedItem
      });
    } catch (error) {
      console.error('Error purchasing item:', error);
      res.status(500).json({ message: 'Failed to purchase item' });
    }
  });
  
  // Bounty Board routes
  app.get('/api/bounty/quests', authenticateUser, async (req, res) => {
    try {
      let quests = await storage.getBountyQuests(req.session.userId!);
      
      // If no quests are found, create some sample daily and weekly quests
      if (quests.length === 0) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        
        const nextWeek = new Date();
        nextWeek.setDate(nextWeek.getDate() + 7);
        
        // Get bounty board level to determine quest difficulties
        const bountyBoardUpgrade = await storage.getBuildingUpgradeByTypeAndUserId('bountyBoard', req.session.userId!);
        const bountyBoardLevel = bountyBoardUpgrade?.currentLevel || 1;
        
        // Determine quest availability based on bounty board level
        const canGenerateRare = bountyBoardLevel >= 3;
        const canGenerateEpic = bountyBoardLevel >= 5;
        const canGenerateMythic = bountyBoardLevel >= 7;
        const canGenerateLegendary = bountyBoardLevel >= 10;
        
        // Determine number of daily quests based on bounty board level
        const dailyQuestCount = Math.min(5, Math.floor(1.5 * bountyBoardLevel));
        
        // Base daily quests
        const dailyQuests = [
          {
            userId: req.session.userId!,
            name: "Resource Collector",
            description: "Gather various resources through farming missions",
            questType: "daily",
            difficulty: "Basic",
            requirements: {
              farmingCompleted: { current: 0, target: 3, label: "Complete farming missions" }
            },
            rewards: {
              rogueCredits: 150,
              forgeTokens: 30
            },
            completed: false,
            expiresAt: tomorrow
          }
        ];
        
        // Add Rare quest if available
        if (canGenerateRare) {
          dailyQuests.push({
            userId: req.session.userId!,
            name: "Dungeon Explorer",
            description: "Complete dungeon runs to earn extra rewards",
            questType: "daily",
            difficulty: "Rare",
            requirements: {
              dungeonRuns: { current: 0, target: 2, label: "Complete dungeon runs" }
            },
            rewards: {
              rogueCredits: 250,
              forgeTokens: 50,
              soulShards: 2
            },
            completed: false,
            expiresAt: tomorrow
          });
        }
        
        // Add Epic quest if available
        if (canGenerateEpic) {
          dailyQuests.push({
            userId: req.session.userId!,
            name: "Forge Apprentice",
            description: "Craft or fuse auras at The Forge",
            questType: "daily",
            difficulty: "Epic",
            requirements: {
              craftAuras: { current: 0, target: 1, label: "Craft an aura" }
            },
            rewards: {
              forgeTokens: 80,
              soulShards: 5,
              material: { name: "Celestial Ore", amount: 20 }
            },
            completed: false,
            expiresAt: tomorrow
          });
        }
        
        // Add Mythic quest if available
        if (canGenerateMythic) {
          dailyQuests.push({
            userId: req.session.userId!,
            name: "Elite Dungeon Challenge",
            description: "Conquer the most difficult dungeons",
            questType: "daily",
            difficulty: "Mythic",
            requirements: {
              eliteDungeons: { current: 0, target: 2, label: "Complete elite dungeons" },
              bossDefeats: { current: 0, target: 1, label: "Defeat dungeon boss" }
            },
            rewards: {
              rogueCredits: 500,
              forgeTokens: 100,
              soulShards: 8
            },
            completed: false,
            expiresAt: tomorrow
          });
        }
        
        // Base weekly quests
        const weeklyQuests = [
          {
            userId: req.session.userId!,
            name: "Master Collector",
            description: "Gather a large amount of resources throughout the week",
            questType: "weekly",
            difficulty: canGenerateRare ? "Rare" : "Basic",
            requirements: {
              farmingCompleted: { current: 0, target: 15, label: "Complete farming missions" }
            },
            rewards: {
              rogueCredits: 1000,
              forgeTokens: 200,
              material: { name: "Celestial Ore", amount: 50 }
            },
            completed: false,
            expiresAt: nextWeek
          }
        ];
        
        // Add Epic weekly quest if available
        if (canGenerateEpic) {
          weeklyQuests.push({
            userId: req.session.userId!,
            name: "Dungeon Master",
            description: "Prove your skill by completing multiple challenging dungeons",
            questType: "weekly",
            difficulty: "Epic",
            requirements: {
              dungeonRuns: { current: 0, target: 10, label: "Complete dungeon runs" },
              bossDefeats: { current: 0, target: 3, label: "Defeat dungeon bosses" }
            },
            rewards: {
              rogueCredits: 2000,
              forgeTokens: 350,
              soulShards: 15
            },
            completed: false,
            expiresAt: nextWeek
          });
        }
        
        // Add Legendary weekly quest if available
        if (canGenerateLegendary) {
          weeklyQuests.push({
            userId: req.session.userId!,
            name: "The Ultimate Challenge",
            description: "Only the most dedicated adventurers can complete this quest",
            questType: "weekly",
            difficulty: "Legendary",
            requirements: {
              legendaryDungeons: { current: 0, target: 5, label: "Complete legendary dungeons" },
              legendaryBosses: { current: 0, target: 3, label: "Defeat legendary bosses" },
              craftAuras: { current: 0, target: 5, label: "Craft high-level auras" }
            },
            rewards: {
              rogueCredits: 5000,
              forgeTokens: 1000,
              soulShards: 50,
              material: { name: "Celestial Essence", amount: 100 }
            },
            completed: false,
            expiresAt: nextWeek
          });
        }
        
        // Create all the quests
        for (const quest of [...dailyQuests, ...weeklyQuests]) {
          await storage.createBountyQuest(quest);
        }
        
        // Fetch the newly created quests
        quests = await storage.getBountyQuests(req.session.userId!);
      }
      
      res.json(quests);
    } catch (error) {
      console.error('Error fetching bounty quests:', error);
      res.status(500).json({ message: 'Failed to fetch bounty quests' });
    }
  });
  
  app.post('/api/bounty/quests/:id/claim', authenticateUser, async (req, res) => {
    try {
      const questId = parseInt(req.params.id);
      const quest = await storage.getBountyQuestById(questId);
      
      if (!quest) {
        return res.status(404).json({ message: 'Quest not found' });
      }
      
      if (quest.userId !== req.session.userId) {
        return res.status(403).json({ message: 'Not authorized to access this quest' });
      }
      
      if (quest.completed) {
        return res.status(400).json({ message: 'Quest already claimed' });
      }
      
      // Calculate if the quest is complete
      let isComplete = true;
      if (quest.requirements && typeof quest.requirements === 'object') {
        for (const [key, requirement] of Object.entries(quest.requirements)) {
          if (typeof requirement === 'object' && 'current' in requirement && 'target' in requirement) {
            if (requirement.current < requirement.target) {
              isComplete = false;
              break;
            }
          }
        }
      }
      
      if (!isComplete) {
        return res.status(400).json({ message: 'Quest requirements not met' });
      }
      
      // Mark as completed
      await storage.updateBountyQuest(questId, { completed: true });
      
      // Award rewards
      const user = await storage.getUserById(req.session.userId!);
      if (user && quest.rewards) {
        const updates: Partial<typeof user> = {};
        
        if ('rogueCredits' in quest.rewards && quest.rewards.rogueCredits) {
          updates.rogueCredits = (user.rogueCredits || 0) + quest.rewards.rogueCredits;
        }
        
        if ('forgeTokens' in quest.rewards && quest.rewards.forgeTokens) {
          updates.forgeTokens = (user.forgeTokens || 0) + quest.rewards.forgeTokens;
        }
        
        if ('soulShards' in quest.rewards && quest.rewards.soulShards) {
          updates.soulShards = (user.soulShards || 0) + quest.rewards.soulShards;
        }
        
        if (Object.keys(updates).length > 0) {
          await storage.updateUser(user.id, updates);
        }
        
        // Award material rewards if any
        if ('material' in quest.rewards && quest.rewards.material) {
          const { name, amount } = quest.rewards.material;
          const existingResource = await storage.getResourceByNameAndUserId(name, user.id);
          
          if (existingResource) {
            await storage.updateResource(existingResource.id, {
              quantity: (existingResource.quantity || 0) + amount
            });
          } else {
            await storage.createResource({
              userId: user.id,
              name,
              type: 'material',
              quantity: amount,
              description: `A material obtained from quests`,
              iconUrl: 'https://images.unsplash.com/photo-1608054791095-e0482e3e5139?w=150&h=150&fit=crop'
            });
          }
        }
      }
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'quest_completed',
        description: `Completed quest: ${quest.name}`,
        relatedIds: { questId: quest.id }
      });
      
      res.json({
        success: true,
        message: 'Quest rewards claimed successfully',
        rewards: quest.rewards
      });
    } catch (error) {
      console.error('Error claiming quest rewards:', error);
      res.status(500).json({ message: 'Failed to claim quest rewards' });
    }
  });
  
  // Buildings routes
  app.get('/api/buildings', authenticateUser, async (req, res) => {
    try {
      const buildings = await storage.getBuildingUpgrades(req.session.userId!);
      
      // Define the default building types
      const defaultBuildingTypes = ['townhall', 'forge', 'blackmarket', 'bountyBoard', 'tavern'];
      
      // Check if all default building types exist
      const existingTypes = buildings.map(b => b.buildingType);
      
      // Create missing buildings
      const createdBuildings = [];
      for (const type of defaultBuildingTypes) {
        if (!existingTypes.includes(type)) {
          console.log(`Creating default building for type: ${type}`);
          const newBuilding = await storage.createBuildingUpgrade({
            userId: req.session.userId!,
            buildingType: type,
            currentLevel: 1,
            upgradeInProgress: false,
            unlockedSkills: [],
            availableSkillPoints: 0,
            skillDistribution: {}
          });
          if (newBuilding) {
            createdBuildings.push(newBuilding);
          }
        }
      }
      
      // If any buildings were created, return all buildings including the new ones
      if (createdBuildings.length > 0) {
        const allBuildings = await storage.getBuildingUpgrades(req.session.userId!);
        return res.json(allBuildings);
      }
      
      res.json(buildings);
    } catch (error) {
      console.error('Error fetching buildings:', error);
      res.status(500).json({ message: 'Failed to fetch buildings' });
    }
  });

  // Get building skill tree
  app.get('/api/buildings/skills/:buildingType', authenticateUser, async (req, res) => {
    try {
      const { buildingType } = req.params;
      
      console.log("GET /api/buildings/skills/:buildingType", { buildingType, userId: req.session.userId });
      
      // Get the building
      let building = await storage.getBuildingUpgradeByTypeAndUserId(buildingType, req.session.userId!);
      
      // If building doesn't exist, create a default one
      if (!building) {
        console.log(`Creating default building for type: ${buildingType}`);
        building = await storage.createBuildingUpgrade({
          userId: req.session.userId!,
          buildingType: buildingType,
          currentLevel: 1,
          upgradeInProgress: false,
          unlockedSkills: [],
          availableSkillPoints: 0,
          skillDistribution: {}
        });
        
        if (!building) {
          return res.status(500).json({ message: 'Failed to create building record' });
        }
      }
      
      // Define skill trees for each building type
      const skillTrees = {
        townhall: [
          { id: 'th_slot_1', name: 'Extra Farming Slot', description: 'Unlocks an additional farming slot', maxLevel: 5 },
          { id: 'th_resource_1', name: 'Resource Production', description: 'Increases resource gain by 5% per level', maxLevel: 5 },
          { id: 'th_exp_1', name: 'Experience Boost', description: 'Increases XP gain by 5% per level', maxLevel: 5 },
          { id: 'th_building_1', name: 'Construction Speed', description: 'Reduces building upgrade time by 5% per level', maxLevel: 5 },
        ],
        forge: [
          // Path A: Speed & Efficiency
          { id: 'forge_speed_a', name: 'Crafting Speed', description: 'Increases crafting speed by 3% per level', maxLevel: 10, path: 'a' },
          { id: 'forge_double_a', name: 'Double Forge Chance', description: 'Increases chance to craft twice by 1.5% per level', maxLevel: 10, path: 'a' },
          { id: 'forge_slots_a', name: 'Additional Crafting Slots', description: 'Unlocks crafting slot #2 at level 5, slot #3 at level 10', maxLevel: 10, path: 'a' },
          { id: 'forge_adv_speed_a', name: 'Advanced Crafting Speed', description: 'Further increases crafting speed by 2% per level', maxLevel: 10, path: 'a', requires: { forge_speed_a: 10 } },
          
          // Path B: Quality & Power
          { id: 'forge_quality_b', name: 'Forge Quality', description: 'Increases item quality by 2% per level', maxLevel: 10, path: 'b' },
          { id: 'forge_crit_b', name: 'Forge Critical Chance', description: 'Increases chance for critical crafting by 1% per level', maxLevel: 10, path: 'b' },
          { id: 'forge_slots_b', name: 'Quality Crafting Slot', description: 'Unlocks crafting slot #4 at level 10', maxLevel: 10, path: 'b' },
          { id: 'forge_enh_quality_b', name: 'Enhanced Quality', description: 'Further increases item quality by 1.5% per level', maxLevel: 10, path: 'b', requires: { forge_quality_b: 10 } },
          
          // Path C: Skill Mastery
          { id: 'forge_skill_c', name: 'Skill Boost', description: 'Increases skill boost by 2% per level', maxLevel: 10, path: 'c' },
          { id: 'forge_crit_c', name: 'Skill Critical Chance', description: 'Increases chance for critical skill bonus by 1% per level', maxLevel: 10, path: 'c' },
          { id: 'forge_slots_c', name: 'Mastery Crafting Slot', description: 'Unlocks crafting slot #5 at level 10', maxLevel: 10, path: 'c' },
          { id: 'forge_enh_skill_c', name: 'Enhanced Skill Boost', description: 'Further increases skill boost by 1.5% per level', maxLevel: 10, path: 'c', requires: { forge_skill_c: 10 } },
          
          // Cross-Path Specializations: A + B (Efficient Quality)
          { id: 'forge_quick_precision', name: 'Quick Precision', description: 'Increases quality by 1% and speed by 2% per level', maxLevel: 3, path: 'ab', requires: { points_a: 10, points_b: 10 } },
          { id: 'forge_crit_efficiency', name: 'Critical Efficiency', description: 'Increases double forge by 1% and critical chance by 1% per level', maxLevel: 3, path: 'ab', requires: { forge_quick_precision: 3 } },
          { id: 'forge_sixth_slot', name: '6th Crafting Slot', description: 'Unlocks crafting slot #6', maxLevel: 3, path: 'ab', requires: { forge_crit_efficiency: 3 } },
          
          // Cross-Path Specializations: B + C (Skillful Quality)
          { id: 'forge_refined_techniques', name: 'Refined Techniques', description: 'Increases skill boost and quality by 1.5% per level', maxLevel: 3, path: 'bc', requires: { points_b: 10, points_c: 10 } },
          { id: 'forge_enh_critical', name: 'Enhanced Critical', description: 'Increases forge critical chance by 2% per level', maxLevel: 3, path: 'bc', requires: { forge_refined_techniques: 3 } },
          { id: 'forge_master_artisan', name: 'Master Artisan', description: 'Increases stat multiplier and skill boost by 3% per level', maxLevel: 3, path: 'bc', requires: { forge_enh_critical: 3 } },
          
          // Cross-Path Specializations: A + C (Efficient Mastery)
          { id: 'forge_swift_learning', name: 'Swift Learning', description: 'Increases speed and skill boost by 2% per level', maxLevel: 3, path: 'ac', requires: { points_a: 10, points_c: 10 } },
          { id: 'forge_dual_crafting', name: 'Dual Crafting', description: 'Increases double forge by 2% and skill boost by 1.5% per level', maxLevel: 3, path: 'ac', requires: { forge_swift_learning: 3 } },
          { id: 'forge_twin_mastery', name: 'Twin Forge Mastery', description: 'Increases double forge and speed by 5% at level 3', maxLevel: 3, path: 'ac', requires: { forge_dual_crafting: 3 } },
        ],
        blackmarket: [
          { id: 'bm_slots_1', name: 'Listing Slots', description: 'Unlocks additional personal listing slot', maxLevel: 5 },
          { id: 'bm_premium_1', name: 'Premium Offers', description: 'Increases premium item offers available', maxLevel: 3 },
          { id: 'bm_standard_1', name: 'Standard Offers', description: 'Increases standard item offers available', maxLevel: 3 },
          { id: 'bm_fee_1', name: 'Reduced Fees', description: 'Reduces market listing fees by 5% per level', maxLevel: 5 },
        ],
        bountyBoard: [
          { id: 'bb_daily_1', name: 'Daily Quest Slots', description: 'Increases available daily quests by 1', maxLevel: 4 },
          { id: 'bb_weekly_1', name: 'Weekly Quest Slots', description: 'Increases available weekly quests by 1', maxLevel: 2 },
          { id: 'bb_rewards_1', name: 'Enhanced Rewards', description: 'Increases quest rewards by 10% per level', maxLevel: 5 },
          { id: 'bb_refresh_1', name: 'Quick Refresh', description: 'Reduces quest refresh timer by 1 hour per level', maxLevel: 3 },
        ],
      };
      
      // Get the appropriate skill tree
      const skillTree = skillTrees[buildingType as keyof typeof skillTrees] || [];
      
      // Return the skill tree with the current unlocked skills
      res.json({
        buildingType,
        currentLevel: building.currentLevel,
        unlockedSkills: building.unlockedSkills || [],
        availableSkillTree: skillTree
      });
    } catch (error) {
      console.error('Error fetching building skill tree:', error);
      res.status(500).json({ message: 'Failed to fetch building skill tree' });
    }
  });
  
  // Allocate skill points
  app.post('/api/buildings/skills/:buildingType', authenticateUser, async (req, res) => {
    try {
      const { buildingType } = req.params;
      const { skillId } = req.body;
      
      if (!skillId) {
        return res.status(400).json({ message: 'Skill ID is required' });
      }
      
      // Get the building
      let building = await storage.getBuildingUpgradeByTypeAndUserId(buildingType, req.session.userId!);
      
      // If building doesn't exist, create a default one
      if (!building) {
        console.log(`Creating default building for type: ${buildingType}`);
        building = await storage.createBuildingUpgrade({
          userId: req.session.userId!,
          buildingType: buildingType,
          currentLevel: 1,
          upgradeInProgress: false,
          unlockedSkills: [],
          availableSkillPoints: 0,
          skillDistribution: {}
        });
        
        if (!building) {
          return res.status(500).json({ message: 'Failed to create building record' });
        }
      }
      
      // Get the skill tree for this building type
      const skillTrees = {
        townhall: townhallSkillTree,
        forge: [
          // Path A: Speed & Efficiency
          { id: 'forge_speed_a', name: 'Crafting Speed', description: 'Increases crafting speed by 3% per level', maxLevel: 10, path: 'a' },
          { id: 'forge_double_a', name: 'Double Forge Chance', description: 'Increases chance to craft twice by 1.5% per level', maxLevel: 10, path: 'a' },
          { id: 'forge_slots_a', name: 'Additional Crafting Slots', description: 'Unlocks crafting slot #2 at level 5, slot #3 at level 10', maxLevel: 10, path: 'a' },
          { id: 'forge_adv_speed_a', name: 'Advanced Crafting Speed', description: 'Further increases crafting speed by 2% per level', maxLevel: 10, path: 'a', requires: { forge_speed_a: 10 } },
          
          // Path B: Quality & Power
          { id: 'forge_quality_b', name: 'Forge Quality', description: 'Increases item quality by 2% per level', maxLevel: 10, path: 'b' },
          { id: 'forge_crit_b', name: 'Forge Critical Chance', description: 'Increases chance for critical crafting by 1% per level', maxLevel: 10, path: 'b' },
          { id: 'forge_slots_b', name: 'Quality Crafting Slot', description: 'Unlocks crafting slot #4 at level 10', maxLevel: 10, path: 'b' },
          { id: 'forge_enh_quality_b', name: 'Enhanced Quality', description: 'Further increases item quality by 1.5% per level', maxLevel: 10, path: 'b', requires: { forge_quality_b: 10 } },
          
          // Path C: Skill Mastery
          { id: 'forge_skill_c', name: 'Skill Boost', description: 'Increases skill boost by 2% per level', maxLevel: 10, path: 'c' },
          { id: 'forge_crit_c', name: 'Skill Critical Chance', description: 'Increases chance for critical skill bonus by 1% per level', maxLevel: 10, path: 'c' },
          { id: 'forge_slots_c', name: 'Mastery Crafting Slot', description: 'Unlocks crafting slot #5 at level 10', maxLevel: 10, path: 'c' },
          { id: 'forge_enh_skill_c', name: 'Enhanced Skill Boost', description: 'Further increases skill boost by 1.5% per level', maxLevel: 10, path: 'c', requires: { forge_skill_c: 10 } },
          
          // Cross-Path Specializations
          { id: 'forge_quick_precision', name: 'Quick Precision', description: 'Increases quality by 1% and speed by 2% per level', maxLevel: 3, path: 'ab', requires: { points_a: 10, points_b: 10 } },
          { id: 'forge_crit_efficiency', name: 'Critical Efficiency', description: 'Increases double forge by 1% and critical chance by 1% per level', maxLevel: 3, path: 'ab', requires: { forge_quick_precision: 3 } },
          { id: 'forge_sixth_slot', name: '6th Crafting Slot', description: 'Unlocks crafting slot #6', maxLevel: 3, path: 'ab', requires: { forge_crit_efficiency: 3 } },
          { id: 'forge_refined_techniques', name: 'Refined Techniques', description: 'Increases skill boost and quality by 1.5% per level', maxLevel: 3, path: 'bc', requires: { points_b: 10, points_c: 10 } },
          { id: 'forge_enh_critical', name: 'Enhanced Critical', description: 'Increases forge critical chance by 2% per level', maxLevel: 3, path: 'bc', requires: { forge_refined_techniques: 3 } },
          { id: 'forge_master_artisan', name: 'Master Artisan', description: 'Increases stat multiplier and skill boost by 3% per level', maxLevel: 3, path: 'bc', requires: { forge_enh_critical: 3 } },
          { id: 'forge_swift_learning', name: 'Swift Learning', description: 'Increases speed and skill boost by 2% per level', maxLevel: 3, path: 'ac', requires: { points_a: 10, points_c: 10 } },
          { id: 'forge_dual_crafting', name: 'Dual Crafting', description: 'Increases double forge by 2% and skill boost by 1.5% per level', maxLevel: 3, path: 'ac', requires: { forge_swift_learning: 3 } },
          { id: 'forge_twin_mastery', name: 'Twin Forge Mastery', description: 'Increases double forge and speed by 5% at level 3', maxLevel: 3, path: 'ac', requires: { forge_dual_crafting: 3 } },
        ],
        blackmarket: [
          { id: 'bm_slots_1', name: 'Listing Slots', description: 'Unlocks additional personal listing slot', maxLevel: 5 },
          { id: 'bm_premium_1', name: 'Premium Offers', description: 'Increases premium item offers available', maxLevel: 3 },
          { id: 'bm_standard_1', name: 'Standard Offers', description: 'Increases standard item offers available', maxLevel: 3 },
          { id: 'bm_fee_1', name: 'Reduced Fees', description: 'Reduces market listing fees by 5% per level', maxLevel: 5 },
        ],
        bountyBoard: [
          { id: 'bb_daily_1', name: 'Daily Quest Slots', description: 'Increases available daily quests by 1', maxLevel: 4 },
          { id: 'bb_weekly_1', name: 'Weekly Quest Slots', description: 'Increases available weekly quests by 1', maxLevel: 2 },
          { id: 'bb_rewards_1', name: 'Enhanced Rewards', description: 'Increases quest rewards by 10% per level', maxLevel: 5 },
          { id: 'bb_refresh_1', name: 'Quick Refresh', description: 'Reduces quest refresh timer by 1 hour per level', maxLevel: 3 },
        ],
      };
      
      const skillTree = skillTrees[buildingType as keyof typeof skillTrees] || [];
      const selectedSkill = skillTree.find(skill => skill.id === skillId);
      
      if (!selectedSkill) {
        return res.status(404).json({ message: 'Skill not found in tree' });
      }
      
      // Check if the skill already has the maximum level
      const unlockedSkills = building.unlockedSkills || [];
      const skillCount = unlockedSkills.filter(id => id === skillId).length;
      
      if (skillCount >= selectedSkill.maxLevel) {
        return res.status(400).json({ message: 'This skill is already at maximum level' });
      }
      
      // Calculate path allocations
      const skillDistribution = building.skillDistribution || {};
      const pathCounts: Record<string, number> = {
        a: 0,
        b: 0,
        c: 0,
        ab: 0,
        bc: 0,
        ac: 0
      };
      
      // Count allocated points per path
      unlockedSkills.forEach(id => {
        const skill = skillTree.find(s => s.id === id);
        if (skill && skill.path) {
          pathCounts[skill.path] = (pathCounts[skill.path] || 0) + 1;
        }
      });
      
      // Check requirements for the selected skill
      if (selectedSkill.requires) {
        const meetsRequirements = Object.entries(selectedSkill.requires).every(([reqId, reqLevel]) => {
          // Special handling for path point requirements
          if (reqId.startsWith('points_')) {
            const path = reqId.split('_')[1];
            return pathCounts[path] >= reqLevel;
          }
          
          // Regular skill prerequisite check
          const prereqCount = unlockedSkills.filter(id => id === reqId).length;
          return prereqCount >= reqLevel;
        });
        
        if (!meetsRequirements) {
          return res.status(400).json({ 
            message: 'Skill requirements not met',
            requires: selectedSkill.requires
          });
        }
      }
      
      // Check if there are unallocated skill points (building level - allocated skills)
      const allocatedPoints = unlockedSkills.length;
      const availablePoints = building.currentLevel - allocatedPoints;
      
      if (availablePoints <= 0) {
        return res.status(400).json({ message: 'No skill points available' });
      }
      
      // Update skill distribution for path tracking
      const updatedDistribution = { ...skillDistribution };
      if (selectedSkill.path) {
        updatedDistribution[selectedSkill.path] = (updatedDistribution[selectedSkill.path] || 0) + 1;
      }
      
      // Add the skill to unlocked skills
      const updatedBuilding = await storage.updateBuildingUpgrade(building.id, {
        unlockedSkills: [...unlockedSkills, skillId],
        skillDistribution: updatedDistribution
      });
      
      res.json(updatedBuilding);
    } catch (error) {
      console.error('Error allocating skill point:', error);
      res.status(500).json({ message: 'Failed to allocate skill point' });
    }
  });

  app.post('/api/buildings/upgrade', authenticateUser, async (req, res) => {
    try {
      const { buildingType, allocatedSkill } = req.body;
      
      if (!buildingType) {
        return res.status(400).json({ message: 'Building type is required' });
      }
      
      // Get user to check resources
      const user = await storage.getUserById(req.session.userId!);
      if (!user) {
        return res.status(404).json({ message: 'User not found' });
      }
      
      // Get the townhall to determine building level restrictions
      const townhall = await storage.getBuildingUpgradeByTypeAndUserId('townhall', req.session.userId!);
      const townhallLevel = townhall?.currentLevel || 1;
      
      // Set max allowed level to 9 for all buildings regardless of townhall level
      const maxAllowedLevel = 9;
      
      // Get the existing building
      const existingBuilding = await storage.getBuildingUpgradeByTypeAndUserId(buildingType, req.session.userId!);
      
      if (!existingBuilding) {
        // Create a new building upgrade if it doesn't exist
        const newBuilding = await storage.createBuildingUpgrade({
          userId: req.session.userId!,
          buildingType,
          currentLevel: 1,
          upgradeInProgress: false,
          unlockedSkills: []
        });
        
        return res.status(201).json(newBuilding);
      }
      
      // Check if already upgrading
      if (existingBuilding.upgradeInProgress) {
        return res.status(400).json({ message: 'Building is already being upgraded' });
      }
      
      // Building configs with max level and upgrade time
      const buildingConfigs = {
        townhall: { maxLevel: 9, upgradeTime: 60 },
        forge: { maxLevel: 9, upgradeTime: 45 },
        blackmarket: { maxLevel: 9, upgradeTime: 30 },
        barracks: { maxLevel: 9, upgradeTime: 45 },
        library: { maxLevel: 9, upgradeTime: 30 },
        guild: { maxLevel: 9, upgradeTime: 90 },
        bountyBoard: { maxLevel: 9, upgradeTime: 40 }
      };
      
      const config = buildingConfigs[buildingType as keyof typeof buildingConfigs];
      const maxLevel = config?.maxLevel || 50;
      
      // For townhall, use its own max level
      if (buildingType === 'townhall') {
        if (existingBuilding.currentLevel >= maxLevel) {
          return res.status(400).json({ message: 'Townhall is already at max level' });
        }
      } else {
        // For other buildings, check against the max allowed level
        if (existingBuilding.currentLevel >= Math.min(maxAllowedLevel, maxLevel)) {
          return res.status(400).json({ 
            message: 'Building has reached maximum level',
            currentLevel: existingBuilding.currentLevel,
            maxAllowedLevel: maxAllowedLevel
          });
        }
      }
      
      // Calculate cost
      const baseCosts = {
        townhall: { rogueCredits: 1000, forgeTokens: 100 },
        forge: { rogueCredits: 800, forgeTokens: 80 },
        blackmarket: { rogueCredits: 600, forgeTokens: 60 },
        barracks: { rogueCredits: 800, forgeTokens: 80 },
        library: { rogueCredits: 600, forgeTokens: 60 },
        guild: { rogueCredits: 1200, forgeTokens: 120 },
        bountyBoard: { rogueCredits: 700, forgeTokens: 70 }
      };
      
      const baseCost = baseCosts[buildingType as keyof typeof baseCosts] || { rogueCredits: 500, forgeTokens: 50 };
      const levelMultiplier = existingBuilding.currentLevel;
      const cost = {
        rogueCredits: baseCost.rogueCredits * levelMultiplier,
        forgeTokens: baseCost.forgeTokens * levelMultiplier
      };
      
      // Check if user can afford upgrade
      if (user.rogueCredits! < cost.rogueCredits || user.forgeTokens! < cost.forgeTokens) {
        return res.status(400).json({ 
          message: 'Insufficient resources for upgrade',
          required: cost,
          current: {
            rogueCredits: user.rogueCredits,
            forgeTokens: user.forgeTokens
          }
        });
      }
      
      // Deduct costs
      await storage.updateUser(user.id, {
        rogueCredits: user.rogueCredits! - cost.rogueCredits,
        forgeTokens: user.forgeTokens! - cost.forgeTokens
      });
      
      // Set upgrade in progress
      const upgradeTime = (config?.upgradeTime || 30) * 60 * 1000; // minutes to milliseconds
      const updatedBuilding = await storage.updateBuildingUpgrade(existingBuilding.id, {
        upgradeInProgress: true,
        upgradeStartTime: new Date(),
        upgradeEndTime: new Date(Date.now() + upgradeTime)
      });
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'building_upgrade_started',
        description: `Started upgrading ${buildingType} to level ${existingBuilding.currentLevel + 1}`,
        relatedIds: { buildingId: existingBuilding.id }
      });
      
      res.json(updatedBuilding);
    } catch (error) {
      console.error('Error starting building upgrade:', error);
      res.status(500).json({ message: 'Failed to start building upgrade' });
    }
  });
  
  app.post('/api/buildings/complete/:buildingType', authenticateUser, async (req, res) => {
    try {
      const { buildingType } = req.params;
      
      // Get the building
      const building = await storage.getBuildingUpgradeByTypeAndUserId(buildingType, req.session.userId!);
      
      if (!building) {
        return res.status(404).json({ message: 'Building not found' });
      }
      
      if (!building.upgradeInProgress) {
        return res.status(400).json({ message: 'Building is not being upgraded' });
      }
      
      if (building.upgradeEndTime && new Date(building.upgradeEndTime) > new Date()) {
        return res.status(400).json({ 
          message: 'Upgrade not complete yet',
          remainingTime: new Date(building.upgradeEndTime).getTime() - Date.now()
        });
      }
      
      // Complete upgrade
      const updatedBuilding = await storage.updateBuildingUpgrade(building.id, {
        currentLevel: building.currentLevel + 1,
        upgradeInProgress: false,
        upgradeStartTime: null,
        upgradeEndTime: null
      });
      
      // Log activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'building_upgrade_completed',
        description: `Completed upgrading ${buildingType} to level ${building.currentLevel + 1}`,
        relatedIds: { buildingId: building.id }
      });
      
      res.json(updatedBuilding);
    } catch (error) {
      console.error('Error completing building upgrade:', error);
      res.status(500).json({ message: 'Failed to complete building upgrade' });
    }
  });
  
  // Activity log routes
  app.get('/api/activity', authenticateUser, async (req, res) => {
    try {
      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;
      const logs = await storage.getActivityLogs(req.session.userId!, limit);
      res.json(logs);
    } catch (error) {
      console.error('Error fetching activity logs:', error);
      res.status(500).json({ message: 'Failed to fetch activity logs' });
    }
  });
  
  // Register building skill routes
  await addBuildingSkillRoutes(app);
  
  // Add error handling middleware
  app.use(handleErrors);
  
  return httpServer;
}

// Helper function to generate mock battle log
async function generateMockBattleLog(run: any, success: boolean) {
  // Initialize battle data
  const battleLog = [];
  const allies = [];
  const enemies = [];

  // Get character data for allies
  for (const charId of run.characterIds) {
    const char = await storage.getCharacterById(charId);
    const aura = char?.equippedAuraId ? await storage.getAuraById(char.equippedAuraId) : null;
    
    allies.push({
      id: charId,
      name: char?.name || 'Unknown Hero',
      stats: {
        attack: char?.attack || 50,
        vitality: char?.vitality || 100,
        speed: char?.speed || 40
      },
      skills: {
        basic: aura?.skills?.[0] || { name: 'Basic Attack', damage: 1.0 },
        advanced: aura?.skills?.[1] || { name: 'Advanced Skill', damage: 1.5, cooldown: 4 },
        ultimate: aura?.skills?.[2] || { name: 'Ultimate', damage: 2.0, cooldown: 6 }
      }
    });
  }

  // Generate enemies based on dungeon level
  const enemyTypes = ['Minion', 'Elite', 'Boss'];
  const enemyCount = Math.min(3, Math.floor(run.dungeonLevel / 2) + 1);
  
  for (let i = 0; i < enemyCount; i++) {
    const type = i === enemyCount - 1 ? 'Boss' : 'Minion';
    const level = run.dungeonLevel;
    
    enemies.push({
      id: `enemy_${i}`,
      name: `${type} ${i + 1}`,
      stats: {
        attack: 40 + (level * 5),
        vitality: type === 'Boss' ? 200 + (level * 20) : 80 + (level * 10),
        speed: type === 'Boss' ? 35 + (level * 2) : 45 + (level * 3)
      },
      skills: {
        basic: { name: 'Enemy Attack', damage: 1.0 },
        advanced: type === 'Boss' ? { name: 'Boss Strike', damage: 1.8, cooldown: 3 } : null,
        ultimate: type === 'Boss' ? { name: 'Boss Ultimate', damage: 2.5, cooldown: 5 } : null
      }
    });
  }

  // Initial battle state
  battleLog.push({
    type: 'battle_start',
    allies,
    enemies,
    timestamp: Date.now()
  });

  // Simulate combat with attack meters
  let aliveAllies = [...allies];
  let aliveEnemies = [...enemies];
  let round = 0;
  const maxRounds = 30;

  while (round < maxRounds && aliveAllies.length > 0 && aliveEnemies.length > 0) {
    round++;
    const roundActions = [];

    // Process all units' actions based on speed
    const allUnits = [...aliveAllies, ...aliveEnemies].map(unit => ({
      ...unit,
      actionTimer: 100 / (unit.stats.speed / 40)
    }));

    // Sort by action timer (lower acts first)
    allUnits.sort((a, b) => a.actionTimer - b.actionTimer);

    for (const unit of allUnits) {
      // Skip if unit is defeated
      if (!aliveAllies.includes(unit) && !aliveEnemies.includes(unit)) continue;

      const isAlly = aliveAllies.includes(unit);
      const targets = isAlly ? aliveEnemies : aliveAllies;
      if (targets.length === 0) continue;

      // Select skill based on cooldowns
      const availableSkills = [unit.skills.basic];
      if (unit.skills.advanced && round % unit.skills.advanced.cooldown === 0) {
        availableSkills.push(unit.skills.advanced);
      }
      if (unit.skills.ultimate && round % unit.skills.ultimate.cooldown === 0) {
        availableSkills.push(unit.skills.ultimate);
      }

      const skill = availableSkills[Math.floor(Math.random() * availableSkills.length)];
      const target = targets[Math.floor(Math.random() * targets.length)];

      // Calculate damage
      const baseDamage = unit.stats.attack * skill.damage;
      const isCritical = Math.random() < 0.2;
      const damage = Math.floor(baseDamage * (isCritical ? 1.5 : 1));

      // Record action
      roundActions.push({
        actor: unit.name,
        skill: skill.name,
        target: target.name,
        damage,
        isCritical
      });

      // Apply damage and check for defeats
      target.stats.vitality -= damage;
      if (target.stats.vitality <= 0) {
        if (isAlly) {
          aliveEnemies = aliveEnemies.filter(e => e.id !== target.id);
          roundActions.push({
            type: 'defeat',
            target: target.name
          });
        } else {
          aliveAllies = aliveAllies.filter(a => a.id !== target.id);
          roundActions.push({
            type: 'defeat',
            target: target.name
          });
        }
      }
    }

    // Record round results
    battleLog.push({
      type: 'round',
      number: round,
      actions: roundActions,
      remainingAllies: aliveAllies.length,
      remainingEnemies: aliveEnemies.length
    });
  }

  // Record battle outcome
  const victory = aliveEnemies.length === 0;
  battleLog.push({
    type: 'battle_end',
    victory,
    totalRounds: round,
    survivingAllies: aliveAllies.map(a => a.name),
    summary: victory ? 
      `Victory achieved in ${round} rounds!` : 
      `Defeat after ${round} rounds of combat.`
  });

  return battleLog;
  
  // Define elemental effects and modifiers
  const elementalEffects = {
    fire: { strength: 'wind', weakness: 'water', effectName: 'Burning' },
    water: { strength: 'fire', weakness: 'earth', effectName: 'Drenched' },
    earth: { strength: 'water', weakness: 'wind', effectName: 'Petrified' },
    wind: { strength: 'earth', weakness: 'fire', effectName: 'Airborne' },
    neutral: { strength: null, weakness: null, effectName: 'Stunned' }
  };
  
  const elementEffect = elementalEffects[elementalType as keyof typeof elementalEffects] || elementalEffects.neutral;
  
  // Boss names by element
  const bossesByElement = {
    fire: ['Inferno Drake', 'Magma Overlord', 'Flame Titan'],
    water: ['Abyssal Hydra', 'Tidal Leviathan', 'Frost Behemoth'],
    earth: ['Stone Colossus', 'Mountain King', 'Terra Wraith'],
    wind: ['Storm Harpy', 'Tempest Lord', 'Cyclone Specter'],
    neutral: ['Void Devourer', 'Shadow Emperor', 'Nexus Guardian']
  };
  
  // Define character names and stats
  const characterEntries = await Promise.all(run.characterIds.map(async (id: number) => {
    const char = await storage.getCharacterById(id);
    return {
      id,
      name: char?.name || `Character ${id}`,
      attack: char?.attack || 50,
      defense: char?.defense || 30,
      hp: 100,
      maxHp: 100,
      effects: []
    };
  }));
  
  const characters = Object.fromEntries(
    characterEntries.map(char => [char.id, char])
  );
  
  // Generate enemies by dungeon element
  const bossName = bossesByElement[elementalType as keyof typeof bossesByElement] 
    ? bossesByElement[elementalType as keyof typeof bossesByElement][Math.floor(Math.random() * 3)] 
    : 'Unknown Boss';
  
  // Generate stages
  for (let stage = 1; stage <= completedStages; stage++) {
    const isBossStage = stage === totalStages;
    const stageEnemies = isBossStage 
      ? [{ id: 'boss', name: bossName, hp: 200, maxHp: 200, attack: 60, defense: 40, effects: [] }]
      : Array(Math.min(3, Math.floor(stage/2) + 1)).fill(0).map((_, i) => ({
          id: `enemy_${stage}_${i}`,
          name: `${elementalType.charAt(0).toUpperCase() + elementalType.slice(1)} Minion ${i+1}`,
          hp: 50 + (stage * 10),
          maxHp: 50 + (stage * 10),
          attack: 30 + (stage * 3),
          defense: 20 + (stage * 2),
          effects: []
        }));
    
    // Setup stage object
    const stageLog = {
      stage,
      isBossStage,
      enemies: stageEnemies,
      rounds: [],
      outcome: stage < completedStages || success ? 'victory' : 'defeat',
      stageCompleted: stage <= completedStages
    };
    
    // Generate rounds for this stage
    const maxRounds = isBossStage ? 5 : 3;
    const rounds = Math.min(maxRounds, Math.floor(Math.random() * 3) + 2); // 2-4 rounds
    
    for (let round = 1; round <= rounds; round++) {
      const roundActions = [];
      let allEnemiesDefeated = false;
      
      // Player character actions
      for (const charId of Object.keys(characters)) {
        if (stageEnemies.length === 0) {
          allEnemiesDefeated = true;
          break;
        }
        
        // Skip if character has 0 HP
        if (characters[charId].hp <= 0) continue;
        
        // Target random living enemy
        const livingEnemies = stageEnemies.filter(e => e.hp > 0);
        if (livingEnemies.length === 0) {
          allEnemiesDefeated = true;
          break;
        }
        
        const targetIdx = Math.floor(Math.random() * livingEnemies.length);
        const target = livingEnemies[targetIdx];
        
        // Calculate damage
        const baseDamage = characters[charId].attack - (target.defense / 2);
        const isCritical = Math.random() < 0.2;
        let damage = Math.max(5, Math.floor(baseDamage * (isCritical ? 1.5 : 1)));
        
        // Apply elemental advantages
        if (elementalType === elementEffect.strength) {
          damage = Math.floor(damage * 1.3);
        } else if (elementalType === elementEffect.weakness) {
          damage = Math.floor(damage * 0.7);
        }
        
        // Apply damage
        target.hp = Math.max(0, target.hp - damage);
        
        // Add action to log
        roundActions.push({
          actor: characters[charId].name,
          target: target.name,
          action: 'attack',
          damage,
          isCritical,
          elementalEffect: isCritical ? elementEffect.effectName : null,
          targetRemainingHp: target.hp,
          targetMaxHp: target.maxHp
        });
        
        // Check if enemy defeated
        if (target.hp <= 0) {
          roundActions.push({
            actor: 'system',
            target: target.name,
            action: 'defeat',
            message: `${target.name} has been defeated!`
          });
          
          // Remove enemy from active enemies
          stageEnemies.splice(stageEnemies.indexOf(target), 1);
        }
      }
      
      // End round early if all enemies defeated
      if (allEnemiesDefeated) {
        stageLog.rounds.push({
          round,
          actions: roundActions,
          summary: 'All enemies defeated!'
        });
        break;
      }
      
      // Enemy actions
      for (const enemy of stageEnemies) {
        // Skip if enemy has 0 HP
        if (enemy.hp <= 0) continue;
        
        // Get all living characters
        const livingCharIds = Object.keys(characters).filter(id => characters[id].hp > 0);
        if (livingCharIds.length === 0) {
          roundActions.push({
            actor: 'system',
            action: 'defeat',
            message: 'All characters have been defeated!'
          });
          stageLog.outcome = 'defeat';
          break;
        }
        
        // Target random living character
        const targetCharId = livingCharIds[Math.floor(Math.random() * livingCharIds.length)];
        const targetChar = characters[targetCharId];
        
        // Calculate damage
        const baseDamage = enemy.attack - (targetChar.defense / 2);
        const isCritical = Math.random() < 0.15;
        let damage = Math.max(3, Math.floor(baseDamage * (isCritical ? 1.5 : 1)));
        
        // Apply damage
        targetChar.hp = Math.max(0, targetChar.hp - damage);
        
        // Add action to log
        roundActions.push({
          actor: enemy.name,
          target: targetChar.name,
          action: 'attack',
          damage,
          isCritical,
          elementalEffect: isCritical ? elementEffect.effectName : null,
          targetRemainingHp: targetChar.hp,
          targetMaxHp: targetChar.maxHp
        });
        
        // Check if character defeated
        if (targetChar.hp <= 0) {
          roundActions.push({
            actor: 'system',
            target: targetChar.name,
            action: 'defeat',
            message: `${targetChar.name} has been defeated!`
          });
        }
      }
      
      // Add round to stage log
      stageLog.rounds.push({
        round,
        actions: roundActions
      });
      
      // Check if all characters defeated
      const allCharactersDefeated = Object.values(characters).every(char => char.hp <= 0);
      if (allCharactersDefeated) {
        stageLog.outcome = 'defeat';
        break;
      }
    }
    
    // Add stage summary
    stageLog.summary = stageLog.outcome === 'victory' 
      ? `Stage ${stage} cleared! Your party ${isBossStage ? 'defeats the boss and' : ''} moves forward.`
      : `Your party was defeated in stage ${stage}.`;
    
    // Heal characters between non-boss stages (if victorious)
    if (stageLog.outcome === 'victory' && !isBossStage) {
      Object.values(characters).forEach(char => {
        const healAmount = Math.floor(char.maxHp * 0.3);
        char.hp = Math.min(char.maxHp, char.hp + healAmount);
      });
      
      stageLog.recovery = {
        message: 'Your party recovers some health before the next stage.',
        characters: Object.entries(characters).map(([id, char]) => ({
          id,
          name: char.name,
          hp: char.hp,
          maxHp: char.maxHp
        }))
      };
    }
    
    // Add stage to log
    log.push(stageLog);
    
    // Exit if party was defeated
    if (stageLog.outcome === 'defeat') {
      break;
    }
  }
  
  // Final result
  const finalResult = {
    totalStages,
    completedStages,
    success,
    finalSummary: success 
      ? `Dungeon cleared! Your party conquered all ${totalStages} stages and claimed the rewards.`
      : `Dungeon attempt failed. Your party completed ${completedStages} out of ${totalStages} stages.`
  };
  
  log.push(finalResult);
  
  return log;
}

// Add routes for specific buildings and skill trees

export async function addBuildingSkillRoutes(app: Express) {
  // Get Townhall skills
  app.get('/api/buildings/skills/townhall', authenticateUser, async (req, res) => {
    try {
      console.log('Townhall skills API endpoint called');
      
      // Get the townhall building data
      const townhall = await storage.getBuildingUpgradeByTypeAndUserId('townhall', req.session.userId!);
      
      console.log('Townhall data from database:', townhall);
      
      if (!townhall) {
        console.log('Townhall not found for user', req.session.userId);
        return res.status(404).json({ message: 'Townhall not found' });
      }
      
      // Send the skill tree data along with building info
      const responseData = {
        currentLevel: townhall.currentLevel,
        unlockedSkills: townhall.unlockedSkills || [],
        availableSkillTree: townhallSkillTree
      };
      
      console.log('Sending skill tree response:', {
        currentLevel: responseData.currentLevel,
        unlockedSkillsCount: responseData.unlockedSkills.length,
        skillTreeCount: townhallSkillTree.length
      });
      
      return res.json(responseData);
    } catch (error) {
      console.error('Error fetching townhall skills:', error);
      res.status(500).json({ message: 'Failed to fetch townhall skill data' });
    }
  });
  
  // Unlock a townhall skill (farm plot or forge slot)
  app.post('/api/buildings/skills/townhall', authenticateUser, async (req, res) => {
    try {
      const { skillId } = req.body;
      
      if (!skillId) {
        return res.status(400).json({ message: 'Skill ID is required' });
      }
      
      // Get the townhall building data
      const townhall = await storage.getBuildingUpgradeByTypeAndUserId('townhall', req.session.userId!);
      
      if (!townhall) {
        return res.status(404).json({ message: 'Townhall not found' });
      }
      
      // Check if skill is already unlocked
      if (townhall.unlockedSkills && townhall.unlockedSkills.includes(skillId)) {
        return res.status(400).json({ message: 'Skill is already unlocked' });
      }
      
      // Find the skill in the skill tree
      const skill = townhallSkillTree.find(s => s.id === skillId);
      if (!skill) {
        return res.status(404).json({ message: 'Skill not found in the skill tree' });
      }
      
      // If the skill has level requirements, verify them
      if (skill.requires && skill.requires.townhall_level) {
        if (townhall.currentLevel < skill.requires.townhall_level) {
          return res.status(400).json({ 
            message: `Townhall level ${skill.requires.townhall_level} required to unlock this skill` 
          });
        }
      }
      
      // Check if user has building plans
      const hasBuildingPlansResource = await hasBuildingPlans(req.session.userId!, storage);
      if (!hasBuildingPlansResource) {
        return res.status(400).json({ message: 'You need Building Plans to unlock this skill' });
      }
      
      // All checks passed, consume building plan
      const planConsumed = await consumeBuildingPlan(req.session.userId!, storage);
      if (!planConsumed) {
        return res.status(500).json({ message: 'Failed to consume Building Plan' });
      }
      
      // Add the skill to unlocked skills
      const unlockedSkills = townhall.unlockedSkills || [];
      unlockedSkills.push(skillId);
      
      // Update the townhall
      await storage.updateBuildingUpgrade(townhall.id, {
        unlockedSkills
      });
      
      // Log the activity
      await storage.createActivityLog({
        userId: req.session.userId!,
        activityType: 'townhall_skill_unlocked',
        description: `Unlocked ${skill.name} at the Townhall`,
        relatedIds: { buildingId: townhall.id }
      });
      
      return res.json({
        success: true,
        message: `Successfully unlocked ${skill.name}`,
        unlockedSkills
      });
    } catch (error) {
      console.error('Error unlocking townhall skill:', error);
      res.status(500).json({ message: 'Failed to unlock townhall skill' });
    }
  });
  
  // Get Bounty Board building data
  app.get('/api/buildings/bountyBoard', authenticateUser, async (req, res) => {
    try {
      const bountyBoard = await storage.getBuildingUpgradeByTypeAndUserId('bountyBoard', req.session.userId!);
      
      if (!bountyBoard) {
        // Create a default one if it doesn't exist
        const newBountyBoard = await storage.createBuildingUpgrade({
          userId: req.session.userId!,
          buildingType: 'bountyBoard',
          currentLevel: 1,
          upgradeInProgress: false,
          unlockedSkills: [],
          availableSkillPoints: 0,
          skillDistribution: {}
        });
        
        return res.json(newBountyBoard);
      }
      
      // Calculate available skill points if not set
      if (bountyBoard.availableSkillPoints === null || bountyBoard.availableSkillPoints === undefined) {
        const totalPoints = Math.max(0, (bountyBoard.currentLevel - 1) * 2);
        const usedPoints = bountyBoard.skillDistribution
          ? Object.values(bountyBoard.skillDistribution as Record<string, number>).reduce((sum: number, level) => sum + (typeof level === 'number' ? level : 0), 0)
          : 0;
        
        bountyBoard.availableSkillPoints = totalPoints - usedPoints;
        
        // Save the calculated value
        await storage.updateBuildingUpgrade(bountyBoard.id, {
          availableSkillPoints: bountyBoard.availableSkillPoints
        });
      }
      
      res.json(bountyBoard);
    } catch (error) {
      console.error('Error fetching bounty board:', error);
      res.status(500).json({ message: 'Failed to fetch bounty board data' });
    }
  });
  
  // Update Bounty Board skill distribution
  app.post('/api/buildings/skills/bountyBoard', authenticateUser, async (req, res) => {
    try {
      const { skillDistribution } = req.body;
      
      if (!skillDistribution || typeof skillDistribution !== 'object') {
        return res.status(400).json({ message: 'Invalid skill distribution data' });
      }
      
      const bountyBoard = await storage.getBuildingUpgradeByTypeAndUserId('bountyBoard', req.session.userId!);
      
      if (!bountyBoard) {
        return res.status(404).json({ message: 'Bounty Board not found' });
      }
      
      // Calculate total points
      const totalPoints = Math.max(0, (bountyBoard.currentLevel - 1) * 2);
      const newUsedPoints = Object.values(skillDistribution).reduce((sum: number, level) => sum + (typeof level === 'number' ? level : 0), 0);
      
      if (newUsedPoints > totalPoints) {
        return res.status(400).json({ 
          message: 'Too many skill points allocated',
          allocated: newUsedPoints,
          available: totalPoints
        });
      }
      
      // Calculate available points
      const availableSkillPoints = totalPoints - newUsedPoints;
      
      // Update the building
      const updatedBountyBoard = await storage.updateBuildingUpgrade(bountyBoard.id, {
        skillDistribution: skillDistribution,
        availableSkillPoints: availableSkillPoints
      });
      
      res.json(updatedBountyBoard);
    } catch (error) {
      console.error('Error updating bounty board skills:', error);
      res.status(500).json({ message: 'Failed to update skill distribution' });
    }
  });
}


=== shared/schema.ts ===
import { pgTable, text, serial, integer, boolean, timestamp, json, jsonb, primaryKey } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
import { relations } from "drizzle-orm";

// User model
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  discordId: text("discord_id").notNull().unique(),
  username: text("username").notNull(),
  avatarUrl: text("avatar_url"),
  roles: text("roles").array(),
  lastLogin: timestamp("last_login").defaultNow(),
  forgeTokens: integer("forge_tokens").default(0),
  rogueCredits: integer("rogue_credits").default(0),
  soulShards: integer("soul_shards").default(0),
  townhallLevel: integer("townhall_level").default(1),
  forgeLevel: integer("forge_level").default(1),
  blackMarketLevel: integer("black_market_level").default(1),
  bountyBoardLevel: integer("bounty_board_level").default(1),
  tavernLevel: integer("tavern_level").default(1),
  isAdmin: boolean("is_admin").default(false),
});

// Character model
export const characters = pgTable("characters", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  name: text("name").notNull(),
  level: integer("level").default(1),
  class: text("class").notNull(),
  avatarUrl: text("avatar_url").notNull(),
  equippedAuraId: integer("equipped_aura_id"),
  attack: integer("attack").default(100),
  accuracy: integer("accuracy").default(100),
  vitality: integer("vitality").default(100),
  defense: integer("defense").default(100),
  speed: integer("speed").default(100),
  focus: integer("focus").default(100),
  resilience: integer("resilience").default(100),
  health: integer("health").default(100),
  intelligence: integer("intelligence").default(100),
  luck: integer("luck").default(100),
  passiveSkills: jsonb("passive_skills").array(), // Array of passive skills with name and description
  isActive: boolean("is_active").default(false),
  activityType: text("activity_type"), // 'farming', 'dungeon', null
  activityEndTime: timestamp("activity_end_time"),
});

// Aura model
export const auras = pgTable("auras", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  name: text("name").notNull(),
  level: integer("level").default(1),
  element: text("element").notNull(), // fire, water, earth, air, light, dark
  tier: integer("tier").default(1),
  // Stat bonuses range from -10 to +10 (representing percentage)
  attack: integer("attack").default(0),
  accuracy: integer("accuracy").default(0),
  defense: integer("defense").default(0),
  vitality: integer("vitality").default(0),
  speed: integer("speed").default(0),
  focus: integer("focus").default(0),
  resilience: integer("resilience").default(0),
  skills: jsonb("skills").array(),
  equippedByCharacterId: integer("equipped_by_character_id"),
  isFusing: boolean("is_fusing").default(false),
  fusionEndTime: timestamp("fusion_end_time"),
  fusionSource: boolean("fusion_source").default(false), // Whether this aura was created via fusion
  creatorCharacterId: integer("creator_character_id"), // Character that created this aura
});

// Resource model
export const resources = pgTable("resources", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  name: text("name").notNull(),
  type: text("type").notNull(), // material, currency, upgrade
  quantity: integer("quantity").default(0),
  description: text("description"),
  iconUrl: text("icon_url"),
});

// Farming task model
export const farmingTasks = pgTable("farming_tasks", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  characterId: integer("character_id").notNull(),
  resourceName: text("resource_name").notNull(),
  startTime: timestamp("start_time").defaultNow(),
  endTime: timestamp("end_time").notNull(),
  completed: boolean("completed").default(false),
  slotIndex: integer("slot_index").notNull(),
});

// Dungeon run model
export const dungeonTypes = pgTable("dungeon_types", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  elementalType: text("elemental_type").notNull(), // fire, water, wind, earth
  difficulty: text("difficulty").notNull(), // easy, medium, hard, elite, legendary
  recommendedLevel: integer("recommended_level").notNull(),
  stages: integer("stages").default(8).notNull(),
  imageUrl: text("image_url"),
  rewardTiers: jsonb("reward_tiers"),
  specificDrops: jsonb("specific_drops"),
});

export const dungeonRuns = pgTable("dungeon_runs", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  dungeonTypeId: integer("dungeon_type_id").notNull(),
  dungeonName: text("dungeon_name").notNull(),
  dungeonLevel: integer("dungeon_level").notNull(),
  elementalType: text("elemental_type").notNull(),
  characterIds: integer("character_ids").array().notNull(),
  startTime: timestamp("start_time").defaultNow(),
  endTime: timestamp("end_time").notNull(),
  completed: boolean("completed").default(false),
  success: boolean("success"),
  completedStages: integer("completed_stages").default(0),
  totalStages: integer("total_stages").default(8),
  rewards: jsonb("rewards"),
  rollValue: integer("roll_value"),
  rewardTier: integer("reward_tier"),
  battleLog: jsonb("battle_log"),
});

// Forging task model
export const forgingTasks = pgTable("forging_tasks", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  characterId: integer("character_id").notNull(), // Character assigned to this task
  taskType: text("task_type").notNull(), // 'craft', 'fusion'
  primaryAuraId: integer("primary_aura_id"),
  secondaryAuraId: integer("secondary_aura_id"),
  targetElement: text("target_element"),
  requiredMaterials: jsonb("required_materials"),
  startTime: timestamp("start_time").defaultNow(),
  endTime: timestamp("end_time").notNull(),
  completed: boolean("completed").default(false),
  resultAuraId: integer("result_aura_id"),
});

// Black Market listing model
export const blackMarketListings = pgTable("black_market_listings", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  itemType: text("item_type").notNull(), // 'character', 'aura', 'resource'
  itemId: integer("item_id").notNull(),
  itemData: jsonb("item_data"),
  price: integer("price").notNull(),
  currencyType: text("currency_type").notNull(), // 'forgeTokens', 'rogueCredits'
  createdAt: timestamp("created_at").defaultNow(),
  expiresAt: timestamp("expires_at"),
  sold: boolean("sold").default(false),
  featured: boolean("featured").default(false),
  isPremium: boolean("is_premium").default(false),
  listedAt: timestamp("listed_at").defaultNow(),
});

// Bounty quest model
export const bountyQuests = pgTable("bounty_quests", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  requirements: jsonb("requirements").notNull(),
  rewards: jsonb("rewards").notNull(),
  difficulty: text("difficulty").notNull(), // 'easy', 'medium', 'hard', 'epic'
  frequency: text("frequency").default('daily'), // 'daily', 'weekly'
  createdAt: timestamp("created_at").defaultNow(),
  expiresAt: timestamp("expires_at").notNull(),
  completed: boolean("completed").default(false),
});

// Building upgrade model
export const buildingUpgrades = pgTable("building_upgrades", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  buildingType: text("building_type").notNull(), // 'townhall', 'forge', 'blackmarket', etc.
  currentLevel: integer("current_level").notNull(),
  upgradeStartTime: timestamp("upgrade_start_time"),
  upgradeEndTime: timestamp("upgrade_end_time"),
  upgradeInProgress: boolean("upgrade_in_progress").default(false),
  unlockedSkills: text("unlocked_skills").array(),
  availableSkillPoints: integer("available_skill_points").default(0),
  skillDistribution: jsonb("skill_distribution"), // Stores skill point allocation for each building
});

// Activity log model
export const activityLogs = pgTable("activity_logs", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  activityType: text("activity_type").notNull(),
  description: text("description").notNull(),
  timestamp: timestamp("timestamp").defaultNow(),
  relatedIds: jsonb("related_ids"),
});

// Define relations between tables
export const usersRelations = relations(users, ({ many }) => ({
  characters: many(characters),
  auras: many(auras),
  resources: many(resources),
  farmingTasks: many(farmingTasks),
  dungeonRuns: many(dungeonRuns),
  forgingTasks: many(forgingTasks),
  blackMarketListings: many(blackMarketListings),
  bountyQuests: many(bountyQuests),
  buildingUpgrades: many(buildingUpgrades),
  activityLogs: many(activityLogs),
}));

export const charactersRelations = relations(characters, ({ one, many }) => ({
  user: one(users, {
    fields: [characters.userId],
    references: [users.id],
  }),
  equippedAura: one(auras, {
    fields: [characters.equippedAuraId],
    references: [auras.id],
  }),
  farmingTasks: many(farmingTasks),
  forgingTasks: many(forgingTasks),
}));

export const aurasRelations = relations(auras, ({ one }) => ({
  user: one(users, {
    fields: [auras.userId],
    references: [users.id],
  }),
  equippedByCharacter: one(characters, {
    fields: [auras.equippedByCharacterId],
    references: [characters.id],
  }),
  creatorCharacter: one(characters, {
    fields: [auras.creatorCharacterId],
    references: [characters.id],
  }),
}));

export const resourcesRelations = relations(resources, ({ one }) => ({
  user: one(users, {
    fields: [resources.userId],
    references: [users.id],
  }),
}));

export const farmingTasksRelations = relations(farmingTasks, ({ one }) => ({
  user: one(users, {
    fields: [farmingTasks.userId],
    references: [users.id],
  }),
  character: one(characters, {
    fields: [farmingTasks.characterId],
    references: [characters.id],
  }),
}));

export const dungeonTypesRelations = relations(dungeonTypes, ({ many }) => ({
  dungeonRuns: many(dungeonRuns)
}));

export const dungeonRunsRelations = relations(dungeonRuns, ({ one }) => ({
  user: one(users, {
    fields: [dungeonRuns.userId],
    references: [users.id],
  }),
  dungeonType: one(dungeonTypes, {
    fields: [dungeonRuns.dungeonTypeId],
    references: [dungeonTypes.id],
  }),
}));

export const forgingTasksRelations = relations(forgingTasks, ({ one }) => ({
  user: one(users, {
    fields: [forgingTasks.userId],
    references: [users.id],
  }),
  character: one(characters, {
    fields: [forgingTasks.characterId],
    references: [characters.id],
  }),
  primaryAura: one(auras, {
    fields: [forgingTasks.primaryAuraId],
    references: [auras.id],
  }),
  secondaryAura: one(auras, {
    fields: [forgingTasks.secondaryAuraId],
    references: [auras.id],
  }),
  resultAura: one(auras, {
    fields: [forgingTasks.resultAuraId],
    references: [auras.id],
  }),
}));

export const blackMarketListingsRelations = relations(blackMarketListings, ({ one }) => ({
  user: one(users, {
    fields: [blackMarketListings.userId],
    references: [users.id],
  }),
}));

export const bountyQuestsRelations = relations(bountyQuests, ({ one }) => ({
  user: one(users, {
    fields: [bountyQuests.userId],
    references: [users.id],
  }),
}));

export const buildingUpgradesRelations = relations(buildingUpgrades, ({ one }) => ({
  user: one(users, {
    fields: [buildingUpgrades.userId],
    references: [users.id],
  }),
}));

export const activityLogsRelations = relations(activityLogs, ({ one }) => ({
  user: one(users, {
    fields: [activityLogs.userId],
    references: [users.id],
  }),
}));

// Define insert schemas for each model
export const insertUserSchema = createInsertSchema(users).omit({ id: true });
export const insertCharacterSchema = createInsertSchema(characters).omit({ id: true });
export const insertAuraSchema = createInsertSchema(auras).omit({ id: true });
export const insertResourceSchema = createInsertSchema(resources).omit({ id: true });
export const insertFarmingTaskSchema = createInsertSchema(farmingTasks).omit({ id: true });
export const insertDungeonTypeSchema = createInsertSchema(dungeonTypes).omit({ id: true });
export const insertDungeonRunSchema = createInsertSchema(dungeonRuns).omit({ id: true });
export const insertForgingTaskSchema = createInsertSchema(forgingTasks).omit({ id: true });
export const insertBlackMarketListingSchema = createInsertSchema(blackMarketListings).omit({ id: true });
export const insertBountyQuestSchema = createInsertSchema(bountyQuests).omit({ id: true });
export const insertBuildingUpgradeSchema = createInsertSchema(buildingUpgrades).omit({ id: true });
export const insertActivityLogSchema = createInsertSchema(activityLogs).omit({ id: true });

// Define types for each model
export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;

export type Character = typeof characters.$inferSelect;
export type InsertCharacter = z.infer<typeof insertCharacterSchema>;

export type Aura = typeof auras.$inferSelect;
export type InsertAura = z.infer<typeof insertAuraSchema>;

export type Resource = typeof resources.$inferSelect;
export type InsertResource = z.infer<typeof insertResourceSchema>;

export type FarmingTask = typeof farmingTasks.$inferSelect;
export type InsertFarmingTask = z.infer<typeof insertFarmingTaskSchema>;

export type DungeonType = typeof dungeonTypes.$inferSelect;
export type InsertDungeonType = z.infer<typeof insertDungeonTypeSchema>;

export type DungeonRun = typeof dungeonRuns.$inferSelect;
export type InsertDungeonRun = z.infer<typeof insertDungeonRunSchema>;

export type ForgingTask = typeof forgingTasks.$inferSelect;
export type InsertForgingTask = z.infer<typeof insertForgingTaskSchema>;

export type BlackMarketListing = typeof blackMarketListings.$inferSelect;
export type InsertBlackMarketListing = z.infer<typeof insertBlackMarketListingSchema>;

export type BountyQuest = typeof bountyQuests.$inferSelect;
export type InsertBountyQuest = z.infer<typeof insertBountyQuestSchema>;

export type BuildingUpgrade = typeof buildingUpgrades.$inferSelect;
export type InsertBuildingUpgrade = z.infer<typeof insertBuildingUpgradeSchema>;

export type ActivityLog = typeof activityLogs.$inferSelect;
export type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;
